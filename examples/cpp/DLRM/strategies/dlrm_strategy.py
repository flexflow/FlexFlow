import argparse
import sys

def strategy_code(opts):
    code = []

    code.append("/* --------------------------")
    code.append("//// THIS CODE IS AUTOGENERATED")
    code.append("//// BY {}".format(sys.argv[0]))
    code.append("//// DO NOT MODIFY!!!")
    code.append("--------------------------*/\n")


    code.append("""
#include "strategy.pb.h"
#include <fstream>
#include <iostream>

int main()
{{
  int gpu = {num_gpu};
  int emb = {num_emb};
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  FFProtoBuf::Strategy strategy;
  // Embedding
  for (int i = 0; i < emb; i++) {{
    std::string name = "embedding"+std::to_string(i);
    FFProtoBuf::Op* op = strategy.add_ops();
    op->set_name(name);
    op->set_device_type(FFProtoBuf::Op_DeviceType_GPU);
    op->add_dims(1);
    op->add_dims(1);
    op->add_device_ids(i % gpu);
  }}
  std::vector<std::string> names;
  names.push_back("linear");
  names.push_back("mse_loss");
  names.push_back("concat");
  for (size_t i = 0; i < names.size(); i++) {{
    FFProtoBuf::Op* op = strategy.add_ops();
    op->set_name(names[i]);
    op->set_device_type(FFProtoBuf::Op_DeviceType_GPU);
    op->add_dims(1);
    op->add_dims(gpu);
    for (int j = 0; j < gpu; j++)
      op->add_device_ids(j);
  }}
  std::string output = "dlrm_strategy_" + std::to_string(emb) + "embs_" + std::to_string(gpu) + "gpus.pb";
  std::fstream outputFile(output.c_str(), std::ios::out | std::ios::trunc);
  strategy.SerializeToOstream(&outputFile);
  google::protobuf::ShutdownProtobufLibrary();
}}
""".format(num_gpu=opts.num_gpu, num_emb=opts.num_emb))
    return code

# Main
parser = argparse.ArgumentParser()
parser.add_argument("-f", "--filename", help="file name")
parser.add_argument("-g", "--num_gpu", help="number of GPUs")
parser.add_argument("-e", "--num_emb", help="number of Embedding tables")
opts = parser.parse_args()

code = strategy_code(opts)
with open(opts.filename, "w") as fout:
    for c in code:
        fout.write(c + "\n")

print("Created " + opts.filename)
