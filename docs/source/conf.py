# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
import subprocess
import shutil
import sphinx # only needed for the manual post processing
from pathlib import Path
from m2r2 import convert
from docutils.core import publish_string
import re

def get_parent_dir_path(path):
    return os.path.abspath(os.path.join(path, ".."))

docs_path = get_parent_dir_path(os.path.dirname(os.path.abspath(__file__)))
doxygen_path = os.path.join(docs_path, "doxygen")
doxygen_output = os.path.join(doxygen_path, "output")
doxygen_cpp_api_out = os.path.join(doxygen_path, "cpp_api")
FF_HOME = get_parent_dir_path(docs_path)
python_package_path = os.path.join(FF_HOME, "python")

sys.path.insert(0, os.path.abspath(python_package_path))

# Build the Doxygen docs
shutil.rmtree(doxygen_cpp_api_out, ignore_errors=True)
for gpu_backend in ("cuda", "hip"):
    doxygen_dest = os.path.join(doxygen_cpp_api_out, f"{gpu_backend}_api")
    os.makedirs(doxygen_dest, exist_ok=True)
    exclude_extension = ".cu" if gpu_backend == "hip" else ".cpp"
    doxygen_cmd = f'export FF_HOME={FF_HOME}; ( cat Doxyfile ; echo "EXCLUDE_PATTERNS+=*{exclude_extension}" ) | doxygen -'
    subprocess.check_call(doxygen_cmd, cwd=doxygen_path, shell=True)
    subprocess.check_call(f'mv {os.path.join(doxygen_output, "html")}/* {doxygen_dest}/', shell=True)

import sphinx_rtd_theme

# -- Project information -----------------------------------------------------

project = 'FlexFlow'
copyright = '2023 CMU, Facebook, LANL, MIT, NVIDIA, and Stanford (alphabetical)'
author = 'CMU, Facebook, LANL, MIT, NVIDIA, and Stanford (alphabetical)'

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx_rtd_theme',
    'sphinx.ext.autodoc',
    'm2r2',
]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    "collapse_navigation" : False
}
html_extra_path = [doxygen_cpp_api_out]

# Add any paths that contain templates here, relative to this directory.
# templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'Python, C++'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

source_suffix = ['.rst', '.md']


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']


def manual_post_processing(app, exception):
    if exception is None and app.builder.name == 'html':  # build succeeded
        print(f'Post-processing HTML docs at path {app.outdir}')
        build_dir = Path(app.outdir)

        # List of subfolders to search
        folder_paths = [build_dir, build_dir / 'developers_guide'] 

        for folder_path in folder_paths:

            # Only get HTML files in build dir, not subfolders
            html_files = folder_path.glob('*.html') 

            for html_file in html_files:
                content = html_file.read_text()

                # Find dropdown menus, and manually convert their contents
                pattern = r'<details>\n<summary>Expand here</summary>\n<br>(.*?)</details>'
                blocks = re.findall(pattern, content, re.DOTALL)

                for block in blocks:
                    # Convert Markdown to HTML
                    rst = convert(block, github_markdown=True)
                    html = publish_string(rst, writer_name='html')
                    html_str = html.decode('utf-8') 

                    # Replace block with converted HTML
                    content = content.replace(block, html_str)

                # Add space after dropdown menu block
                content = content.replace('</details></section>', 
                                  '</details></section>\n<p></p>')

                # Replace incorrect links
                content = content.replace('href="../docker/README.md"', 'href="docker.html"')
                content = content.replace('href="./TRAIN.md"', 'href="train_overview.html"')
                content = content.replace('href="./SERVE.md"', 'href="serve_overview.html"')
                content = content.replace('href="./docs/source/keras.rst"', 'href="keras.html"')
                content = content.replace('href="./docs/source/onnx.rst"', 'href="onnx.html"')
                

                html_file.write_text(content)


def setup(app):
   app.connect('build-finished', manual_post_processing)
