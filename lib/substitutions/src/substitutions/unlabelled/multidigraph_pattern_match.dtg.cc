// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/unlabelled/multidigraph_pattern_match.struct.toml
/* proj-data
{
  "generated_from": "9842661a5d4e7d717f12d2c27da7df0d"
}
*/

#include "substitutions/unlabelled/multidigraph_pattern_match.dtg.h"

#include "substitutions/unlabelled/pattern_edge.dtg.h"
#include "substitutions/unlabelled/pattern_node.dtg.h"
#include "utils/bidict.h"
#include "utils/graph.h"

namespace FlexFlow {
MultiDiGraphPatternMatch::MultiDiGraphPatternMatch(
    ::FlexFlow::bidict<::FlexFlow::PatternNode, ::FlexFlow::Node> const
        &node_assignment,
    ::FlexFlow::bidict<::FlexFlow::PatternEdge,
                       ::FlexFlow::OpenMultiDiEdge> const &edge_assignment)
    : node_assignment(node_assignment), edge_assignment(edge_assignment) {}
bool MultiDiGraphPatternMatch::operator==(
    MultiDiGraphPatternMatch const &other) const {
  return std::tie(this->node_assignment, this->edge_assignment) ==
         std::tie(other.node_assignment, other.edge_assignment);
}
bool MultiDiGraphPatternMatch::operator!=(
    MultiDiGraphPatternMatch const &other) const {
  return std::tie(this->node_assignment, this->edge_assignment) !=
         std::tie(other.node_assignment, other.edge_assignment);
}
} // namespace FlexFlow
