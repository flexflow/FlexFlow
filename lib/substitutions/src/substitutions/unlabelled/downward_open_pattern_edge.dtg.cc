// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/unlabelled/downward_open_pattern_edge.struct.toml
/* proj-data
{
  "generated_from": "c67ec363a91ce090dc538dcf76fa1f12"
}
*/

#include "substitutions/unlabelled/downward_open_pattern_edge.dtg.h"

#include "utils/graph.h"

namespace FlexFlow {
DownwardOpenPatternEdge::DownwardOpenPatternEdge(
    ::FlexFlow::DownwardOpenMultiDiEdge const &raw_edge)
    : raw_edge(raw_edge) {}
bool DownwardOpenPatternEdge::operator==(
    DownwardOpenPatternEdge const &other) const {
  return std::tie(this->raw_edge) == std::tie(other.raw_edge);
}
bool DownwardOpenPatternEdge::operator!=(
    DownwardOpenPatternEdge const &other) const {
  return std::tie(this->raw_edge) != std::tie(other.raw_edge);
}
bool DownwardOpenPatternEdge::operator<(
    DownwardOpenPatternEdge const &other) const {
  return std::tie(this->raw_edge) < std::tie(other.raw_edge);
}
bool DownwardOpenPatternEdge::operator>(
    DownwardOpenPatternEdge const &other) const {
  return std::tie(this->raw_edge) > std::tie(other.raw_edge);
}
bool DownwardOpenPatternEdge::operator<=(
    DownwardOpenPatternEdge const &other) const {
  return std::tie(this->raw_edge) <= std::tie(other.raw_edge);
}
bool DownwardOpenPatternEdge::operator>=(
    DownwardOpenPatternEdge const &other) const {
  return std::tie(this->raw_edge) >= std::tie(other.raw_edge);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::DownwardOpenPatternEdge>::operator()(
    FlexFlow::DownwardOpenPatternEdge const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::DownwardOpenMultiDiEdge>{}(x.raw_edge) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std
