// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/operator_pattern/operator_attribute_expr.variant.toml
/* proj-data
{
  "generated_from": "15d26dd1f08092ecc82b725aa9411597"
}
*/

#include "substitutions/operator_pattern/operator_attribute_expr.dtg.h"

#include "fmt/format.h"
#include <sstream>
#include <stdexcept>

namespace FlexFlow {
OperatorAttributeExpr::OperatorAttributeExpr(
    ::FlexFlow::OperatorAttributeKey const &v)
    : raw_variant(v) {}
OperatorAttributeExpr::OperatorAttributeExpr(
    ::FlexFlow::OperatorAttributeListSize const &v)
    : raw_variant(v) {}
OperatorAttributeExpr::OperatorAttributeExpr(
    ::FlexFlow::OperatorAttributeListIndexAccess const &v)
    : raw_variant(v) {}
bool OperatorAttributeExpr::operator==(
    OperatorAttributeExpr const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool OperatorAttributeExpr::operator!=(
    OperatorAttributeExpr const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool OperatorAttributeExpr::operator<(
    OperatorAttributeExpr const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool OperatorAttributeExpr::operator>(
    OperatorAttributeExpr const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool OperatorAttributeExpr::operator<=(
    OperatorAttributeExpr const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool OperatorAttributeExpr::operator>=(
    OperatorAttributeExpr const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::OperatorAttributeExpr>::operator()(
    ::FlexFlow::OperatorAttributeExpr const &x) const {
  return std::hash<
      std::variant<::FlexFlow::OperatorAttributeKey,
                   ::FlexFlow::OperatorAttributeListSize,
                   ::FlexFlow::OperatorAttributeListIndexAccess>>{}(
      x.raw_variant);
}
} // namespace std
namespace nlohmann {
::FlexFlow::OperatorAttributeExpr
    adl_serializer<::FlexFlow::OperatorAttributeExpr>::from_json(
        json const &j) {
  std::string key = j.at("type").template get<std::string>();
  if (key == "key") {
    return ::FlexFlow::OperatorAttributeExpr{
        j.at("value").template get<::FlexFlow::OperatorAttributeKey>()};
  } else if (key == "list_size") {
    return ::FlexFlow::OperatorAttributeExpr{
        j.at("value").template get<::FlexFlow::OperatorAttributeListSize>()};
  } else if (key == "list_idx") {
    return ::FlexFlow::OperatorAttributeExpr{
        j.at("value")
            .template get<::FlexFlow::OperatorAttributeListIndexAccess>()};
  } else {
    throw std::runtime_error(fmt::format("Unknown type key {}", key));
  }
}
void adl_serializer<::FlexFlow::OperatorAttributeExpr>::to_json(
    json &j, ::FlexFlow::OperatorAttributeExpr const &x) {
  j["__type"] = "OperatorAttributeExpr";
  switch (x.index()) {
    case 0: {
      j["type"] = "key";
      j["value"] = x.get<::FlexFlow::OperatorAttributeKey>();
      break;
    }
    case 1: {
      j["type"] = "list_size";
      j["value"] = x.get<::FlexFlow::OperatorAttributeListSize>();
      break;
    }
    case 2: {
      j["type"] = "list_idx";
      j["value"] = x.get<::FlexFlow::OperatorAttributeListIndexAccess>();
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type OperatorAttributeExpr", x.index()));
    }
  }
}
} // namespace nlohmann
namespace FlexFlow {
std::string format_as(::FlexFlow::OperatorAttributeExpr const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<OperatorAttributeExpr key="
          << x.get<::FlexFlow::OperatorAttributeKey>() << ">";
      break;
    }
    case 1: {
      oss << "<OperatorAttributeExpr list_size="
          << x.get<::FlexFlow::OperatorAttributeListSize>() << ">";
      break;
    }
    case 2: {
      oss << "<OperatorAttributeExpr list_idx="
          << x.get<::FlexFlow::OperatorAttributeListIndexAccess>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type OperatorAttributeExpr", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::OperatorAttributeExpr const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
