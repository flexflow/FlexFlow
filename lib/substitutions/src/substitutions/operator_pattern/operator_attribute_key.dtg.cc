// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/operator_pattern/operator_attribute_key.enum.toml
/* proj-data
{
  "generated_from": "e637388397720b328b1f4b9ba6b14611"
}
*/

#include "substitutions/operator_pattern/operator_attribute_key.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::OperatorAttributeKey>::operator()(
    FlexFlow::OperatorAttributeKey x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(OperatorAttributeKey x) {
  switch (x) {
    case OperatorAttributeKey::OP_TYPE:
      return "OP_TYPE";
    case OperatorAttributeKey::USE_BIAS:
      return "USE_BIAS";
    case OperatorAttributeKey::GROUPS:
      return "GROUPS";
    case OperatorAttributeKey::POOL_TYPE:
      return "POOL_TYPE";
    case OperatorAttributeKey::KERNEL_H:
      return "KERNEL_H";
    case OperatorAttributeKey::KERNEL_W:
      return "KERNEL_W";
    case OperatorAttributeKey::DATA_TYPE:
      return "DATA_TYPE";
    case OperatorAttributeKey::SCALAR:
      return "SCALAR";
    case OperatorAttributeKey::STRIDE_H:
      return "STRIDE_H";
    case OperatorAttributeKey::STRIDE_W:
      return "STRIDE_W";
    case OperatorAttributeKey::PADDING_H:
      return "PADDING_H";
    case OperatorAttributeKey::PADDING_W:
      return "PADDING_W";
    case OperatorAttributeKey::AGGR:
      return "AGGR";
    case OperatorAttributeKey::NUM_ENTRIES:
      return "NUM_ENTRIES";
    case OperatorAttributeKey::OUT_CHANNELS:
      return "OUT_CHANNELS";
    case OperatorAttributeKey::ACTIVATION:
      return "ACTIVATION";
    case OperatorAttributeKey::NUMDIM:
      return "NUMDIM";
    case OperatorAttributeKey::AXIS:
      return "AXIS";
    case OperatorAttributeKey::PERMUTATION:
      return "PERMUTATION";
    case OperatorAttributeKey::OUTSHUFFLE:
      return "OUTSHUFFLE";
    case OperatorAttributeKey::MERGE_GCONV_COUNT:
      return "MERGE_GCONV_COUNT";
    case OperatorAttributeKey::AXES:
      return "AXES";
    case OperatorAttributeKey::KEEP_DIMS:
      return "KEEP_DIMS";
    case OperatorAttributeKey::EPSILON:
      return "EPSILON";
    case OperatorAttributeKey::PARALLEL_OP_DIM:
      return "PARALLEL_OP_DIM";
    case OperatorAttributeKey::PARALLEL_OP_DEGREE:
      return "PARALLEL_OP_DEGREE";
    case OperatorAttributeKey::SOFTMAX_DIM:
      return "SOFTMAX_DIM";
    case OperatorAttributeKey::NUM_HEADS:
      return "NUM_HEADS";
    case OperatorAttributeKey::PARALLEL_DIM:
      return "PARALLEL_DIM";
    case OperatorAttributeKey::PARALLEL_DEGREE:
      return "PARALLEL_DEGREE";
    case OperatorAttributeKey::PAD:
      return "PAD";
    case OperatorAttributeKey::EMBED_DIM:
      return "EMBED_DIM";
    case OperatorAttributeKey::KDIM:
      return "KDIM";
    case OperatorAttributeKey::VDIM:
      return "VDIM";
    case OperatorAttributeKey::DROPOUT:
      return "DROPOUT";
    case OperatorAttributeKey::BIAS:
      return "BIAS";
    case OperatorAttributeKey::ADD_BIAS_KV:
      return "ADD_BIAS_KV";
    case OperatorAttributeKey::ADD_ZERO_ATTN:
      return "ADD_ZERO_ATTN";
    case OperatorAttributeKey::A_SEQ_LENGTH_DIM:
      return "A_SEQ_LENGTH_DIM";
    case OperatorAttributeKey::B_SEQ_LENGTH_DIM:
      return "B_SEQ_LENGTH_DIM";
    case OperatorAttributeKey::RELU:
      return "RELU";
    case OperatorAttributeKey::TARGET_DIMS:
      return "TARGET_DIMS";
    case OperatorAttributeKey::RATE:
      return "RATE";
    case OperatorAttributeKey::SEED:
      return "SEED";
    case OperatorAttributeKey::SHOULD_BROADCAST_LHS:
      return "SHOULD_BROADCAST_LHS";
    case OperatorAttributeKey::SHOULD_BROADCAST_RHS:
      return "SHOULD_BROADCAST_RHS";
    case OperatorAttributeKey::DIM:
      return "DIM";
    case OperatorAttributeKey::ELEMENTWISE_AFFINE:
      return "ELEMENTWISE_AFFINE";
    case OperatorAttributeKey::REGULARIZER:
      return "REGULARIZER";
    case OperatorAttributeKey::SHAPE:
      return "SHAPE";
    case OperatorAttributeKey::SPLITS:
      return "SPLITS";
    case OperatorAttributeKey::K:
      return "K";
    case OperatorAttributeKey::SORTED:
      return "SORTED";
    case OperatorAttributeKey::COMBINE_DIM:
      return "COMBINE_DIM";
    case OperatorAttributeKey::COMBINE_DEGREE:
      return "COMBINE_DEGREE";
    case OperatorAttributeKey::NUM_INPUTS:
      return "NUM_INPUTS";
    default:
      std::ostringstream oss;
      oss << "Unknown OperatorAttributeKey value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, OperatorAttributeKey x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, OperatorAttributeKey x) {
  switch (x) {
    case OperatorAttributeKey::OP_TYPE:
      j = "OP_TYPE";
      break;
    case OperatorAttributeKey::USE_BIAS:
      j = "USE_BIAS";
      break;
    case OperatorAttributeKey::GROUPS:
      j = "GROUPS";
      break;
    case OperatorAttributeKey::POOL_TYPE:
      j = "POOL_TYPE";
      break;
    case OperatorAttributeKey::KERNEL_H:
      j = "KERNEL_H";
      break;
    case OperatorAttributeKey::KERNEL_W:
      j = "KERNEL_W";
      break;
    case OperatorAttributeKey::DATA_TYPE:
      j = "DATA_TYPE";
      break;
    case OperatorAttributeKey::SCALAR:
      j = "SCALAR";
      break;
    case OperatorAttributeKey::STRIDE_H:
      j = "STRIDE_H";
      break;
    case OperatorAttributeKey::STRIDE_W:
      j = "STRIDE_W";
      break;
    case OperatorAttributeKey::PADDING_H:
      j = "PADDING_H";
      break;
    case OperatorAttributeKey::PADDING_W:
      j = "PADDING_W";
      break;
    case OperatorAttributeKey::AGGR:
      j = "AGGR";
      break;
    case OperatorAttributeKey::NUM_ENTRIES:
      j = "NUM_ENTRIES";
      break;
    case OperatorAttributeKey::OUT_CHANNELS:
      j = "OUT_CHANNELS";
      break;
    case OperatorAttributeKey::ACTIVATION:
      j = "ACTIVATION";
      break;
    case OperatorAttributeKey::NUMDIM:
      j = "NUMDIM";
      break;
    case OperatorAttributeKey::AXIS:
      j = "AXIS";
      break;
    case OperatorAttributeKey::PERMUTATION:
      j = "PERMUTATION";
      break;
    case OperatorAttributeKey::OUTSHUFFLE:
      j = "OUTSHUFFLE";
      break;
    case OperatorAttributeKey::MERGE_GCONV_COUNT:
      j = "MERGE_GCONV_COUNT";
      break;
    case OperatorAttributeKey::AXES:
      j = "AXES";
      break;
    case OperatorAttributeKey::KEEP_DIMS:
      j = "KEEP_DIMS";
      break;
    case OperatorAttributeKey::EPSILON:
      j = "EPSILON";
      break;
    case OperatorAttributeKey::PARALLEL_OP_DIM:
      j = "PARALLEL_OP_DIM";
      break;
    case OperatorAttributeKey::PARALLEL_OP_DEGREE:
      j = "PARALLEL_OP_DEGREE";
      break;
    case OperatorAttributeKey::SOFTMAX_DIM:
      j = "SOFTMAX_DIM";
      break;
    case OperatorAttributeKey::NUM_HEADS:
      j = "NUM_HEADS";
      break;
    case OperatorAttributeKey::PARALLEL_DIM:
      j = "PARALLEL_DIM";
      break;
    case OperatorAttributeKey::PARALLEL_DEGREE:
      j = "PARALLEL_DEGREE";
      break;
    case OperatorAttributeKey::PAD:
      j = "PAD";
      break;
    case OperatorAttributeKey::EMBED_DIM:
      j = "EMBED_DIM";
      break;
    case OperatorAttributeKey::KDIM:
      j = "KDIM";
      break;
    case OperatorAttributeKey::VDIM:
      j = "VDIM";
      break;
    case OperatorAttributeKey::DROPOUT:
      j = "DROPOUT";
      break;
    case OperatorAttributeKey::BIAS:
      j = "BIAS";
      break;
    case OperatorAttributeKey::ADD_BIAS_KV:
      j = "ADD_BIAS_KV";
      break;
    case OperatorAttributeKey::ADD_ZERO_ATTN:
      j = "ADD_ZERO_ATTN";
      break;
    case OperatorAttributeKey::A_SEQ_LENGTH_DIM:
      j = "A_SEQ_LENGTH_DIM";
      break;
    case OperatorAttributeKey::B_SEQ_LENGTH_DIM:
      j = "B_SEQ_LENGTH_DIM";
      break;
    case OperatorAttributeKey::RELU:
      j = "RELU";
      break;
    case OperatorAttributeKey::TARGET_DIMS:
      j = "TARGET_DIMS";
      break;
    case OperatorAttributeKey::RATE:
      j = "RATE";
      break;
    case OperatorAttributeKey::SEED:
      j = "SEED";
      break;
    case OperatorAttributeKey::SHOULD_BROADCAST_LHS:
      j = "SHOULD_BROADCAST_LHS";
      break;
    case OperatorAttributeKey::SHOULD_BROADCAST_RHS:
      j = "SHOULD_BROADCAST_RHS";
      break;
    case OperatorAttributeKey::DIM:
      j = "DIM";
      break;
    case OperatorAttributeKey::ELEMENTWISE_AFFINE:
      j = "ELEMENTWISE_AFFINE";
      break;
    case OperatorAttributeKey::REGULARIZER:
      j = "REGULARIZER";
      break;
    case OperatorAttributeKey::SHAPE:
      j = "SHAPE";
      break;
    case OperatorAttributeKey::SPLITS:
      j = "SPLITS";
      break;
    case OperatorAttributeKey::K:
      j = "K";
      break;
    case OperatorAttributeKey::SORTED:
      j = "SORTED";
      break;
    case OperatorAttributeKey::COMBINE_DIM:
      j = "COMBINE_DIM";
      break;
    case OperatorAttributeKey::COMBINE_DEGREE:
      j = "COMBINE_DEGREE";
      break;
    case OperatorAttributeKey::NUM_INPUTS:
      j = "NUM_INPUTS";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown OperatorAttributeKey value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, OperatorAttributeKey &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "OP_TYPE") {
    x = OperatorAttributeKey::OP_TYPE;
  } else if (as_str == "USE_BIAS") {
    x = OperatorAttributeKey::USE_BIAS;
  } else if (as_str == "GROUPS") {
    x = OperatorAttributeKey::GROUPS;
  } else if (as_str == "POOL_TYPE") {
    x = OperatorAttributeKey::POOL_TYPE;
  } else if (as_str == "KERNEL_H") {
    x = OperatorAttributeKey::KERNEL_H;
  } else if (as_str == "KERNEL_W") {
    x = OperatorAttributeKey::KERNEL_W;
  } else if (as_str == "DATA_TYPE") {
    x = OperatorAttributeKey::DATA_TYPE;
  } else if (as_str == "SCALAR") {
    x = OperatorAttributeKey::SCALAR;
  } else if (as_str == "STRIDE_H") {
    x = OperatorAttributeKey::STRIDE_H;
  } else if (as_str == "STRIDE_W") {
    x = OperatorAttributeKey::STRIDE_W;
  } else if (as_str == "PADDING_H") {
    x = OperatorAttributeKey::PADDING_H;
  } else if (as_str == "PADDING_W") {
    x = OperatorAttributeKey::PADDING_W;
  } else if (as_str == "AGGR") {
    x = OperatorAttributeKey::AGGR;
  } else if (as_str == "NUM_ENTRIES") {
    x = OperatorAttributeKey::NUM_ENTRIES;
  } else if (as_str == "OUT_CHANNELS") {
    x = OperatorAttributeKey::OUT_CHANNELS;
  } else if (as_str == "ACTIVATION") {
    x = OperatorAttributeKey::ACTIVATION;
  } else if (as_str == "NUMDIM") {
    x = OperatorAttributeKey::NUMDIM;
  } else if (as_str == "AXIS") {
    x = OperatorAttributeKey::AXIS;
  } else if (as_str == "PERMUTATION") {
    x = OperatorAttributeKey::PERMUTATION;
  } else if (as_str == "OUTSHUFFLE") {
    x = OperatorAttributeKey::OUTSHUFFLE;
  } else if (as_str == "MERGE_GCONV_COUNT") {
    x = OperatorAttributeKey::MERGE_GCONV_COUNT;
  } else if (as_str == "AXES") {
    x = OperatorAttributeKey::AXES;
  } else if (as_str == "KEEP_DIMS") {
    x = OperatorAttributeKey::KEEP_DIMS;
  } else if (as_str == "EPSILON") {
    x = OperatorAttributeKey::EPSILON;
  } else if (as_str == "PARALLEL_OP_DIM") {
    x = OperatorAttributeKey::PARALLEL_OP_DIM;
  } else if (as_str == "PARALLEL_OP_DEGREE") {
    x = OperatorAttributeKey::PARALLEL_OP_DEGREE;
  } else if (as_str == "SOFTMAX_DIM") {
    x = OperatorAttributeKey::SOFTMAX_DIM;
  } else if (as_str == "NUM_HEADS") {
    x = OperatorAttributeKey::NUM_HEADS;
  } else if (as_str == "PARALLEL_DIM") {
    x = OperatorAttributeKey::PARALLEL_DIM;
  } else if (as_str == "PARALLEL_DEGREE") {
    x = OperatorAttributeKey::PARALLEL_DEGREE;
  } else if (as_str == "PAD") {
    x = OperatorAttributeKey::PAD;
  } else if (as_str == "EMBED_DIM") {
    x = OperatorAttributeKey::EMBED_DIM;
  } else if (as_str == "KDIM") {
    x = OperatorAttributeKey::KDIM;
  } else if (as_str == "VDIM") {
    x = OperatorAttributeKey::VDIM;
  } else if (as_str == "DROPOUT") {
    x = OperatorAttributeKey::DROPOUT;
  } else if (as_str == "BIAS") {
    x = OperatorAttributeKey::BIAS;
  } else if (as_str == "ADD_BIAS_KV") {
    x = OperatorAttributeKey::ADD_BIAS_KV;
  } else if (as_str == "ADD_ZERO_ATTN") {
    x = OperatorAttributeKey::ADD_ZERO_ATTN;
  } else if (as_str == "A_SEQ_LENGTH_DIM") {
    x = OperatorAttributeKey::A_SEQ_LENGTH_DIM;
  } else if (as_str == "B_SEQ_LENGTH_DIM") {
    x = OperatorAttributeKey::B_SEQ_LENGTH_DIM;
  } else if (as_str == "RELU") {
    x = OperatorAttributeKey::RELU;
  } else if (as_str == "TARGET_DIMS") {
    x = OperatorAttributeKey::TARGET_DIMS;
  } else if (as_str == "RATE") {
    x = OperatorAttributeKey::RATE;
  } else if (as_str == "SEED") {
    x = OperatorAttributeKey::SEED;
  } else if (as_str == "SHOULD_BROADCAST_LHS") {
    x = OperatorAttributeKey::SHOULD_BROADCAST_LHS;
  } else if (as_str == "SHOULD_BROADCAST_RHS") {
    x = OperatorAttributeKey::SHOULD_BROADCAST_RHS;
  } else if (as_str == "DIM") {
    x = OperatorAttributeKey::DIM;
  } else if (as_str == "ELEMENTWISE_AFFINE") {
    x = OperatorAttributeKey::ELEMENTWISE_AFFINE;
  } else if (as_str == "REGULARIZER") {
    x = OperatorAttributeKey::REGULARIZER;
  } else if (as_str == "SHAPE") {
    x = OperatorAttributeKey::SHAPE;
  } else if (as_str == "SPLITS") {
    x = OperatorAttributeKey::SPLITS;
  } else if (as_str == "K") {
    x = OperatorAttributeKey::K;
  } else if (as_str == "SORTED") {
    x = OperatorAttributeKey::SORTED;
  } else if (as_str == "COMBINE_DIM") {
    x = OperatorAttributeKey::COMBINE_DIM;
  } else if (as_str == "COMBINE_DEGREE") {
    x = OperatorAttributeKey::COMBINE_DEGREE;
  } else if (as_str == "NUM_INPUTS") {
    x = OperatorAttributeKey::NUM_INPUTS;
  } else {
    std::ostringstream oss;
    oss << "Unknown OperatorAttributeKey value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::OperatorAttributeKey>
    Arbitrary<FlexFlow::OperatorAttributeKey>::arbitrary() {
  return gen::element<FlexFlow::OperatorAttributeKey>(
      FlexFlow::OperatorAttributeKey::OP_TYPE,
      FlexFlow::OperatorAttributeKey::USE_BIAS,
      FlexFlow::OperatorAttributeKey::GROUPS,
      FlexFlow::OperatorAttributeKey::POOL_TYPE,
      FlexFlow::OperatorAttributeKey::KERNEL_H,
      FlexFlow::OperatorAttributeKey::KERNEL_W,
      FlexFlow::OperatorAttributeKey::DATA_TYPE,
      FlexFlow::OperatorAttributeKey::SCALAR,
      FlexFlow::OperatorAttributeKey::STRIDE_H,
      FlexFlow::OperatorAttributeKey::STRIDE_W,
      FlexFlow::OperatorAttributeKey::PADDING_H,
      FlexFlow::OperatorAttributeKey::PADDING_W,
      FlexFlow::OperatorAttributeKey::AGGR,
      FlexFlow::OperatorAttributeKey::NUM_ENTRIES,
      FlexFlow::OperatorAttributeKey::OUT_CHANNELS,
      FlexFlow::OperatorAttributeKey::ACTIVATION,
      FlexFlow::OperatorAttributeKey::NUMDIM,
      FlexFlow::OperatorAttributeKey::AXIS,
      FlexFlow::OperatorAttributeKey::PERMUTATION,
      FlexFlow::OperatorAttributeKey::OUTSHUFFLE,
      FlexFlow::OperatorAttributeKey::MERGE_GCONV_COUNT,
      FlexFlow::OperatorAttributeKey::AXES,
      FlexFlow::OperatorAttributeKey::KEEP_DIMS,
      FlexFlow::OperatorAttributeKey::EPSILON,
      FlexFlow::OperatorAttributeKey::PARALLEL_OP_DIM,
      FlexFlow::OperatorAttributeKey::PARALLEL_OP_DEGREE,
      FlexFlow::OperatorAttributeKey::SOFTMAX_DIM,
      FlexFlow::OperatorAttributeKey::NUM_HEADS,
      FlexFlow::OperatorAttributeKey::PARALLEL_DIM,
      FlexFlow::OperatorAttributeKey::PARALLEL_DEGREE,
      FlexFlow::OperatorAttributeKey::PAD,
      FlexFlow::OperatorAttributeKey::EMBED_DIM,
      FlexFlow::OperatorAttributeKey::KDIM,
      FlexFlow::OperatorAttributeKey::VDIM,
      FlexFlow::OperatorAttributeKey::DROPOUT,
      FlexFlow::OperatorAttributeKey::BIAS,
      FlexFlow::OperatorAttributeKey::ADD_BIAS_KV,
      FlexFlow::OperatorAttributeKey::ADD_ZERO_ATTN,
      FlexFlow::OperatorAttributeKey::A_SEQ_LENGTH_DIM,
      FlexFlow::OperatorAttributeKey::B_SEQ_LENGTH_DIM,
      FlexFlow::OperatorAttributeKey::RELU,
      FlexFlow::OperatorAttributeKey::TARGET_DIMS,
      FlexFlow::OperatorAttributeKey::RATE,
      FlexFlow::OperatorAttributeKey::SEED,
      FlexFlow::OperatorAttributeKey::SHOULD_BROADCAST_LHS,
      FlexFlow::OperatorAttributeKey::SHOULD_BROADCAST_RHS,
      FlexFlow::OperatorAttributeKey::DIM,
      FlexFlow::OperatorAttributeKey::ELEMENTWISE_AFFINE,
      FlexFlow::OperatorAttributeKey::REGULARIZER,
      FlexFlow::OperatorAttributeKey::SHAPE,
      FlexFlow::OperatorAttributeKey::SPLITS,
      FlexFlow::OperatorAttributeKey::K,
      FlexFlow::OperatorAttributeKey::SORTED,
      FlexFlow::OperatorAttributeKey::COMBINE_DIM,
      FlexFlow::OperatorAttributeKey::COMBINE_DEGREE,
      FlexFlow::OperatorAttributeKey::NUM_INPUTS);
}
} // namespace rc
