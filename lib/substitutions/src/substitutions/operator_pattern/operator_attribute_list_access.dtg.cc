// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/operator_pattern/operator_attribute_list_access.struct.toml
/* proj-data
{
  "generated_from": "1dc90d1e823f05b82c1a5ff433fbf000"
}
*/

#include "substitutions/operator_pattern/operator_attribute_list_access.dtg.h"

#include "substitutions/operator_pattern/operator_attribute_key.dtg.h"
#include <sstream>

namespace FlexFlow {
OperatorAttributeListIndexAccess::OperatorAttributeListIndexAccess(
    ::FlexFlow::OperatorAttributeKey const &attribute_key, int const &index)
    : attribute_key(attribute_key), index(index) {}
bool OperatorAttributeListIndexAccess::operator==(
    OperatorAttributeListIndexAccess const &other) const {
  return std::tie(this->attribute_key, this->index) ==
         std::tie(other.attribute_key, other.index);
}
bool OperatorAttributeListIndexAccess::operator!=(
    OperatorAttributeListIndexAccess const &other) const {
  return std::tie(this->attribute_key, this->index) !=
         std::tie(other.attribute_key, other.index);
}
bool OperatorAttributeListIndexAccess::operator<(
    OperatorAttributeListIndexAccess const &other) const {
  return std::tie(this->attribute_key, this->index) <
         std::tie(other.attribute_key, other.index);
}
bool OperatorAttributeListIndexAccess::operator>(
    OperatorAttributeListIndexAccess const &other) const {
  return std::tie(this->attribute_key, this->index) >
         std::tie(other.attribute_key, other.index);
}
bool OperatorAttributeListIndexAccess::operator<=(
    OperatorAttributeListIndexAccess const &other) const {
  return std::tie(this->attribute_key, this->index) <=
         std::tie(other.attribute_key, other.index);
}
bool OperatorAttributeListIndexAccess::operator>=(
    OperatorAttributeListIndexAccess const &other) const {
  return std::tie(this->attribute_key, this->index) >=
         std::tie(other.attribute_key, other.index);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::OperatorAttributeListIndexAccess>::operator()(
    FlexFlow::OperatorAttributeListIndexAccess const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::OperatorAttributeKey>{}(x.attribute_key) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.index) + 0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::OperatorAttributeListIndexAccess
    adl_serializer<FlexFlow::OperatorAttributeListIndexAccess>::from_json(
        json const &j) {
  return {
      j.at("attribute_key").template get<::FlexFlow::OperatorAttributeKey>(),
      j.at("index").template get<int>()};
}
void adl_serializer<FlexFlow::OperatorAttributeListIndexAccess>::to_json(
    json &j, FlexFlow::OperatorAttributeListIndexAccess const &v) {
  j["__type"] = "OperatorAttributeListIndexAccess";
  j["attribute_key"] = v.attribute_key;
  j["index"] = v.index;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::OperatorAttributeListIndexAccess>
    Arbitrary<FlexFlow::OperatorAttributeListIndexAccess>::arbitrary() {
  return gen::construct<FlexFlow::OperatorAttributeListIndexAccess>(
      gen::arbitrary<::FlexFlow::OperatorAttributeKey>(),
      gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(OperatorAttributeListIndexAccess const &x) {
  std::ostringstream oss;
  oss << "<OperatorAttributeListIndexAccess";
  oss << " attribute_key=" << x.attribute_key;
  oss << " index=" << x.index;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         OperatorAttributeListIndexAccess const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
