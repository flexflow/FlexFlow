// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/operator_pattern/operator_attribute_list_size.struct.toml
/* proj-data
{
  "generated_from": "30999ad6b0603e380bc33d32fa088e45"
}
*/

#include "substitutions/operator_pattern/operator_attribute_list_size.dtg.h"

#include "substitutions/operator_pattern/operator_attribute_key.dtg.h"
#include <sstream>

namespace FlexFlow {
OperatorAttributeListSize::OperatorAttributeListSize(
    ::FlexFlow::OperatorAttributeKey const &attribute_key)
    : attribute_key(attribute_key) {}
bool OperatorAttributeListSize::operator==(
    OperatorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) == std::tie(other.attribute_key);
}
bool OperatorAttributeListSize::operator!=(
    OperatorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) != std::tie(other.attribute_key);
}
bool OperatorAttributeListSize::operator<(
    OperatorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) < std::tie(other.attribute_key);
}
bool OperatorAttributeListSize::operator>(
    OperatorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) > std::tie(other.attribute_key);
}
bool OperatorAttributeListSize::operator<=(
    OperatorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) <= std::tie(other.attribute_key);
}
bool OperatorAttributeListSize::operator>=(
    OperatorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) >= std::tie(other.attribute_key);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::OperatorAttributeListSize>::operator()(
    ::FlexFlow::OperatorAttributeListSize const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::OperatorAttributeKey>{}(x.attribute_key) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::OperatorAttributeListSize
    adl_serializer<::FlexFlow::OperatorAttributeListSize>::from_json(
        json const &j) {
  return ::FlexFlow::OperatorAttributeListSize{
      j.at("attribute_key").template get<::FlexFlow::OperatorAttributeKey>()};
}
void adl_serializer<::FlexFlow::OperatorAttributeListSize>::to_json(
    json &j, ::FlexFlow::OperatorAttributeListSize const &v) {
  j["__type"] = "OperatorAttributeListSize";
  j["attribute_key"] = v.attribute_key;
}
} // namespace nlohmann

namespace rc {
Gen<::FlexFlow::OperatorAttributeListSize>
    Arbitrary<::FlexFlow::OperatorAttributeListSize>::arbitrary() {
  return gen::construct<::FlexFlow::OperatorAttributeListSize>(
      gen::arbitrary<::FlexFlow::OperatorAttributeKey>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(OperatorAttributeListSize const &x) {
  std::ostringstream oss;
  oss << "<OperatorAttributeListSize";
  oss << " attribute_key=" << x.attribute_key;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, OperatorAttributeListSize const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
