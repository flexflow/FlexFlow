// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/output_graph/output_operator_attribute_expr.variant.toml
/* proj-data
{
  "generated_from": "89ebf777a5b909eef78ab5a5a177e041"
}
*/

#include "substitutions/output_graph/output_operator_attribute_expr.dtg.h"

#include <sstream>

namespace FlexFlow {
OutputOperatorAttributeExpr::OutputOperatorAttributeExpr(
    ::FlexFlow::OutputOperatorAttrAccess const &v)
    : raw_variant(v) {}
OutputOperatorAttributeExpr::OutputOperatorAttributeExpr(
    ::FlexFlow::AttrConstant const &v)
    : raw_variant(v) {}
bool OutputOperatorAttributeExpr::operator==(
    OutputOperatorAttributeExpr const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool OutputOperatorAttributeExpr::operator!=(
    OutputOperatorAttributeExpr const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool OutputOperatorAttributeExpr::operator<(
    OutputOperatorAttributeExpr const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool OutputOperatorAttributeExpr::operator>(
    OutputOperatorAttributeExpr const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool OutputOperatorAttributeExpr::operator<=(
    OutputOperatorAttributeExpr const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool OutputOperatorAttributeExpr::operator>=(
    OutputOperatorAttributeExpr const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::OutputOperatorAttributeExpr>::operator()(
    ::FlexFlow::OutputOperatorAttributeExpr const &x) const {
  return std::hash<std::variant<::FlexFlow::OutputOperatorAttrAccess,
                                ::FlexFlow::AttrConstant>>{}(x.raw_variant);
}
} // namespace std
namespace FlexFlow {
std::string format_as(::FlexFlow::OutputOperatorAttributeExpr const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<OutputOperatorAttributeExpr attr_ref="
          << x.get<::FlexFlow::OutputOperatorAttrAccess>() << ">";
      break;
    }
    case 1: {
      oss << "<OutputOperatorAttributeExpr constant="
          << x.get<::FlexFlow::AttrConstant>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type OutputOperatorAttributeExpr", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::OutputOperatorAttributeExpr const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
