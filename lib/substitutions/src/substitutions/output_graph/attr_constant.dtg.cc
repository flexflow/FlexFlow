// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/output_graph/attr_constant.struct.toml
/* proj-data
{
  "generated_from": "1e5beabcb8e3657d8fe9c9c8b1310cb1"
}
*/

#include "substitutions/output_graph/attr_constant.dtg.h"

#include "substitutions/operator_pattern/operator_attribute_value.dtg.h"
#include <sstream>

namespace FlexFlow {
AttrConstant::AttrConstant(::FlexFlow::OperatorAttributeValue const &value)
    : value(value) {}
bool AttrConstant::operator==(AttrConstant const &other) const {
  return std::tie(this->value) == std::tie(other.value);
}
bool AttrConstant::operator!=(AttrConstant const &other) const {
  return std::tie(this->value) != std::tie(other.value);
}
bool AttrConstant::operator<(AttrConstant const &other) const {
  return std::tie(this->value) < std::tie(other.value);
}
bool AttrConstant::operator>(AttrConstant const &other) const {
  return std::tie(this->value) > std::tie(other.value);
}
bool AttrConstant::operator<=(AttrConstant const &other) const {
  return std::tie(this->value) <= std::tie(other.value);
}
bool AttrConstant::operator>=(AttrConstant const &other) const {
  return std::tie(this->value) >= std::tie(other.value);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::AttrConstant>::operator()(
    FlexFlow::AttrConstant const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::OperatorAttributeValue>{}(x.value) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(AttrConstant const &x) {
  std::ostringstream oss;
  oss << "<AttrConstant";
  oss << " value=" << x.value;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, AttrConstant const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
