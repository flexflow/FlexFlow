// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/output_graph/output_operator_attr_access.struct.toml
/* proj-data
{
  "generated_from": "e3b3a741183fcb38cfa68aacb82e12d1"
}
*/

#include "substitutions/output_graph/output_operator_attr_access.dtg.h"

#include "substitutions/operator_pattern/operator_attribute_expr.dtg.h"
#include "utils/graph.h"
#include <sstream>

namespace FlexFlow {
OutputOperatorAttrAccess::OutputOperatorAttrAccess(
    ::FlexFlow::Node const &node,
    ::FlexFlow::OperatorAttributeExpr const &attr_expr)
    : node(node), attr_expr(attr_expr) {}
bool OutputOperatorAttrAccess::operator==(
    OutputOperatorAttrAccess const &other) const {
  return std::tie(this->node, this->attr_expr) ==
         std::tie(other.node, other.attr_expr);
}
bool OutputOperatorAttrAccess::operator!=(
    OutputOperatorAttrAccess const &other) const {
  return std::tie(this->node, this->attr_expr) !=
         std::tie(other.node, other.attr_expr);
}
bool OutputOperatorAttrAccess::operator<(
    OutputOperatorAttrAccess const &other) const {
  return std::tie(this->node, this->attr_expr) <
         std::tie(other.node, other.attr_expr);
}
bool OutputOperatorAttrAccess::operator>(
    OutputOperatorAttrAccess const &other) const {
  return std::tie(this->node, this->attr_expr) >
         std::tie(other.node, other.attr_expr);
}
bool OutputOperatorAttrAccess::operator<=(
    OutputOperatorAttrAccess const &other) const {
  return std::tie(this->node, this->attr_expr) <=
         std::tie(other.node, other.attr_expr);
}
bool OutputOperatorAttrAccess::operator>=(
    OutputOperatorAttrAccess const &other) const {
  return std::tie(this->node, this->attr_expr) >=
         std::tie(other.node, other.attr_expr);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::OutputOperatorAttrAccess>::operator()(
    ::FlexFlow::OutputOperatorAttrAccess const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::Node>{}(x.node) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<::FlexFlow::OperatorAttributeExpr>{}(x.attr_expr) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(OutputOperatorAttrAccess const &x) {
  std::ostringstream oss;
  oss << "<OutputOperatorAttrAccess";
  oss << " node=" << x.node;
  oss << " attr_expr=" << x.attr_expr;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, OutputOperatorAttrAccess const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
