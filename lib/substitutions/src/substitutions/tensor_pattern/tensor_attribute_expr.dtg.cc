// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/tensor_pattern/tensor_attribute_expr.variant.toml
/* proj-data
{
  "generated_from": "b91285329f12f1b409805cbf9be575b2"
}
*/

#include "substitutions/tensor_pattern/tensor_attribute_expr.dtg.h"

#include "fmt/format.h"
#include <sstream>
#include <stdexcept>

namespace FlexFlow {
TensorAttributeExpr::TensorAttributeExpr(
    ::FlexFlow::TensorAttributeKey const &v)
    : raw_variant(v) {}
TensorAttributeExpr::TensorAttributeExpr(
    ::FlexFlow::TensorAttributeListSize const &v)
    : raw_variant(v) {}
TensorAttributeExpr::TensorAttributeExpr(
    ::FlexFlow::TensorAttributeListIndexAccess const &v)
    : raw_variant(v) {}
bool TensorAttributeExpr::operator==(TensorAttributeExpr const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool TensorAttributeExpr::operator!=(TensorAttributeExpr const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool TensorAttributeExpr::operator<(TensorAttributeExpr const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool TensorAttributeExpr::operator>(TensorAttributeExpr const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool TensorAttributeExpr::operator<=(TensorAttributeExpr const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool TensorAttributeExpr::operator>=(TensorAttributeExpr const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::TensorAttributeExpr>::operator()(
    ::FlexFlow::TensorAttributeExpr const &x) const {
  return std::hash<std::variant<::FlexFlow::TensorAttributeKey,
                                ::FlexFlow::TensorAttributeListSize,
                                ::FlexFlow::TensorAttributeListIndexAccess>>{}(
      x.raw_variant);
}
} // namespace std
namespace nlohmann {
::FlexFlow::TensorAttributeExpr
    adl_serializer<::FlexFlow::TensorAttributeExpr>::from_json(json const &j) {
  std::string key = j.at("type").template get<std::string>();
  if (key == "key") {
    return ::FlexFlow::TensorAttributeExpr{
        j.at("value").template get<::FlexFlow::TensorAttributeKey>()};
  } else if (key == "list_size") {
    return ::FlexFlow::TensorAttributeExpr{
        j.at("value").template get<::FlexFlow::TensorAttributeListSize>()};
  } else if (key == "list_idx") {
    return ::FlexFlow::TensorAttributeExpr{
        j.at("value")
            .template get<::FlexFlow::TensorAttributeListIndexAccess>()};
  } else {
    throw std::runtime_error(fmt::format("Unknown type key {}", key));
  }
}
void adl_serializer<::FlexFlow::TensorAttributeExpr>::to_json(
    json &j, ::FlexFlow::TensorAttributeExpr const &x) {
  j["__type"] = "TensorAttributeExpr";
  switch (x.index()) {
    case 0: {
      j["type"] = "key";
      j["value"] = x.get<::FlexFlow::TensorAttributeKey>();
      break;
    }
    case 1: {
      j["type"] = "list_size";
      j["value"] = x.get<::FlexFlow::TensorAttributeListSize>();
      break;
    }
    case 2: {
      j["type"] = "list_idx";
      j["value"] = x.get<::FlexFlow::TensorAttributeListIndexAccess>();
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type TensorAttributeExpr", x.index()));
    }
  }
}
} // namespace nlohmann
namespace FlexFlow {
std::string format_as(::FlexFlow::TensorAttributeExpr const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<TensorAttributeExpr key="
          << x.get<::FlexFlow::TensorAttributeKey>() << ">";
      break;
    }
    case 1: {
      oss << "<TensorAttributeExpr list_size="
          << x.get<::FlexFlow::TensorAttributeListSize>() << ">";
      break;
    }
    case 2: {
      oss << "<TensorAttributeExpr list_idx="
          << x.get<::FlexFlow::TensorAttributeListIndexAccess>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(fmt::format(
          "Unknown index {} for type TensorAttributeExpr", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::TensorAttributeExpr const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
