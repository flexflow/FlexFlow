// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/tensor_pattern/tensor_attribute_list_size.struct.toml
/* proj-data
{
  "generated_from": "ec72cd39de5d1c0f0478696d7b83e4e9"
}
*/

#include "substitutions/tensor_pattern/tensor_attribute_list_size.dtg.h"

#include "substitutions/tensor_pattern/tensor_attribute_key.dtg.h"
#include <sstream>

namespace FlexFlow {
TensorAttributeListSize::TensorAttributeListSize(
    ::FlexFlow::TensorAttributeKey const &attribute_key)
    : attribute_key(attribute_key) {}
bool TensorAttributeListSize::operator==(
    TensorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) == std::tie(other.attribute_key);
}
bool TensorAttributeListSize::operator!=(
    TensorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) != std::tie(other.attribute_key);
}
bool TensorAttributeListSize::operator<(
    TensorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) < std::tie(other.attribute_key);
}
bool TensorAttributeListSize::operator>(
    TensorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) > std::tie(other.attribute_key);
}
bool TensorAttributeListSize::operator<=(
    TensorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) <= std::tie(other.attribute_key);
}
bool TensorAttributeListSize::operator>=(
    TensorAttributeListSize const &other) const {
  return std::tie(this->attribute_key) >= std::tie(other.attribute_key);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::TensorAttributeListSize>::operator()(
    ::FlexFlow::TensorAttributeListSize const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::TensorAttributeKey>{}(x.attribute_key) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::TensorAttributeListSize
    adl_serializer<::FlexFlow::TensorAttributeListSize>::from_json(
        json const &j) {
  return ::FlexFlow::TensorAttributeListSize{
      j.at("attribute_key").template get<::FlexFlow::TensorAttributeKey>()};
}
void adl_serializer<::FlexFlow::TensorAttributeListSize>::to_json(
    json &j, ::FlexFlow::TensorAttributeListSize const &v) {
  j["__type"] = "TensorAttributeListSize";
  j["attribute_key"] = v.attribute_key;
}
} // namespace nlohmann

namespace rc {
Gen<::FlexFlow::TensorAttributeListSize>
    Arbitrary<::FlexFlow::TensorAttributeListSize>::arbitrary() {
  return gen::construct<::FlexFlow::TensorAttributeListSize>(
      gen::arbitrary<::FlexFlow::TensorAttributeKey>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(TensorAttributeListSize const &x) {
  std::ostringstream oss;
  oss << "<TensorAttributeListSize";
  oss << " attribute_key=" << x.attribute_key;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, TensorAttributeListSize const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
