// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/tensor_pattern/tensor_attribute_pattern.struct.toml
/* proj-data
{
  "generated_from": "42a51afce383f1ddc3d70827aa94a68f"
}
*/

#include "substitutions/tensor_pattern/tensor_attribute_pattern.dtg.h"

#include "substitutions/tensor_pattern/tensor_attribute_constraint.dtg.h"
#include "utils/hash-utils.h"
#include <sstream>
#include <unordered_set>

namespace FlexFlow {
TensorAttributePattern::TensorAttributePattern(
    std::unordered_set<::FlexFlow::TensorAttributeConstraint> const
        &attribute_constraints)
    : attribute_constraints(attribute_constraints) {}
bool TensorAttributePattern::operator==(
    TensorAttributePattern const &other) const {
  return std::tie(this->attribute_constraints) ==
         std::tie(other.attribute_constraints);
}
bool TensorAttributePattern::operator!=(
    TensorAttributePattern const &other) const {
  return std::tie(this->attribute_constraints) !=
         std::tie(other.attribute_constraints);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::TensorAttributePattern>::operator()(
    FlexFlow::TensorAttributePattern const &x) const {
  size_t result = 0;
  result ^=
      std::hash<std::unordered_set<::FlexFlow::TensorAttributeConstraint>>{}(
          x.attribute_constraints) +
      0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::TensorAttributePattern
    adl_serializer<FlexFlow::TensorAttributePattern>::from_json(json const &j) {
  return {j.at("attribute_constraints")
              .template get<
                  std::unordered_set<::FlexFlow::TensorAttributeConstraint>>()};
}
void adl_serializer<FlexFlow::TensorAttributePattern>::to_json(
    json &j, FlexFlow::TensorAttributePattern const &v) {
  j["__type"] = "TensorAttributePattern";
  j["attribute_constraints"] = v.attribute_constraints;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(TensorAttributePattern const &x) {
  std::ostringstream oss;
  oss << "<TensorAttributePattern";
  oss << " attribute_constraints=" << x.attribute_constraints;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, TensorAttributePattern const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
