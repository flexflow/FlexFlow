// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/operator_pattern/operator_attribute_list_access.struct.toml
/* proj-data
{
  "generated_from": "1dc90d1e823f05b82c1a5ff433fbf000"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_LIST_ACCESS_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_LIST_ACCESS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include "substitutions/operator_pattern/operator_attribute_key.dtg.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct OperatorAttributeListIndexAccess {
  OperatorAttributeListIndexAccess() = delete;
  OperatorAttributeListIndexAccess(
      ::FlexFlow::OperatorAttributeKey const &attribute_key, int const &index);

  bool operator==(OperatorAttributeListIndexAccess const &) const;
  bool operator!=(OperatorAttributeListIndexAccess const &) const;
  bool operator<(OperatorAttributeListIndexAccess const &) const;
  bool operator>(OperatorAttributeListIndexAccess const &) const;
  bool operator<=(OperatorAttributeListIndexAccess const &) const;
  bool operator>=(OperatorAttributeListIndexAccess const &) const;
  ::FlexFlow::OperatorAttributeKey attribute_key;
  int index;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::OperatorAttributeListIndexAccess> {
  size_t operator()(FlexFlow::OperatorAttributeListIndexAccess const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::OperatorAttributeListIndexAccess> {
  static FlexFlow::OperatorAttributeListIndexAccess from_json(json const &);
  static void to_json(json &,
                      FlexFlow::OperatorAttributeListIndexAccess const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::OperatorAttributeListIndexAccess> {
  static Gen<FlexFlow::OperatorAttributeListIndexAccess> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(OperatorAttributeListIndexAccess const &);
std::ostream &operator<<(std::ostream &,
                         OperatorAttributeListIndexAccess const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_LIST_ACCESS_DTG_H
