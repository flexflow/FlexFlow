// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/operator_pattern/operator_attribute_pattern.struct.toml
/* proj-data
{
  "generated_from": "968d7a3e93303a7fa7482bbcd50246b6"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_PATTERN_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_PATTERN_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "substitutions/operator_pattern/operator_attribute_constraint.dtg.h"
#include "utils/fmt.h"
#include <functional>
#include <ostream>
#include <tuple>
#include <unordered_set>

namespace FlexFlow {
struct OperatorAttributePattern {
  OperatorAttributePattern() = delete;
  explicit OperatorAttributePattern(
      std::unordered_set<::FlexFlow::OperatorAttributeConstraint> const
          &attribute_constraints);

  bool operator==(OperatorAttributePattern const &) const;
  bool operator!=(OperatorAttributePattern const &) const;
  std::unordered_set<::FlexFlow::OperatorAttributeConstraint>
      attribute_constraints;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::OperatorAttributePattern> {
  size_t operator()(::FlexFlow::OperatorAttributePattern const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::OperatorAttributePattern> {
  static ::FlexFlow::OperatorAttributePattern from_json(json const &);
  static void to_json(json &, ::FlexFlow::OperatorAttributePattern const &);
};
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(OperatorAttributePattern const &);
std::ostream &operator<<(std::ostream &, OperatorAttributePattern const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_PATTERN_DTG_H
