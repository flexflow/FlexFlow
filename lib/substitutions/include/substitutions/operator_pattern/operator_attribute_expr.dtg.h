// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/operator_pattern/operator_attribute_expr.variant.toml
/* proj-data
{
  "generated_from": "15d26dd1f08092ecc82b725aa9411597"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_EXPR_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_EXPR_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "substitutions/operator_pattern/operator_attribute_key.dtg.h"
#include "substitutions/operator_pattern/operator_attribute_list_access.dtg.h"
#include "substitutions/operator_pattern/operator_attribute_list_size.dtg.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct OperatorAttributeExpr {
  OperatorAttributeExpr() = delete;
  explicit OperatorAttributeExpr(::FlexFlow::OperatorAttributeKey const &);
  explicit OperatorAttributeExpr(::FlexFlow::OperatorAttributeListSize const &);
  explicit OperatorAttributeExpr(
      ::FlexFlow::OperatorAttributeListIndexAccess const &);
  template <typename T>
  static constexpr bool IsPartOfOperatorAttributeExpr_v =
      std::is_same_v<T, ::FlexFlow::OperatorAttributeKey> ||
      std::is_same_v<T, ::FlexFlow::OperatorAttributeListSize> ||
      std::is_same_v<T, ::FlexFlow::OperatorAttributeListIndexAccess>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::OperatorAttributeKey>());
        return result;
      }
      case 1: {
        ReturnType result =
            v(this->get<::FlexFlow::OperatorAttributeListSize>());
        return result;
      }
      case 2: {
        ReturnType result =
            v(this->get<::FlexFlow::OperatorAttributeListIndexAccess>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type OperatorAttributeExpr", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::OperatorAttributeKey>());
        return result;
      }
      case 1: {
        ReturnType result =
            v(this->get<::FlexFlow::OperatorAttributeListSize>());
        return result;
      }
      case 2: {
        ReturnType result =
            v(this->get<::FlexFlow::OperatorAttributeListIndexAccess>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type OperatorAttributeExpr", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(IsPartOfOperatorAttributeExpr_v<T>,
                  "OperatorAttributeExpr::has() expected one of "
                  "[::FlexFlow::OperatorAttributeKey, "
                  "::FlexFlow::OperatorAttributeListSize, "
                  "::FlexFlow::OperatorAttributeListIndexAccess], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(IsPartOfOperatorAttributeExpr_v<T>,
                  "OperatorAttributeExpr::get() expected one of "
                  "[::FlexFlow::OperatorAttributeKey, "
                  "::FlexFlow::OperatorAttributeListSize, "
                  "::FlexFlow::OperatorAttributeListIndexAccess], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(IsPartOfOperatorAttributeExpr_v<T>,
                  "OperatorAttributeExpr::get() expected one of "
                  "[::FlexFlow::OperatorAttributeKey, "
                  "::FlexFlow::OperatorAttributeListSize, "
                  "::FlexFlow::OperatorAttributeListIndexAccess], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(OperatorAttributeExpr const &) const;
  bool operator!=(OperatorAttributeExpr const &) const;
  bool operator<(OperatorAttributeExpr const &) const;
  bool operator>(OperatorAttributeExpr const &) const;
  bool operator<=(OperatorAttributeExpr const &) const;
  bool operator>=(OperatorAttributeExpr const &) const;
  std::variant<::FlexFlow::OperatorAttributeKey,
               ::FlexFlow::OperatorAttributeListSize,
               ::FlexFlow::OperatorAttributeListIndexAccess>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::OperatorAttributeExpr> {
  size_t operator()(::FlexFlow::OperatorAttributeExpr const &) const;
};
} // namespace std
namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::OperatorAttributeExpr> {
  static ::FlexFlow::OperatorAttributeExpr from_json(json const &);
  static void to_json(json &, ::FlexFlow::OperatorAttributeExpr const &);
};
} // namespace nlohmann
namespace FlexFlow {
std::string format_as(::FlexFlow::OperatorAttributeExpr const &);
std::ostream &operator<<(std::ostream &,
                         ::FlexFlow::OperatorAttributeExpr const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_OPERATOR_PATTERN_OPERATOR_ATTRIBUTE_EXPR_DTG_H
