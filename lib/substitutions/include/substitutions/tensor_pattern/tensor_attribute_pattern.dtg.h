// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/tensor_pattern/tensor_attribute_pattern.struct.toml
/* proj-data
{
  "generated_from": "42a51afce383f1ddc3d70827aa94a68f"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_PATTERN_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_PATTERN_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "substitutions/tensor_pattern/tensor_attribute_constraint.dtg.h"
#include "utils/hash-utils.h"
#include <functional>
#include <ostream>
#include <tuple>
#include <unordered_set>

namespace FlexFlow {
struct TensorAttributePattern {
  TensorAttributePattern() = delete;
  explicit TensorAttributePattern(
      std::unordered_set<::FlexFlow::TensorAttributeConstraint> const
          &attribute_constraints);

  bool operator==(TensorAttributePattern const &) const;
  bool operator!=(TensorAttributePattern const &) const;
  std::unordered_set<::FlexFlow::TensorAttributeConstraint>
      attribute_constraints;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::TensorAttributePattern> {
  size_t operator()(::FlexFlow::TensorAttributePattern const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::TensorAttributePattern> {
  static ::FlexFlow::TensorAttributePattern from_json(json const &);
  static void to_json(json &, ::FlexFlow::TensorAttributePattern const &);
};
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(TensorAttributePattern const &);
std::ostream &operator<<(std::ostream &, TensorAttributePattern const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_PATTERN_DTG_H
