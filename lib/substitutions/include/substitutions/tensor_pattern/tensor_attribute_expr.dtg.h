// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/tensor_pattern/tensor_attribute_expr.variant.toml
/* proj-data
{
  "generated_from": "b91285329f12f1b409805cbf9be575b2"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_EXPR_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_EXPR_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "substitutions/tensor_pattern/tensor_attribute_key.dtg.h"
#include "substitutions/tensor_pattern/tensor_attribute_list_access.dtg.h"
#include "substitutions/tensor_pattern/tensor_attribute_list_size.dtg.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct TensorAttributeExpr {
  TensorAttributeExpr() = delete;
  explicit TensorAttributeExpr(::FlexFlow::TensorAttributeKey const &);
  explicit TensorAttributeExpr(::FlexFlow::TensorAttributeListSize const &);
  explicit TensorAttributeExpr(
      ::FlexFlow::TensorAttributeListIndexAccess const &);
  template <typename T>
  static constexpr bool IsPartOfTensorAttributeExpr_v =
      std::is_same_v<T, ::FlexFlow::TensorAttributeKey> ||
      std::is_same_v<T, ::FlexFlow::TensorAttributeListSize> ||
      std::is_same_v<T, ::FlexFlow::TensorAttributeListIndexAccess>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::TensorAttributeKey>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::TensorAttributeListSize>());
        return result;
      }
      case 2: {
        ReturnType result =
            v(this->get<::FlexFlow::TensorAttributeListIndexAccess>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type TensorAttributeExpr", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::TensorAttributeKey>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::TensorAttributeListSize>());
        return result;
      }
      case 2: {
        ReturnType result =
            v(this->get<::FlexFlow::TensorAttributeListIndexAccess>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type TensorAttributeExpr", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(
        IsPartOfTensorAttributeExpr_v<T>,
        "TensorAttributeExpr::has() expected one of "
        "[::FlexFlow::TensorAttributeKey, ::FlexFlow::TensorAttributeListSize, "
        "::FlexFlow::TensorAttributeListIndexAccess], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(
        IsPartOfTensorAttributeExpr_v<T>,
        "TensorAttributeExpr::get() expected one of "
        "[::FlexFlow::TensorAttributeKey, ::FlexFlow::TensorAttributeListSize, "
        "::FlexFlow::TensorAttributeListIndexAccess], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(
        IsPartOfTensorAttributeExpr_v<T>,
        "TensorAttributeExpr::get() expected one of "
        "[::FlexFlow::TensorAttributeKey, ::FlexFlow::TensorAttributeListSize, "
        "::FlexFlow::TensorAttributeListIndexAccess], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(TensorAttributeExpr const &) const;
  bool operator!=(TensorAttributeExpr const &) const;
  bool operator<(TensorAttributeExpr const &) const;
  bool operator>(TensorAttributeExpr const &) const;
  bool operator<=(TensorAttributeExpr const &) const;
  bool operator>=(TensorAttributeExpr const &) const;
  std::variant<::FlexFlow::TensorAttributeKey,
               ::FlexFlow::TensorAttributeListSize,
               ::FlexFlow::TensorAttributeListIndexAccess>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::TensorAttributeExpr> {
  size_t operator()(::FlexFlow::TensorAttributeExpr const &) const;
};
} // namespace std
namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::TensorAttributeExpr> {
  static ::FlexFlow::TensorAttributeExpr from_json(json const &);
  static void to_json(json &, ::FlexFlow::TensorAttributeExpr const &);
};
} // namespace nlohmann
namespace FlexFlow {
std::string format_as(::FlexFlow::TensorAttributeExpr const &);
std::ostream &operator<<(std::ostream &,
                         ::FlexFlow::TensorAttributeExpr const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_EXPR_DTG_H
