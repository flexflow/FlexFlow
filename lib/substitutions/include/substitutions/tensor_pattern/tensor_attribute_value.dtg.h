// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitutions/include/substitutions/tensor_pattern/tensor_attribute_value.variant.toml
/* proj-data
{
  "generated_from": "d80cf2e618d64df284c2647430a12a86"
}
*/

#ifndef _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_VALUE_DTG_H
#define _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_VALUE_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "utils/fmt.h"
#include "utils/hash-utils-core.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>
#include <vector>

namespace FlexFlow {
struct TensorAttributeValue {
  TensorAttributeValue() = delete;
  explicit TensorAttributeValue(size_t const &);
  explicit TensorAttributeValue(std::vector<size_t> const &);
  template <typename T>
  static constexpr bool IsPartOfTensorAttributeValue_v =
      std::is_same_v<T, size_t> || std::is_same_v<T, std::vector<size_t>>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<size_t>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<std::vector<size_t>>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type TensorAttributeValue", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<size_t>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<std::vector<size_t>>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type TensorAttributeValue", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(IsPartOfTensorAttributeValue_v<T>,
                  "TensorAttributeValue::has() expected one of [size_t, "
                  "std::vector<size_t>], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(IsPartOfTensorAttributeValue_v<T>,
                  "TensorAttributeValue::get() expected one of [size_t, "
                  "std::vector<size_t>], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(IsPartOfTensorAttributeValue_v<T>,
                  "TensorAttributeValue::get() expected one of [size_t, "
                  "std::vector<size_t>], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(TensorAttributeValue const &) const;
  bool operator!=(TensorAttributeValue const &) const;
  bool operator<(TensorAttributeValue const &) const;
  bool operator>(TensorAttributeValue const &) const;
  bool operator<=(TensorAttributeValue const &) const;
  bool operator>=(TensorAttributeValue const &) const;
  std::variant<size_t, std::vector<size_t>> raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::TensorAttributeValue> {
  size_t operator()(::FlexFlow::TensorAttributeValue const &) const;
};
} // namespace std
namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::TensorAttributeValue> {
  static ::FlexFlow::TensorAttributeValue from_json(json const &);
  static void to_json(json &, ::FlexFlow::TensorAttributeValue const &);
};
} // namespace nlohmann
namespace FlexFlow {
std::string format_as(::FlexFlow::TensorAttributeValue const &);
std::ostream &operator<<(std::ostream &,
                         ::FlexFlow::TensorAttributeValue const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_SUBSTITUTIONS_INCLUDE_SUBSTITUTIONS_TENSOR_PATTERN_TENSOR_ATTRIBUTE_VALUE_DTG_H
