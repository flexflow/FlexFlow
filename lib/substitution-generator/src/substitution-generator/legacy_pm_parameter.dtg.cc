// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitution-generator/include/substitution-generator/legacy_pm_parameter.enum.toml
/* proj-data
{
  "generated_from": "e8dda0047c91e576878b86df2fec0b6b"
}
*/

#include "substitution-generator/legacy_pm_parameter.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::LegacyPMParameter>::operator()(
    FlexFlow::LegacyPMParameter x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(LegacyPMParameter x) {
  switch (x) {
    case LegacyPMParameter::OP_TYPE:
      return "OP_TYPE";
    case LegacyPMParameter::NUM_INPUTS:
      return "NUM_INPUTS";
    case LegacyPMParameter::NUM_OUTPUTS:
      return "NUM_OUTPUTS";
    case LegacyPMParameter::GROUP:
      return "GROUP";
    case LegacyPMParameter::KERNEL_H:
      return "KERNEL_H";
    case LegacyPMParameter::KERNEL_W:
      return "KERNEL_W";
    case LegacyPMParameter::STRIDE_H:
      return "STRIDE_H";
    case LegacyPMParameter::STRIDE_W:
      return "STRIDE_W";
    case LegacyPMParameter::PADDING_H:
      return "PADDING_H";
    case LegacyPMParameter::PADDING_W:
      return "PADDING_W";
    case LegacyPMParameter::ACTI:
      return "ACTI";
    case LegacyPMParameter::NUMDIM:
      return "NUMDIM";
    case LegacyPMParameter::AXIS:
      return "AXIS";
    case LegacyPMParameter::PERM:
      return "PERM";
    case LegacyPMParameter::OUTSHUFFLE:
      return "OUTSHUFFLE";
    case LegacyPMParameter::MERGE_GCONV_COUNT:
      return "MERGE_GCONV_COUNT";
    case LegacyPMParameter::AXES:
      return "AXES";
    case LegacyPMParameter::KEEP_DIMS:
      return "KEEP_DIMS";
    case LegacyPMParameter::EPSILON:
      return "EPSILON";
    case LegacyPMParameter::REPARTITION_DIM:
      return "REPARTITION_DIM";
    case LegacyPMParameter::REPARTITION_DEGREE:
      return "REPARTITION_DEGREE";
    case LegacyPMParameter::REPLICATE_DIM:
      return "REPLICATE_DIM";
    case LegacyPMParameter::REPLICATE_DEGREE:
      return "REPLICATE_DEGREE";
    case LegacyPMParameter::COMBINE_DIM:
      return "COMBINE_DIM";
    case LegacyPMParameter::COMBINE_DEGREE:
      return "COMBINE_DEGREE";
    case LegacyPMParameter::REDUCTION_DIM:
      return "REDUCTION_DIM";
    case LegacyPMParameter::REDUCTION_DEGREE:
      return "REDUCTION_DEGREE";
    case LegacyPMParameter::SOFTMAX_DIM:
      return "SOFTMAX_DIM";
    case LegacyPMParameter::NUM_HEADS:
      return "NUM_HEADS";
    case LegacyPMParameter::PARALLEL_DIM:
      return "PARALLEL_DIM";
    case LegacyPMParameter::PARALLEL_DEGREE:
      return "PARALLEL_DEGREE";
    case LegacyPMParameter::PAD:
      return "PAD";
    default:
      std::ostringstream oss;
      oss << "Unknown LegacyPMParameter value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, LegacyPMParameter x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, LegacyPMParameter x) {
  switch (x) {
    case LegacyPMParameter::OP_TYPE:
      j = "PM_OP_TYPE";
      break;
    case LegacyPMParameter::NUM_INPUTS:
      j = "PM_NUM_INPUTS";
      break;
    case LegacyPMParameter::NUM_OUTPUTS:
      j = "PM_NUM_OUTPUTS";
      break;
    case LegacyPMParameter::GROUP:
      j = "PM_GROUP";
      break;
    case LegacyPMParameter::KERNEL_H:
      j = "PM_KERNEL_H";
      break;
    case LegacyPMParameter::KERNEL_W:
      j = "PM_KERNEL_W";
      break;
    case LegacyPMParameter::STRIDE_H:
      j = "PM_STRIDE_H";
      break;
    case LegacyPMParameter::STRIDE_W:
      j = "PM_STRIDE_W";
      break;
    case LegacyPMParameter::PADDING_H:
      j = "PM_PADDING_H";
      break;
    case LegacyPMParameter::PADDING_W:
      j = "PM_PADDING_W";
      break;
    case LegacyPMParameter::ACTI:
      j = "PM_ACTI";
      break;
    case LegacyPMParameter::NUMDIM:
      j = "PM_NUMDIM";
      break;
    case LegacyPMParameter::AXIS:
      j = "PM_AXIS";
      break;
    case LegacyPMParameter::PERM:
      j = "PM_PERM";
      break;
    case LegacyPMParameter::OUTSHUFFLE:
      j = "PM_OUTSHUFFLE";
      break;
    case LegacyPMParameter::MERGE_GCONV_COUNT:
      j = "PM_MERGE_GCONV_COUNT";
      break;
    case LegacyPMParameter::AXES:
      j = "PM_AXES";
      break;
    case LegacyPMParameter::KEEP_DIMS:
      j = "PM_KEEP_DIMS";
      break;
    case LegacyPMParameter::EPSILON:
      j = "PM_EPSILON";
      break;
    case LegacyPMParameter::REPARTITION_DIM:
      j = "PM_REPARTITION_DIM";
      break;
    case LegacyPMParameter::REPARTITION_DEGREE:
      j = "PM_REPARTITION_DEGREE";
      break;
    case LegacyPMParameter::REPLICATE_DIM:
      j = "PM_REPLICATE_DIM";
      break;
    case LegacyPMParameter::REPLICATE_DEGREE:
      j = "PM_REPLICATE_DEGREE";
      break;
    case LegacyPMParameter::COMBINE_DIM:
      j = "PM_COMBINE_DIM";
      break;
    case LegacyPMParameter::COMBINE_DEGREE:
      j = "PM_COMBINE_DEGREE";
      break;
    case LegacyPMParameter::REDUCTION_DIM:
      j = "PM_REDUCTION_DIM";
      break;
    case LegacyPMParameter::REDUCTION_DEGREE:
      j = "PM_REDUCTION_DEGREE";
      break;
    case LegacyPMParameter::SOFTMAX_DIM:
      j = "PM_SOFTMAX_DIM";
      break;
    case LegacyPMParameter::NUM_HEADS:
      j = "PM_NUM_HEADS";
      break;
    case LegacyPMParameter::PARALLEL_DIM:
      j = "PM_PARALLEL_DIM";
      break;
    case LegacyPMParameter::PARALLEL_DEGREE:
      j = "PM_PARALLEL_DEGREE";
      break;
    case LegacyPMParameter::PAD:
      j = "PM_PAD";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown LegacyPMParameter value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, LegacyPMParameter &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "PM_OP_TYPE") {
    x = LegacyPMParameter::OP_TYPE;
  } else if (as_str == "PM_NUM_INPUTS") {
    x = LegacyPMParameter::NUM_INPUTS;
  } else if (as_str == "PM_NUM_OUTPUTS") {
    x = LegacyPMParameter::NUM_OUTPUTS;
  } else if (as_str == "PM_GROUP") {
    x = LegacyPMParameter::GROUP;
  } else if (as_str == "PM_KERNEL_H") {
    x = LegacyPMParameter::KERNEL_H;
  } else if (as_str == "PM_KERNEL_W") {
    x = LegacyPMParameter::KERNEL_W;
  } else if (as_str == "PM_STRIDE_H") {
    x = LegacyPMParameter::STRIDE_H;
  } else if (as_str == "PM_STRIDE_W") {
    x = LegacyPMParameter::STRIDE_W;
  } else if (as_str == "PM_PADDING_H") {
    x = LegacyPMParameter::PADDING_H;
  } else if (as_str == "PM_PADDING_W") {
    x = LegacyPMParameter::PADDING_W;
  } else if (as_str == "PM_ACTI") {
    x = LegacyPMParameter::ACTI;
  } else if (as_str == "PM_NUMDIM") {
    x = LegacyPMParameter::NUMDIM;
  } else if (as_str == "PM_AXIS") {
    x = LegacyPMParameter::AXIS;
  } else if (as_str == "PM_PERM") {
    x = LegacyPMParameter::PERM;
  } else if (as_str == "PM_OUTSHUFFLE") {
    x = LegacyPMParameter::OUTSHUFFLE;
  } else if (as_str == "PM_MERGE_GCONV_COUNT") {
    x = LegacyPMParameter::MERGE_GCONV_COUNT;
  } else if (as_str == "PM_AXES") {
    x = LegacyPMParameter::AXES;
  } else if (as_str == "PM_KEEP_DIMS") {
    x = LegacyPMParameter::KEEP_DIMS;
  } else if (as_str == "PM_EPSILON") {
    x = LegacyPMParameter::EPSILON;
  } else if (as_str == "PM_REPARTITION_DIM") {
    x = LegacyPMParameter::REPARTITION_DIM;
  } else if (as_str == "PM_REPARTITION_DEGREE") {
    x = LegacyPMParameter::REPARTITION_DEGREE;
  } else if (as_str == "PM_REPLICATE_DIM") {
    x = LegacyPMParameter::REPLICATE_DIM;
  } else if (as_str == "PM_REPLICATE_DEGREE") {
    x = LegacyPMParameter::REPLICATE_DEGREE;
  } else if (as_str == "PM_COMBINE_DIM") {
    x = LegacyPMParameter::COMBINE_DIM;
  } else if (as_str == "PM_COMBINE_DEGREE") {
    x = LegacyPMParameter::COMBINE_DEGREE;
  } else if (as_str == "PM_REDUCTION_DIM") {
    x = LegacyPMParameter::REDUCTION_DIM;
  } else if (as_str == "PM_REDUCTION_DEGREE") {
    x = LegacyPMParameter::REDUCTION_DEGREE;
  } else if (as_str == "PM_SOFTMAX_DIM") {
    x = LegacyPMParameter::SOFTMAX_DIM;
  } else if (as_str == "PM_NUM_HEADS") {
    x = LegacyPMParameter::NUM_HEADS;
  } else if (as_str == "PM_PARALLEL_DIM") {
    x = LegacyPMParameter::PARALLEL_DIM;
  } else if (as_str == "PM_PARALLEL_DEGREE") {
    x = LegacyPMParameter::PARALLEL_DEGREE;
  } else if (as_str == "PM_PAD") {
    x = LegacyPMParameter::PAD;
  } else {
    std::ostringstream oss;
    oss << "Unknown LegacyPMParameter value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::LegacyPMParameter>
    Arbitrary<FlexFlow::LegacyPMParameter>::arbitrary() {
  return gen::element<FlexFlow::LegacyPMParameter>(
      FlexFlow::LegacyPMParameter::OP_TYPE,
      FlexFlow::LegacyPMParameter::NUM_INPUTS,
      FlexFlow::LegacyPMParameter::NUM_OUTPUTS,
      FlexFlow::LegacyPMParameter::GROUP,
      FlexFlow::LegacyPMParameter::KERNEL_H,
      FlexFlow::LegacyPMParameter::KERNEL_W,
      FlexFlow::LegacyPMParameter::STRIDE_H,
      FlexFlow::LegacyPMParameter::STRIDE_W,
      FlexFlow::LegacyPMParameter::PADDING_H,
      FlexFlow::LegacyPMParameter::PADDING_W,
      FlexFlow::LegacyPMParameter::ACTI,
      FlexFlow::LegacyPMParameter::NUMDIM,
      FlexFlow::LegacyPMParameter::AXIS,
      FlexFlow::LegacyPMParameter::PERM,
      FlexFlow::LegacyPMParameter::OUTSHUFFLE,
      FlexFlow::LegacyPMParameter::MERGE_GCONV_COUNT,
      FlexFlow::LegacyPMParameter::AXES,
      FlexFlow::LegacyPMParameter::KEEP_DIMS,
      FlexFlow::LegacyPMParameter::EPSILON,
      FlexFlow::LegacyPMParameter::REPARTITION_DIM,
      FlexFlow::LegacyPMParameter::REPARTITION_DEGREE,
      FlexFlow::LegacyPMParameter::REPLICATE_DIM,
      FlexFlow::LegacyPMParameter::REPLICATE_DEGREE,
      FlexFlow::LegacyPMParameter::COMBINE_DIM,
      FlexFlow::LegacyPMParameter::COMBINE_DEGREE,
      FlexFlow::LegacyPMParameter::REDUCTION_DIM,
      FlexFlow::LegacyPMParameter::REDUCTION_DEGREE,
      FlexFlow::LegacyPMParameter::SOFTMAX_DIM,
      FlexFlow::LegacyPMParameter::NUM_HEADS,
      FlexFlow::LegacyPMParameter::PARALLEL_DIM,
      FlexFlow::LegacyPMParameter::PARALLEL_DEGREE,
      FlexFlow::LegacyPMParameter::PAD);
}
} // namespace rc
