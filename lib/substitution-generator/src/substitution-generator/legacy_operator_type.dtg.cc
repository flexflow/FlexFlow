// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/substitution-generator/include/substitution-generator/legacy_operator_type.enum.toml
/* proj-data
{
  "generated_from": "d6ba52e2b0d58b7cb533dae3894b0486"
}
*/

#include "substitution-generator/legacy_operator_type.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::LegacyOperatorType>::operator()(
    FlexFlow::LegacyOperatorType x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(LegacyOperatorType x) {
  switch (x) {
    case LegacyOperatorType::NOOP:
      return "NOOP";
    case LegacyOperatorType::INPUT:
      return "INPUT";
    case LegacyOperatorType::WEIGHT:
      return "WEIGHT";
    case LegacyOperatorType::CONV2D:
      return "CONV2D";
    case LegacyOperatorType::DROPOUT:
      return "DROPOUT";
    case LegacyOperatorType::LINEAR:
      return "LINEAR";
    case LegacyOperatorType::BATCHMATMUL:
      return "BATCHMATMUL";
    case LegacyOperatorType::POOL2D:
      return "POOL2D";
    case LegacyOperatorType::SCALAR_MULTIPLY:
      return "SCALAR_MULTIPLY";
    case LegacyOperatorType::SCALAR_ADD:
      return "SCALAR_ADD";
    case LegacyOperatorType::SCALAR_FLOOR_DIV:
      return "SCALAR_FLOOR_DIV";
    case LegacyOperatorType::SCALAR_TRUE_DIV:
      return "SCALAR_TRUE_DIV";
    case LegacyOperatorType::SCALAR_SUB:
      return "SCALAR_SUB";
    case LegacyOperatorType::RELU:
      return "RELU";
    case LegacyOperatorType::IDENTITY:
      return "IDENTITY";
    case LegacyOperatorType::SIGMOID:
      return "SIGMOID";
    case LegacyOperatorType::TANH:
      return "TANH";
    case LegacyOperatorType::ELU:
      return "ELU";
    case LegacyOperatorType::FLAT:
      return "FLAT";
    case LegacyOperatorType::SOFTMAX:
      return "SOFTMAX";
    case LegacyOperatorType::BATCHNORM:
      return "BATCHNORM";
    case LegacyOperatorType::CONCAT:
      return "CONCAT";
    case LegacyOperatorType::SPLIT:
      return "SPLIT";
    case LegacyOperatorType::EMBEDDING:
      return "EMBEDDING";
    case LegacyOperatorType::CACHE:
      return "CACHE";
    case LegacyOperatorType::RESHAPE:
      return "RESHAPE";
    case LegacyOperatorType::REVERSE:
      return "REVERSE";
    case LegacyOperatorType::TRANSPOSE:
      return "TRANSPOSE";
    case LegacyOperatorType::EW_ADD:
      return "EW_ADD";
    case LegacyOperatorType::EW_MUL:
      return "EW_MUL";
    case LegacyOperatorType::MATMUL:
      return "MATMUL";
    case LegacyOperatorType::MUL:
      return "MUL";
    case LegacyOperatorType::ENLARGE:
      return "ENLARGE";
    case LegacyOperatorType::SQUEEZE:
      return "SQUEEZE";
    case LegacyOperatorType::UNSQUEEZE:
      return "UNSQUEEZE";
    case LegacyOperatorType::EW_SUB:
      return "EW_SUB";
    case LegacyOperatorType::EW_DIV:
      return "EW_DIV";
    case LegacyOperatorType::EW_EQUAL:
      return "EW_EQUAL";
    case LegacyOperatorType::EW_GREATER:
      return "EW_GREATER";
    case LegacyOperatorType::EW_LESS:
      return "EW_LESS";
    case LegacyOperatorType::EW_MAX:
      return "EW_MAX";
    case LegacyOperatorType::EW_MIN:
      return "EW_MIN";
    case LegacyOperatorType::REDUCE_ARGMAX:
      return "REDUCE_ARGMAX";
    case LegacyOperatorType::REDUCE_ARGMIN:
      return "REDUCE_ARGMIN";
    case LegacyOperatorType::REDUCE_MAX:
      return "REDUCE_MAX";
    case LegacyOperatorType::REDUCE_MEAN:
      return "REDUCE_MEAN";
    case LegacyOperatorType::REDUCE_MIN:
      return "REDUCE_MIN";
    case LegacyOperatorType::REDUCE_PROD:
      return "REDUCE_PROD";
    case LegacyOperatorType::REDUCE_SUM:
      return "REDUCE_SUM";
    case LegacyOperatorType::PAD:
      return "PAD";
    case LegacyOperatorType::SHAPE:
      return "SHAPE";
    case LegacyOperatorType::SIZE:
      return "SIZE";
    case LegacyOperatorType::TOPK:
      return "TOPK";
    case LegacyOperatorType::WHERE:
      return "WHERE";
    case LegacyOperatorType::CEIL:
      return "CEIL";
    case LegacyOperatorType::CAST:
      return "CAST";
    case LegacyOperatorType::EXP:
      return "EXP";
    case LegacyOperatorType::ROUND:
      return "ROUND";
    case LegacyOperatorType::LOG:
      return "LOG";
    case LegacyOperatorType::LOGICAL_NOT:
      return "LOGICAL_NOT";
    case LegacyOperatorType::SQRT:
      return "SQRT";
    case LegacyOperatorType::SIN:
      return "SIN";
    case LegacyOperatorType::COS:
      return "COS";
    case LegacyOperatorType::LEAKYRELU:
      return "LEAKYRELU";
    case LegacyOperatorType::SLICE:
      return "SLICE";
    case LegacyOperatorType::RESIZE:
      return "RESIZE";
    case LegacyOperatorType::PRELU:
      return "PRELU";
    case LegacyOperatorType::GELU:
      return "GELU";
    case LegacyOperatorType::MULTIHEAD_ATTENTION:
      return "MULTIHEAD_ATTENTION";
    case LegacyOperatorType::FUSED:
      return "FUSED";
    case LegacyOperatorType::RSQRT:
      return "RSQRT";
    case LegacyOperatorType::POW:
      return "POW";
    case LegacyOperatorType::MEAN:
      return "MEAN";
    case LegacyOperatorType::LAYERNORM:
      return "LAYERNORM";
    case LegacyOperatorType::GATHER:
      return "GATHER";
    case LegacyOperatorType::BROADCAST:
      return "BROADCAST";
    case LegacyOperatorType::REPARTITION:
      return "REPARTITION";
    case LegacyOperatorType::COMBINE:
      return "COMBINE";
    case LegacyOperatorType::REPLICATE:
      return "REPLICATE";
    case LegacyOperatorType::REDUCTION:
      return "REDUCTION";
    case LegacyOperatorType::BATCH:
      return "BATCH";
    case LegacyOperatorType::PIPELINE:
      return "PIPELINE";
    case LegacyOperatorType::FUSED_PARALLEL:
      return "FUSED_PARALLEL";
    default:
      std::ostringstream oss;
      oss << "Unknown LegacyOperatorType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, LegacyOperatorType x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, LegacyOperatorType x) {
  switch (x) {
    case LegacyOperatorType::NOOP:
      j = "OP_NOOP";
      break;
    case LegacyOperatorType::INPUT:
      j = "OP_INPUT";
      break;
    case LegacyOperatorType::WEIGHT:
      j = "OP_WEIGHT";
      break;
    case LegacyOperatorType::CONV2D:
      j = "OP_CONV2D";
      break;
    case LegacyOperatorType::DROPOUT:
      j = "OP_DROPOUT";
      break;
    case LegacyOperatorType::LINEAR:
      j = "OP_LINEAR";
      break;
    case LegacyOperatorType::BATCHMATMUL:
      j = "OP_BATCHMATMUL";
      break;
    case LegacyOperatorType::POOL2D:
      j = "OP_POOL2D";
      break;
    case LegacyOperatorType::SCALAR_MULTIPLY:
      j = "OP_SCALAR_MULTIPLY";
      break;
    case LegacyOperatorType::SCALAR_ADD:
      j = "OP_SCALAR_ADD";
      break;
    case LegacyOperatorType::SCALAR_FLOOR_DIV:
      j = "OP_SCALAR_FLOOR_DIV";
      break;
    case LegacyOperatorType::SCALAR_TRUE_DIV:
      j = "OP_SCALAR_TRUE_DIV";
      break;
    case LegacyOperatorType::SCALAR_SUB:
      j = "OP_SCALAR_SUB";
      break;
    case LegacyOperatorType::RELU:
      j = "OP_RELU";
      break;
    case LegacyOperatorType::IDENTITY:
      j = "OP_IDENTITY";
      break;
    case LegacyOperatorType::SIGMOID:
      j = "OP_SIGMOID";
      break;
    case LegacyOperatorType::TANH:
      j = "OP_TANH";
      break;
    case LegacyOperatorType::ELU:
      j = "OP_ELU";
      break;
    case LegacyOperatorType::FLAT:
      j = "OP_FLAT";
      break;
    case LegacyOperatorType::SOFTMAX:
      j = "OP_SOFTMAX";
      break;
    case LegacyOperatorType::BATCHNORM:
      j = "OP_BATCHNORM";
      break;
    case LegacyOperatorType::CONCAT:
      j = "OP_CONCAT";
      break;
    case LegacyOperatorType::SPLIT:
      j = "OP_SPLIT";
      break;
    case LegacyOperatorType::EMBEDDING:
      j = "OP_EMBEDDING";
      break;
    case LegacyOperatorType::CACHE:
      j = "OP_CACHE";
      break;
    case LegacyOperatorType::RESHAPE:
      j = "OP_RESHAPE";
      break;
    case LegacyOperatorType::REVERSE:
      j = "OP_REVERSE";
      break;
    case LegacyOperatorType::TRANSPOSE:
      j = "OP_TRANSPOSE";
      break;
    case LegacyOperatorType::EW_ADD:
      j = "OP_EW_ADD";
      break;
    case LegacyOperatorType::EW_MUL:
      j = "OP_EW_MUL";
      break;
    case LegacyOperatorType::MATMUL:
      j = "OP_MATMUL";
      break;
    case LegacyOperatorType::MUL:
      j = "OP_MUL";
      break;
    case LegacyOperatorType::ENLARGE:
      j = "OP_ENLARGE";
      break;
    case LegacyOperatorType::SQUEEZE:
      j = "OP_SQUEEZE";
      break;
    case LegacyOperatorType::UNSQUEEZE:
      j = "OP_UNSQUEEZE";
      break;
    case LegacyOperatorType::EW_SUB:
      j = "OP_EW_SUB";
      break;
    case LegacyOperatorType::EW_DIV:
      j = "OP_EW_DIV";
      break;
    case LegacyOperatorType::EW_EQUAL:
      j = "OP_EW_EQUAL";
      break;
    case LegacyOperatorType::EW_GREATER:
      j = "OP_EW_GREATER";
      break;
    case LegacyOperatorType::EW_LESS:
      j = "OP_EW_LESS";
      break;
    case LegacyOperatorType::EW_MAX:
      j = "OP_EW_MAX";
      break;
    case LegacyOperatorType::EW_MIN:
      j = "OP_EW_MIN";
      break;
    case LegacyOperatorType::REDUCE_ARGMAX:
      j = "OP_REDUCE_ARGMAX";
      break;
    case LegacyOperatorType::REDUCE_ARGMIN:
      j = "OP_REDUCE_ARGMIN";
      break;
    case LegacyOperatorType::REDUCE_MAX:
      j = "OP_REDUCE_MAX";
      break;
    case LegacyOperatorType::REDUCE_MEAN:
      j = "OP_REDUCE_MEAN";
      break;
    case LegacyOperatorType::REDUCE_MIN:
      j = "OP_REDUCE_MIN";
      break;
    case LegacyOperatorType::REDUCE_PROD:
      j = "OP_REDUCE_PROD";
      break;
    case LegacyOperatorType::REDUCE_SUM:
      j = "OP_REDUCE_SUM";
      break;
    case LegacyOperatorType::PAD:
      j = "OP_PAD";
      break;
    case LegacyOperatorType::SHAPE:
      j = "OP_SHAPE";
      break;
    case LegacyOperatorType::SIZE:
      j = "OP_SIZE";
      break;
    case LegacyOperatorType::TOPK:
      j = "OP_TOPK";
      break;
    case LegacyOperatorType::WHERE:
      j = "OP_WHERE";
      break;
    case LegacyOperatorType::CEIL:
      j = "OP_CEIL";
      break;
    case LegacyOperatorType::CAST:
      j = "OP_CAST";
      break;
    case LegacyOperatorType::EXP:
      j = "OP_EXP";
      break;
    case LegacyOperatorType::ROUND:
      j = "OP_ROUND";
      break;
    case LegacyOperatorType::LOG:
      j = "OP_LOG";
      break;
    case LegacyOperatorType::LOGICAL_NOT:
      j = "OP_LOGICAL_NOT";
      break;
    case LegacyOperatorType::SQRT:
      j = "OP_SQRT";
      break;
    case LegacyOperatorType::SIN:
      j = "OP_SIN";
      break;
    case LegacyOperatorType::COS:
      j = "OP_COS";
      break;
    case LegacyOperatorType::LEAKYRELU:
      j = "OP_LEAKYRELU";
      break;
    case LegacyOperatorType::SLICE:
      j = "OP_SLICE";
      break;
    case LegacyOperatorType::RESIZE:
      j = "OP_RESIZE";
      break;
    case LegacyOperatorType::PRELU:
      j = "OP_PRELU";
      break;
    case LegacyOperatorType::GELU:
      j = "OP_GELU";
      break;
    case LegacyOperatorType::MULTIHEAD_ATTENTION:
      j = "OP_MULTIHEAD_ATTENTION";
      break;
    case LegacyOperatorType::FUSED:
      j = "OP_FUSED";
      break;
    case LegacyOperatorType::RSQRT:
      j = "OP_RSQRT";
      break;
    case LegacyOperatorType::POW:
      j = "OP_POW";
      break;
    case LegacyOperatorType::MEAN:
      j = "OP_MEAN";
      break;
    case LegacyOperatorType::LAYERNORM:
      j = "OP_LAYERNORM";
      break;
    case LegacyOperatorType::GATHER:
      j = "OP_GATHER";
      break;
    case LegacyOperatorType::BROADCAST:
      j = "OP_BROADCAST";
      break;
    case LegacyOperatorType::REPARTITION:
      j = "OP_PARTITION";
      break;
    case LegacyOperatorType::COMBINE:
      j = "OP_COMBINE";
      break;
    case LegacyOperatorType::REPLICATE:
      j = "OP_REPLICATE";
      break;
    case LegacyOperatorType::REDUCTION:
      j = "OP_REDUCE";
      break;
    case LegacyOperatorType::BATCH:
      j = "OP_BATCH";
      break;
    case LegacyOperatorType::PIPELINE:
      j = "OP_PIPELINE";
      break;
    case LegacyOperatorType::FUSED_PARALLEL:
      j = "OP_FUSED_PARALLEL";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown LegacyOperatorType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, LegacyOperatorType &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "OP_NOOP") {
    x = LegacyOperatorType::NOOP;
  } else if (as_str == "OP_INPUT") {
    x = LegacyOperatorType::INPUT;
  } else if (as_str == "OP_WEIGHT") {
    x = LegacyOperatorType::WEIGHT;
  } else if (as_str == "OP_CONV2D") {
    x = LegacyOperatorType::CONV2D;
  } else if (as_str == "OP_DROPOUT") {
    x = LegacyOperatorType::DROPOUT;
  } else if (as_str == "OP_LINEAR") {
    x = LegacyOperatorType::LINEAR;
  } else if (as_str == "OP_BATCHMATMUL") {
    x = LegacyOperatorType::BATCHMATMUL;
  } else if (as_str == "OP_POOL2D") {
    x = LegacyOperatorType::POOL2D;
  } else if (as_str == "OP_SCALAR_MULTIPLY") {
    x = LegacyOperatorType::SCALAR_MULTIPLY;
  } else if (as_str == "OP_SCALAR_ADD") {
    x = LegacyOperatorType::SCALAR_ADD;
  } else if (as_str == "OP_SCALAR_FLOOR_DIV") {
    x = LegacyOperatorType::SCALAR_FLOOR_DIV;
  } else if (as_str == "OP_SCALAR_TRUE_DIV") {
    x = LegacyOperatorType::SCALAR_TRUE_DIV;
  } else if (as_str == "OP_SCALAR_SUB") {
    x = LegacyOperatorType::SCALAR_SUB;
  } else if (as_str == "OP_RELU") {
    x = LegacyOperatorType::RELU;
  } else if (as_str == "OP_IDENTITY") {
    x = LegacyOperatorType::IDENTITY;
  } else if (as_str == "OP_SIGMOID") {
    x = LegacyOperatorType::SIGMOID;
  } else if (as_str == "OP_TANH") {
    x = LegacyOperatorType::TANH;
  } else if (as_str == "OP_ELU") {
    x = LegacyOperatorType::ELU;
  } else if (as_str == "OP_FLAT") {
    x = LegacyOperatorType::FLAT;
  } else if (as_str == "OP_SOFTMAX") {
    x = LegacyOperatorType::SOFTMAX;
  } else if (as_str == "OP_BATCHNORM") {
    x = LegacyOperatorType::BATCHNORM;
  } else if (as_str == "OP_CONCAT") {
    x = LegacyOperatorType::CONCAT;
  } else if (as_str == "OP_SPLIT") {
    x = LegacyOperatorType::SPLIT;
  } else if (as_str == "OP_EMBEDDING") {
    x = LegacyOperatorType::EMBEDDING;
  } else if (as_str == "OP_CACHE") {
    x = LegacyOperatorType::CACHE;
  } else if (as_str == "OP_RESHAPE") {
    x = LegacyOperatorType::RESHAPE;
  } else if (as_str == "OP_REVERSE") {
    x = LegacyOperatorType::REVERSE;
  } else if (as_str == "OP_TRANSPOSE") {
    x = LegacyOperatorType::TRANSPOSE;
  } else if (as_str == "OP_EW_ADD") {
    x = LegacyOperatorType::EW_ADD;
  } else if (as_str == "OP_EW_MUL") {
    x = LegacyOperatorType::EW_MUL;
  } else if (as_str == "OP_MATMUL") {
    x = LegacyOperatorType::MATMUL;
  } else if (as_str == "OP_MUL") {
    x = LegacyOperatorType::MUL;
  } else if (as_str == "OP_ENLARGE") {
    x = LegacyOperatorType::ENLARGE;
  } else if (as_str == "OP_SQUEEZE") {
    x = LegacyOperatorType::SQUEEZE;
  } else if (as_str == "OP_UNSQUEEZE") {
    x = LegacyOperatorType::UNSQUEEZE;
  } else if (as_str == "OP_EW_SUB") {
    x = LegacyOperatorType::EW_SUB;
  } else if (as_str == "OP_EW_DIV") {
    x = LegacyOperatorType::EW_DIV;
  } else if (as_str == "OP_EW_EQUAL") {
    x = LegacyOperatorType::EW_EQUAL;
  } else if (as_str == "OP_EW_GREATER") {
    x = LegacyOperatorType::EW_GREATER;
  } else if (as_str == "OP_EW_LESS") {
    x = LegacyOperatorType::EW_LESS;
  } else if (as_str == "OP_EW_MAX") {
    x = LegacyOperatorType::EW_MAX;
  } else if (as_str == "OP_EW_MIN") {
    x = LegacyOperatorType::EW_MIN;
  } else if (as_str == "OP_REDUCE_ARGMAX") {
    x = LegacyOperatorType::REDUCE_ARGMAX;
  } else if (as_str == "OP_REDUCE_ARGMIN") {
    x = LegacyOperatorType::REDUCE_ARGMIN;
  } else if (as_str == "OP_REDUCE_MAX") {
    x = LegacyOperatorType::REDUCE_MAX;
  } else if (as_str == "OP_REDUCE_MEAN") {
    x = LegacyOperatorType::REDUCE_MEAN;
  } else if (as_str == "OP_REDUCE_MIN") {
    x = LegacyOperatorType::REDUCE_MIN;
  } else if (as_str == "OP_REDUCE_PROD") {
    x = LegacyOperatorType::REDUCE_PROD;
  } else if (as_str == "OP_REDUCE_SUM") {
    x = LegacyOperatorType::REDUCE_SUM;
  } else if (as_str == "OP_PAD") {
    x = LegacyOperatorType::PAD;
  } else if (as_str == "OP_SHAPE") {
    x = LegacyOperatorType::SHAPE;
  } else if (as_str == "OP_SIZE") {
    x = LegacyOperatorType::SIZE;
  } else if (as_str == "OP_TOPK") {
    x = LegacyOperatorType::TOPK;
  } else if (as_str == "OP_WHERE") {
    x = LegacyOperatorType::WHERE;
  } else if (as_str == "OP_CEIL") {
    x = LegacyOperatorType::CEIL;
  } else if (as_str == "OP_CAST") {
    x = LegacyOperatorType::CAST;
  } else if (as_str == "OP_EXP") {
    x = LegacyOperatorType::EXP;
  } else if (as_str == "OP_ROUND") {
    x = LegacyOperatorType::ROUND;
  } else if (as_str == "OP_LOG") {
    x = LegacyOperatorType::LOG;
  } else if (as_str == "OP_LOGICAL_NOT") {
    x = LegacyOperatorType::LOGICAL_NOT;
  } else if (as_str == "OP_SQRT") {
    x = LegacyOperatorType::SQRT;
  } else if (as_str == "OP_SIN") {
    x = LegacyOperatorType::SIN;
  } else if (as_str == "OP_COS") {
    x = LegacyOperatorType::COS;
  } else if (as_str == "OP_LEAKYRELU") {
    x = LegacyOperatorType::LEAKYRELU;
  } else if (as_str == "OP_SLICE") {
    x = LegacyOperatorType::SLICE;
  } else if (as_str == "OP_RESIZE") {
    x = LegacyOperatorType::RESIZE;
  } else if (as_str == "OP_PRELU") {
    x = LegacyOperatorType::PRELU;
  } else if (as_str == "OP_GELU") {
    x = LegacyOperatorType::GELU;
  } else if (as_str == "OP_MULTIHEAD_ATTENTION") {
    x = LegacyOperatorType::MULTIHEAD_ATTENTION;
  } else if (as_str == "OP_FUSED") {
    x = LegacyOperatorType::FUSED;
  } else if (as_str == "OP_RSQRT") {
    x = LegacyOperatorType::RSQRT;
  } else if (as_str == "OP_POW") {
    x = LegacyOperatorType::POW;
  } else if (as_str == "OP_MEAN") {
    x = LegacyOperatorType::MEAN;
  } else if (as_str == "OP_LAYERNORM") {
    x = LegacyOperatorType::LAYERNORM;
  } else if (as_str == "OP_GATHER") {
    x = LegacyOperatorType::GATHER;
  } else if (as_str == "OP_BROADCAST") {
    x = LegacyOperatorType::BROADCAST;
  } else if (as_str == "OP_PARTITION") {
    x = LegacyOperatorType::REPARTITION;
  } else if (as_str == "OP_COMBINE") {
    x = LegacyOperatorType::COMBINE;
  } else if (as_str == "OP_REPLICATE") {
    x = LegacyOperatorType::REPLICATE;
  } else if (as_str == "OP_REDUCE") {
    x = LegacyOperatorType::REDUCTION;
  } else if (as_str == "OP_BATCH") {
    x = LegacyOperatorType::BATCH;
  } else if (as_str == "OP_PIPELINE") {
    x = LegacyOperatorType::PIPELINE;
  } else if (as_str == "OP_FUSED_PARALLEL") {
    x = LegacyOperatorType::FUSED_PARALLEL;
  } else {
    std::ostringstream oss;
    oss << "Unknown LegacyOperatorType value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::LegacyOperatorType>
    Arbitrary<FlexFlow::LegacyOperatorType>::arbitrary() {
  return gen::element<FlexFlow::LegacyOperatorType>(
      FlexFlow::LegacyOperatorType::NOOP,
      FlexFlow::LegacyOperatorType::INPUT,
      FlexFlow::LegacyOperatorType::WEIGHT,
      FlexFlow::LegacyOperatorType::CONV2D,
      FlexFlow::LegacyOperatorType::DROPOUT,
      FlexFlow::LegacyOperatorType::LINEAR,
      FlexFlow::LegacyOperatorType::BATCHMATMUL,
      FlexFlow::LegacyOperatorType::POOL2D,
      FlexFlow::LegacyOperatorType::SCALAR_MULTIPLY,
      FlexFlow::LegacyOperatorType::SCALAR_ADD,
      FlexFlow::LegacyOperatorType::SCALAR_FLOOR_DIV,
      FlexFlow::LegacyOperatorType::SCALAR_TRUE_DIV,
      FlexFlow::LegacyOperatorType::SCALAR_SUB,
      FlexFlow::LegacyOperatorType::RELU,
      FlexFlow::LegacyOperatorType::IDENTITY,
      FlexFlow::LegacyOperatorType::SIGMOID,
      FlexFlow::LegacyOperatorType::TANH,
      FlexFlow::LegacyOperatorType::ELU,
      FlexFlow::LegacyOperatorType::FLAT,
      FlexFlow::LegacyOperatorType::SOFTMAX,
      FlexFlow::LegacyOperatorType::BATCHNORM,
      FlexFlow::LegacyOperatorType::CONCAT,
      FlexFlow::LegacyOperatorType::SPLIT,
      FlexFlow::LegacyOperatorType::EMBEDDING,
      FlexFlow::LegacyOperatorType::CACHE,
      FlexFlow::LegacyOperatorType::RESHAPE,
      FlexFlow::LegacyOperatorType::REVERSE,
      FlexFlow::LegacyOperatorType::TRANSPOSE,
      FlexFlow::LegacyOperatorType::EW_ADD,
      FlexFlow::LegacyOperatorType::EW_MUL,
      FlexFlow::LegacyOperatorType::MATMUL,
      FlexFlow::LegacyOperatorType::MUL,
      FlexFlow::LegacyOperatorType::ENLARGE,
      FlexFlow::LegacyOperatorType::SQUEEZE,
      FlexFlow::LegacyOperatorType::UNSQUEEZE,
      FlexFlow::LegacyOperatorType::EW_SUB,
      FlexFlow::LegacyOperatorType::EW_DIV,
      FlexFlow::LegacyOperatorType::EW_EQUAL,
      FlexFlow::LegacyOperatorType::EW_GREATER,
      FlexFlow::LegacyOperatorType::EW_LESS,
      FlexFlow::LegacyOperatorType::EW_MAX,
      FlexFlow::LegacyOperatorType::EW_MIN,
      FlexFlow::LegacyOperatorType::REDUCE_ARGMAX,
      FlexFlow::LegacyOperatorType::REDUCE_ARGMIN,
      FlexFlow::LegacyOperatorType::REDUCE_MAX,
      FlexFlow::LegacyOperatorType::REDUCE_MEAN,
      FlexFlow::LegacyOperatorType::REDUCE_MIN,
      FlexFlow::LegacyOperatorType::REDUCE_PROD,
      FlexFlow::LegacyOperatorType::REDUCE_SUM,
      FlexFlow::LegacyOperatorType::PAD,
      FlexFlow::LegacyOperatorType::SHAPE,
      FlexFlow::LegacyOperatorType::SIZE,
      FlexFlow::LegacyOperatorType::TOPK,
      FlexFlow::LegacyOperatorType::WHERE,
      FlexFlow::LegacyOperatorType::CEIL,
      FlexFlow::LegacyOperatorType::CAST,
      FlexFlow::LegacyOperatorType::EXP,
      FlexFlow::LegacyOperatorType::ROUND,
      FlexFlow::LegacyOperatorType::LOG,
      FlexFlow::LegacyOperatorType::LOGICAL_NOT,
      FlexFlow::LegacyOperatorType::SQRT,
      FlexFlow::LegacyOperatorType::SIN,
      FlexFlow::LegacyOperatorType::COS,
      FlexFlow::LegacyOperatorType::LEAKYRELU,
      FlexFlow::LegacyOperatorType::SLICE,
      FlexFlow::LegacyOperatorType::RESIZE,
      FlexFlow::LegacyOperatorType::PRELU,
      FlexFlow::LegacyOperatorType::GELU,
      FlexFlow::LegacyOperatorType::MULTIHEAD_ATTENTION,
      FlexFlow::LegacyOperatorType::FUSED,
      FlexFlow::LegacyOperatorType::RSQRT,
      FlexFlow::LegacyOperatorType::POW,
      FlexFlow::LegacyOperatorType::MEAN,
      FlexFlow::LegacyOperatorType::LAYERNORM,
      FlexFlow::LegacyOperatorType::GATHER,
      FlexFlow::LegacyOperatorType::BROADCAST,
      FlexFlow::LegacyOperatorType::REPARTITION,
      FlexFlow::LegacyOperatorType::COMBINE,
      FlexFlow::LegacyOperatorType::REPLICATE,
      FlexFlow::LegacyOperatorType::REDUCTION,
      FlexFlow::LegacyOperatorType::BATCH,
      FlexFlow::LegacyOperatorType::PIPELINE,
      FlexFlow::LegacyOperatorType::FUSED_PARALLEL);
}
} // namespace rc
