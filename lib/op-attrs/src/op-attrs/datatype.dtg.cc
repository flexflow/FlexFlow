// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/datatype.enum.toml
/* proj-data
{
  "generated_from": "8315d0aa0a65b00c13aa580e923592ef"
}
*/

#include "op-attrs/datatype.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::DataType>::operator()(FlexFlow::DataType x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(DataType x) {
  switch (x) {
    case DataType::BOOL:
      return "BOOL";
    case DataType::INT32:
      return "INT32";
    case DataType::INT64:
      return "INT64";
    case DataType::HALF:
      return "HALF";
    case DataType::FLOAT:
      return "FLOAT";
    case DataType::DOUBLE:
      return "DOUBLE";
    default:
      std::ostringstream oss;
      oss << "Unknown DataType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, DataType x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, DataType x) {
  switch (x) {
    case DataType::BOOL:
      j = "BOOL";
      break;
    case DataType::INT32:
      j = "INT32";
      break;
    case DataType::INT64:
      j = "INT64";
      break;
    case DataType::HALF:
      j = "HALF";
      break;
    case DataType::FLOAT:
      j = "FLOAT";
      break;
    case DataType::DOUBLE:
      j = "DOUBLE";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown DataType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, DataType &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "BOOL") {
    x = DataType::BOOL;
  } else if (as_str == "INT32") {
    x = DataType::INT32;
  } else if (as_str == "INT64") {
    x = DataType::INT64;
  } else if (as_str == "HALF") {
    x = DataType::HALF;
  } else if (as_str == "FLOAT") {
    x = DataType::FLOAT;
  } else if (as_str == "DOUBLE") {
    x = DataType::DOUBLE;
  } else {
    std::ostringstream oss;
    oss << "Unknown DataType value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::DataType> Arbitrary<FlexFlow::DataType>::arbitrary() {
  return gen::element<FlexFlow::DataType>(FlexFlow::DataType::BOOL,
                                          FlexFlow::DataType::INT32,
                                          FlexFlow::DataType::INT64,
                                          FlexFlow::DataType::HALF,
                                          FlexFlow::DataType::FLOAT,
                                          FlexFlow::DataType::DOUBLE);
}
} // namespace rc
