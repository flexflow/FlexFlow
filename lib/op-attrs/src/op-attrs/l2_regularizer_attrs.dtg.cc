// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/l2_regularizer_attrs.struct.toml
/* proj-data
{
  "generated_from": "c4f182e547ab6f0d5613e7eeb95d438e"
}
*/

#include "op-attrs/l2_regularizer_attrs.dtg.h"

#include <sstream>

namespace FlexFlow {
L2RegularizerAttrs::L2RegularizerAttrs(float const &lambda) : lambda(lambda) {}
bool L2RegularizerAttrs::operator==(L2RegularizerAttrs const &other) const {
  return std::tie(this->lambda) == std::tie(other.lambda);
}
bool L2RegularizerAttrs::operator!=(L2RegularizerAttrs const &other) const {
  return std::tie(this->lambda) != std::tie(other.lambda);
}
bool L2RegularizerAttrs::operator<(L2RegularizerAttrs const &other) const {
  return std::tie(this->lambda) < std::tie(other.lambda);
}
bool L2RegularizerAttrs::operator>(L2RegularizerAttrs const &other) const {
  return std::tie(this->lambda) > std::tie(other.lambda);
}
bool L2RegularizerAttrs::operator<=(L2RegularizerAttrs const &other) const {
  return std::tie(this->lambda) <= std::tie(other.lambda);
}
bool L2RegularizerAttrs::operator>=(L2RegularizerAttrs const &other) const {
  return std::tie(this->lambda) >= std::tie(other.lambda);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::L2RegularizerAttrs>::operator()(
    ::FlexFlow::L2RegularizerAttrs const &x) const {
  size_t result = 0;
  result ^=
      std::hash<float>{}(x.lambda) + 0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::L2RegularizerAttrs
    adl_serializer<::FlexFlow::L2RegularizerAttrs>::from_json(json const &j) {
  return ::FlexFlow::L2RegularizerAttrs{j.at("lambda").template get<float>()};
}
void adl_serializer<::FlexFlow::L2RegularizerAttrs>::to_json(
    json &j, ::FlexFlow::L2RegularizerAttrs const &v) {
  j["__type"] = "L2RegularizerAttrs";
  j["lambda"] = v.lambda;
}
} // namespace nlohmann

namespace rc {
Gen<::FlexFlow::L2RegularizerAttrs>
    Arbitrary<::FlexFlow::L2RegularizerAttrs>::arbitrary() {
  return gen::construct<::FlexFlow::L2RegularizerAttrs>(
      gen::arbitrary<float>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(L2RegularizerAttrs const &x) {
  std::ostringstream oss;
  oss << "<L2RegularizerAttrs";
  oss << " lambda=" << x.lambda;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, L2RegularizerAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
