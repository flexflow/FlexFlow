// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_tensor_dims_t.struct.toml

#include "op-attrs/parallel_tensor_dims_t.h"

namespace FlexFlow {
ParallelTensorDims::ParallelTensorDims(
    ::FlexFlow::FFOrdered<::FlexFlow::ParallelDim> const &ff_ordered)
    : ff_ordered(ff_ordered) {}
bool ParallelTensorDims::operator==(ParallelTensorDims const &other) const {
  return std::tie(this->ff_ordered) == std::tie(other.ff_ordered);
}
bool ParallelTensorDims::operator!=(ParallelTensorDims const &other) const {
  return std::tie(this->ff_ordered) != std::tie(other.ff_ordered);
}
bool ParallelTensorDims::operator<(ParallelTensorDims const &other) const {
  return std::tie(this->ff_ordered) < std::tie(other.ff_ordered);
}
bool ParallelTensorDims::operator>(ParallelTensorDims const &other) const {
  return std::tie(this->ff_ordered) > std::tie(other.ff_ordered);
}
bool ParallelTensorDims::operator<=(ParallelTensorDims const &other) const {
  return std::tie(this->ff_ordered) <= std::tie(other.ff_ordered);
}
bool ParallelTensorDims::operator>=(ParallelTensorDims const &other) const {
  return std::tie(this->ff_ordered) >= std::tie(other.ff_ordered);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::ParallelTensorDims>::operator()(
    FlexFlow::ParallelTensorDims const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::FFOrdered<::FlexFlow::ParallelDim>>{}(
                x.ff_ordered) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::ParallelTensorDims
    adl_serializer<FlexFlow::ParallelTensorDims>::from_json(json const &j) {
  return {j.at("ff_ordered")
              .template get<::FlexFlow::FFOrdered<::FlexFlow::ParallelDim>>()};
}
void adl_serializer<FlexFlow::ParallelTensorDims>::to_json(
    json &j, FlexFlow::ParallelTensorDims const &v) {
  j["__type"] = "ParallelTensorDims";
  j["ff_ordered"] = v.ff_ordered;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::ParallelTensorDims>
    Arbitrary<FlexFlow::ParallelTensorDims>::arbitrary() {
  return gen::construct<FlexFlow::ParallelTensorDims>(
      gen::arbitrary<::FlexFlow::FFOrdered<::FlexFlow::ParallelDim>>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(ParallelTensorDims const &x) {
  std::ostringstream oss;
  oss << "<ParallelTensorDims";
  oss << " ff_ordered=" << x.ff_ordered;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ParallelTensorDims const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
