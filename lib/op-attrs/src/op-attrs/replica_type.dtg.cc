// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/replica_type.enum.toml
/* proj-data
{
  "generated_from": "6ecba7a6851b8bea93705bba24661149"
}
*/

#include "op-attrs/replica_type.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::ReplicaType>::operator()(FlexFlow::ReplicaType x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(ReplicaType x) {
  switch (x) {
    case ReplicaType::SUM:
      return "SUM";
    case ReplicaType::DISCARD_COPY:
      return "DISCARD_COPY";
    default:
      std::ostringstream oss;
      oss << "Unknown ReplicaType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, ReplicaType x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, ReplicaType x) {
  switch (x) {
    case ReplicaType::SUM:
      j = "SUM";
      break;
    case ReplicaType::DISCARD_COPY:
      j = "DISCARD_COPY";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown ReplicaType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, ReplicaType &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "SUM") {
    x = ReplicaType::SUM;
  } else if (as_str == "DISCARD_COPY") {
    x = ReplicaType::DISCARD_COPY;
  } else {
    std::ostringstream oss;
    oss << "Unknown ReplicaType value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::ReplicaType> Arbitrary<FlexFlow::ReplicaType>::arbitrary() {
  return gen::element<FlexFlow::ReplicaType>(
      FlexFlow::ReplicaType::SUM, FlexFlow::ReplicaType::DISCARD_COPY);
}
} // namespace rc
