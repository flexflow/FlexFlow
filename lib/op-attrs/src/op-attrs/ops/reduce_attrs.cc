// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/reduce_attrs.struct.toml

#include "op-attrs/ops/reduce_attrs.h"

namespace FlexFlow {
ReduceAttrs::ReduceAttrs(
    ::FlexFlow::stack_vector<::FlexFlow::ff_dim_t, MAX_TENSOR_DIM> const &axes,
    ::FlexFlow::OperatorType const &op_type,
    bool const &keepdims)
    : axes(axes), op_type(op_type), keepdims(keepdims) {}
bool ReduceAttrs::operator==(ReduceAttrs const &other) const {
  return std::tie(this->axes, this->op_type, this->keepdims) ==
         std::tie(other.axes, other.op_type, other.keepdims);
}
bool ReduceAttrs::operator!=(ReduceAttrs const &other) const {
  return std::tie(this->axes, this->op_type, this->keepdims) !=
         std::tie(other.axes, other.op_type, other.keepdims);
}
bool ReduceAttrs::operator<(ReduceAttrs const &other) const {
  return std::tie(this->axes, this->op_type, this->keepdims) <
         std::tie(other.axes, other.op_type, other.keepdims);
}
bool ReduceAttrs::operator>(ReduceAttrs const &other) const {
  return std::tie(this->axes, this->op_type, this->keepdims) >
         std::tie(other.axes, other.op_type, other.keepdims);
}
bool ReduceAttrs::operator<=(ReduceAttrs const &other) const {
  return std::tie(this->axes, this->op_type, this->keepdims) <=
         std::tie(other.axes, other.op_type, other.keepdims);
}
bool ReduceAttrs::operator>=(ReduceAttrs const &other) const {
  return std::tie(this->axes, this->op_type, this->keepdims) >=
         std::tie(other.axes, other.op_type, other.keepdims);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::ReduceAttrs>::operator()(
    FlexFlow::ReduceAttrs const &x) const {
  size_t result = 0;
  result ^=
      std::hash<
          ::FlexFlow::stack_vector<::FlexFlow::ff_dim_t, MAX_TENSOR_DIM>>{}(
          x.axes) +
      0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::OperatorType>{}(x.op_type) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^= std::hash<bool>{}(x.keepdims) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::ReduceAttrs
    adl_serializer<FlexFlow::ReduceAttrs>::from_json(json const &j) {
  return {
      j.at("axes")
          .template get<
              ::FlexFlow::stack_vector<::FlexFlow::ff_dim_t, MAX_TENSOR_DIM>>(),
      j.at("op_type").template get<::FlexFlow::OperatorType>(),
      j.at("keepdims").template get<bool>()};
}
void adl_serializer<FlexFlow::ReduceAttrs>::to_json(
    json &j, FlexFlow::ReduceAttrs const &v) {
  j["__type"] = "ReduceAttrs";
  j["axes"] = v.axes;
  j["op_type"] = v.op_type;
  j["keepdims"] = v.keepdims;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::ReduceAttrs> Arbitrary<FlexFlow::ReduceAttrs>::arbitrary() {
  return gen::construct<FlexFlow::ReduceAttrs>(
      gen::arbitrary<
          ::FlexFlow::stack_vector<::FlexFlow::ff_dim_t, MAX_TENSOR_DIM>>(),
      gen::arbitrary<::FlexFlow::OperatorType>(),
      gen::arbitrary<bool>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(ReduceAttrs const &x) {
  std::ostringstream oss;
  oss << "<ReduceAttrs";
  oss << " axes=" << x.axes;
  oss << " op_type=" << x.op_type;
  oss << " keepdims=" << x.keepdims;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ReduceAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
