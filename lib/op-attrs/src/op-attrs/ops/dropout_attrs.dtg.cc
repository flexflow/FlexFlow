// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/dropout_attrs.struct.toml
/* proj-data
{
  "generated_from": "4fdbf129ea59b8a7306813cfa4c46021"
}
*/

#include "op-attrs/ops/dropout_attrs.dtg.h"

#include <sstream>

namespace FlexFlow {
DropoutAttrs::DropoutAttrs(float const &rate, unsigned long long const &seed)
    : rate(rate), seed(seed) {}
bool DropoutAttrs::operator==(DropoutAttrs const &other) const {
  return std::tie(this->rate, this->seed) == std::tie(other.rate, other.seed);
}
bool DropoutAttrs::operator!=(DropoutAttrs const &other) const {
  return std::tie(this->rate, this->seed) != std::tie(other.rate, other.seed);
}
bool DropoutAttrs::operator<(DropoutAttrs const &other) const {
  return std::tie(this->rate, this->seed) < std::tie(other.rate, other.seed);
}
bool DropoutAttrs::operator>(DropoutAttrs const &other) const {
  return std::tie(this->rate, this->seed) > std::tie(other.rate, other.seed);
}
bool DropoutAttrs::operator<=(DropoutAttrs const &other) const {
  return std::tie(this->rate, this->seed) <= std::tie(other.rate, other.seed);
}
bool DropoutAttrs::operator>=(DropoutAttrs const &other) const {
  return std::tie(this->rate, this->seed) >= std::tie(other.rate, other.seed);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::DropoutAttrs>::operator()(
    FlexFlow::DropoutAttrs const &x) const {
  size_t result = 0;
  result ^=
      std::hash<float>{}(x.rate) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<unsigned long long>{}(x.seed) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::DropoutAttrs
    adl_serializer<FlexFlow::DropoutAttrs>::from_json(json const &j) {
  return {j.at("rate").template get<float>(),
          j.at("seed").template get<unsigned long long>()};
}
void adl_serializer<FlexFlow::DropoutAttrs>::to_json(
    json &j, FlexFlow::DropoutAttrs const &v) {
  j["__type"] = "DropoutAttrs";
  j["rate"] = v.rate;
  j["seed"] = v.seed;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::DropoutAttrs> Arbitrary<FlexFlow::DropoutAttrs>::arbitrary() {
  return gen::construct<FlexFlow::DropoutAttrs>(
      gen::arbitrary<float>(), gen::arbitrary<unsigned long long>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(DropoutAttrs const &x) {
  std::ostringstream oss;
  oss << "<DropoutAttrs";
  oss << " rate=" << x.rate;
  oss << " seed=" << x.seed;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, DropoutAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
