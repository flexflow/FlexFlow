// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/element_scalar_unary_attrs.struct.toml
/* proj-data
{
  "generated_from": "aa6f98b992d46bdf7ad59158bc143a3f"
}
*/

#include "op-attrs/ops/element_scalar_unary_attrs.dtg.h"

#include "op-attrs/operator_type.h"
#include <sstream>

namespace FlexFlow {
ElementScalarUnaryAttrs::ElementScalarUnaryAttrs(
    ::FlexFlow::OperatorType const &op_type, float const &scalar)
    : op_type(op_type), scalar(scalar) {}
bool ElementScalarUnaryAttrs::operator==(
    ElementScalarUnaryAttrs const &other) const {
  return std::tie(this->op_type, this->scalar) ==
         std::tie(other.op_type, other.scalar);
}
bool ElementScalarUnaryAttrs::operator!=(
    ElementScalarUnaryAttrs const &other) const {
  return std::tie(this->op_type, this->scalar) !=
         std::tie(other.op_type, other.scalar);
}
bool ElementScalarUnaryAttrs::operator<(
    ElementScalarUnaryAttrs const &other) const {
  return std::tie(this->op_type, this->scalar) <
         std::tie(other.op_type, other.scalar);
}
bool ElementScalarUnaryAttrs::operator>(
    ElementScalarUnaryAttrs const &other) const {
  return std::tie(this->op_type, this->scalar) >
         std::tie(other.op_type, other.scalar);
}
bool ElementScalarUnaryAttrs::operator<=(
    ElementScalarUnaryAttrs const &other) const {
  return std::tie(this->op_type, this->scalar) <=
         std::tie(other.op_type, other.scalar);
}
bool ElementScalarUnaryAttrs::operator>=(
    ElementScalarUnaryAttrs const &other) const {
  return std::tie(this->op_type, this->scalar) >=
         std::tie(other.op_type, other.scalar);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::ElementScalarUnaryAttrs>::operator()(
    FlexFlow::ElementScalarUnaryAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::OperatorType>{}(x.op_type) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^=
      std::hash<float>{}(x.scalar) + 0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::ElementScalarUnaryAttrs
    adl_serializer<FlexFlow::ElementScalarUnaryAttrs>::from_json(
        json const &j) {
  return {j.at("op_type").template get<::FlexFlow::OperatorType>(),
          j.at("scalar").template get<float>()};
}
void adl_serializer<FlexFlow::ElementScalarUnaryAttrs>::to_json(
    json &j, FlexFlow::ElementScalarUnaryAttrs const &v) {
  j["__type"] = "ElementScalarUnaryAttrs";
  j["op_type"] = v.op_type;
  j["scalar"] = v.scalar;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::ElementScalarUnaryAttrs>
    Arbitrary<FlexFlow::ElementScalarUnaryAttrs>::arbitrary() {
  return gen::construct<FlexFlow::ElementScalarUnaryAttrs>(
      gen::arbitrary<::FlexFlow::OperatorType>(), gen::arbitrary<float>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(ElementScalarUnaryAttrs const &x) {
  std::ostringstream oss;
  oss << "<ElementScalarUnaryAttrs";
  oss << " op_type=" << x.op_type;
  oss << " scalar=" << x.scalar;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ElementScalarUnaryAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
