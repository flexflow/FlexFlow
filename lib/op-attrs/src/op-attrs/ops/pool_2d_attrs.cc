// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/pool_2d_attrs.struct.toml

#include "op-attrs/ops/pool_2d_attrs.h"

namespace FlexFlow {
Pool2DAttrs::Pool2DAttrs(int const &kernel_h,
                         int const &kernel_w,
                         int const &stride_h,
                         int const &stride_w,
                         int const &padding_h,
                         int const &padding_w,
                         ::FlexFlow::PoolOp const &pool_type,
                         ::FlexFlow::Activation const &activation)
    : kernel_h(kernel_h), kernel_w(kernel_w), stride_h(stride_h),
      stride_w(stride_w), padding_h(padding_h), padding_w(padding_w),
      pool_type(pool_type), activation(activation) {}
bool Pool2DAttrs::operator==(Pool2DAttrs const &other) const {
  return std::tie(this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->pool_type,
                  this->activation) == std::tie(other.kernel_h,
                                                other.kernel_w,
                                                other.stride_h,
                                                other.stride_w,
                                                other.padding_h,
                                                other.padding_w,
                                                other.pool_type,
                                                other.activation);
}
bool Pool2DAttrs::operator!=(Pool2DAttrs const &other) const {
  return std::tie(this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->pool_type,
                  this->activation) != std::tie(other.kernel_h,
                                                other.kernel_w,
                                                other.stride_h,
                                                other.stride_w,
                                                other.padding_h,
                                                other.padding_w,
                                                other.pool_type,
                                                other.activation);
}
bool Pool2DAttrs::operator<(Pool2DAttrs const &other) const {
  return std::tie(this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->pool_type,
                  this->activation) < std::tie(other.kernel_h,
                                               other.kernel_w,
                                               other.stride_h,
                                               other.stride_w,
                                               other.padding_h,
                                               other.padding_w,
                                               other.pool_type,
                                               other.activation);
}
bool Pool2DAttrs::operator>(Pool2DAttrs const &other) const {
  return std::tie(this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->pool_type,
                  this->activation) > std::tie(other.kernel_h,
                                               other.kernel_w,
                                               other.stride_h,
                                               other.stride_w,
                                               other.padding_h,
                                               other.padding_w,
                                               other.pool_type,
                                               other.activation);
}
bool Pool2DAttrs::operator<=(Pool2DAttrs const &other) const {
  return std::tie(this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->pool_type,
                  this->activation) <= std::tie(other.kernel_h,
                                                other.kernel_w,
                                                other.stride_h,
                                                other.stride_w,
                                                other.padding_h,
                                                other.padding_w,
                                                other.pool_type,
                                                other.activation);
}
bool Pool2DAttrs::operator>=(Pool2DAttrs const &other) const {
  return std::tie(this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->pool_type,
                  this->activation) >= std::tie(other.kernel_h,
                                                other.kernel_w,
                                                other.stride_h,
                                                other.stride_w,
                                                other.padding_h,
                                                other.padding_w,
                                                other.pool_type,
                                                other.activation);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::Pool2DAttrs>::operator()(
    FlexFlow::Pool2DAttrs const &x) const {
  size_t result = 0;
  result ^=
      std::hash<int>{}(x.kernel_h) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.kernel_w) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.stride_h) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.stride_w) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<int>{}(x.padding_h) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<int>{}(x.padding_w) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<::FlexFlow::PoolOp>{}(x.pool_type) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::Activation>{}(x.activation) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::Pool2DAttrs
    adl_serializer<FlexFlow::Pool2DAttrs>::from_json(json const &j) {
  return {j.at("kernel_h").template get<int>(),
          j.at("kernel_w").template get<int>(),
          j.at("stride_h").template get<int>(),
          j.at("stride_w").template get<int>(),
          j.at("padding_h").template get<int>(),
          j.at("padding_w").template get<int>(),
          j.at("pool_type").template get<::FlexFlow::PoolOp>(),
          j.at("activation").template get<::FlexFlow::Activation>()};
}
void adl_serializer<FlexFlow::Pool2DAttrs>::to_json(
    json &j, FlexFlow::Pool2DAttrs const &v) {
  j["__type"] = "Pool2DAttrs";
  j["kernel_h"] = v.kernel_h;
  j["kernel_w"] = v.kernel_w;
  j["stride_h"] = v.stride_h;
  j["stride_w"] = v.stride_w;
  j["padding_h"] = v.padding_h;
  j["padding_w"] = v.padding_w;
  j["pool_type"] = v.pool_type;
  j["activation"] = v.activation;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::Pool2DAttrs> Arbitrary<FlexFlow::Pool2DAttrs>::arbitrary() {
  return gen::construct<FlexFlow::Pool2DAttrs>(
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<::FlexFlow::PoolOp>(),
      gen::arbitrary<::FlexFlow::Activation>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(Pool2DAttrs const &x) {
  std::ostringstream oss;
  oss << "<Pool2DAttrs";
  oss << " kernel_h=" << x.kernel_h;
  oss << " kernel_w=" << x.kernel_w;
  oss << " stride_h=" << x.stride_h;
  oss << " stride_w=" << x.stride_w;
  oss << " padding_h=" << x.padding_h;
  oss << " padding_w=" << x.padding_w;
  oss << " pool_type=" << x.pool_type;
  oss << " activation=" << x.activation;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, Pool2DAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
