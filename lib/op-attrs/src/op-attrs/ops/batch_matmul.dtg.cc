// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/batch_matmul.struct.toml
/* proj-data
{
  "generated_from": "c3bbf4c76982ef27107b74e1e6e5d360"
}
*/

#include "op-attrs/ops/batch_matmul.dtg.h"

#include <sstream>

namespace FlexFlow {
BatchMatmulAttrs::BatchMatmulAttrs(int const &a_seq_length_dim,
                                   int const &b_seq_length_dim)
    : a_seq_length_dim(a_seq_length_dim), b_seq_length_dim(b_seq_length_dim) {}
bool BatchMatmulAttrs::operator==(BatchMatmulAttrs const &other) const {
  return std::tie(this->a_seq_length_dim, this->b_seq_length_dim) ==
         std::tie(other.a_seq_length_dim, other.b_seq_length_dim);
}
bool BatchMatmulAttrs::operator!=(BatchMatmulAttrs const &other) const {
  return std::tie(this->a_seq_length_dim, this->b_seq_length_dim) !=
         std::tie(other.a_seq_length_dim, other.b_seq_length_dim);
}
bool BatchMatmulAttrs::operator<(BatchMatmulAttrs const &other) const {
  return std::tie(this->a_seq_length_dim, this->b_seq_length_dim) <
         std::tie(other.a_seq_length_dim, other.b_seq_length_dim);
}
bool BatchMatmulAttrs::operator>(BatchMatmulAttrs const &other) const {
  return std::tie(this->a_seq_length_dim, this->b_seq_length_dim) >
         std::tie(other.a_seq_length_dim, other.b_seq_length_dim);
}
bool BatchMatmulAttrs::operator<=(BatchMatmulAttrs const &other) const {
  return std::tie(this->a_seq_length_dim, this->b_seq_length_dim) <=
         std::tie(other.a_seq_length_dim, other.b_seq_length_dim);
}
bool BatchMatmulAttrs::operator>=(BatchMatmulAttrs const &other) const {
  return std::tie(this->a_seq_length_dim, this->b_seq_length_dim) >=
         std::tie(other.a_seq_length_dim, other.b_seq_length_dim);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::BatchMatmulAttrs>::operator()(
    FlexFlow::BatchMatmulAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<int>{}(x.a_seq_length_dim) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<int>{}(x.b_seq_length_dim) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::BatchMatmulAttrs
    adl_serializer<FlexFlow::BatchMatmulAttrs>::from_json(json const &j) {
  return {j.at("a_seq_length_dim").template get<int>(),
          j.at("b_seq_length_dim").template get<int>()};
}
void adl_serializer<FlexFlow::BatchMatmulAttrs>::to_json(
    json &j, FlexFlow::BatchMatmulAttrs const &v) {
  j["__type"] = "BatchMatmulAttrs";
  j["a_seq_length_dim"] = v.a_seq_length_dim;
  j["b_seq_length_dim"] = v.b_seq_length_dim;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::BatchMatmulAttrs>
    Arbitrary<FlexFlow::BatchMatmulAttrs>::arbitrary() {
  return gen::construct<FlexFlow::BatchMatmulAttrs>(gen::arbitrary<int>(),
                                                    gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(BatchMatmulAttrs const &x) {
  std::ostringstream oss;
  oss << "<BatchMatmulAttrs";
  oss << " a_seq_length_dim=" << x.a_seq_length_dim;
  oss << " b_seq_length_dim=" << x.b_seq_length_dim;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, BatchMatmulAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
