// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/conv_2d_attrs.struct.toml
/* proj-data
{
  "generated_from": "74f98e1aacb57d847bb450e1d28d3e67"
}
*/

#include "op-attrs/ops/conv_2d_attrs.dtg.h"

#include "op-attrs/activation.dtg.h"
#include "utils/json.h"
#include <optional>
#include <sstream>

namespace FlexFlow {
Conv2DAttrs::Conv2DAttrs(
    int const &out_channels,
    int const &kernel_h,
    int const &kernel_w,
    int const &stride_h,
    int const &stride_w,
    int const &padding_h,
    int const &padding_w,
    int const &groups,
    std::optional<::FlexFlow::Activation> const &activation,
    bool const &use_bias)
    : out_channels(out_channels), kernel_h(kernel_h), kernel_w(kernel_w),
      stride_h(stride_h), stride_w(stride_w), padding_h(padding_h),
      padding_w(padding_w), groups(groups), activation(activation),
      use_bias(use_bias) {}
bool Conv2DAttrs::operator==(Conv2DAttrs const &other) const {
  return std::tie(this->out_channels,
                  this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->groups,
                  this->activation,
                  this->use_bias) == std::tie(other.out_channels,
                                              other.kernel_h,
                                              other.kernel_w,
                                              other.stride_h,
                                              other.stride_w,
                                              other.padding_h,
                                              other.padding_w,
                                              other.groups,
                                              other.activation,
                                              other.use_bias);
}
bool Conv2DAttrs::operator!=(Conv2DAttrs const &other) const {
  return std::tie(this->out_channels,
                  this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->groups,
                  this->activation,
                  this->use_bias) != std::tie(other.out_channels,
                                              other.kernel_h,
                                              other.kernel_w,
                                              other.stride_h,
                                              other.stride_w,
                                              other.padding_h,
                                              other.padding_w,
                                              other.groups,
                                              other.activation,
                                              other.use_bias);
}
bool Conv2DAttrs::operator<(Conv2DAttrs const &other) const {
  return std::tie(this->out_channels,
                  this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->groups,
                  this->activation,
                  this->use_bias) < std::tie(other.out_channels,
                                             other.kernel_h,
                                             other.kernel_w,
                                             other.stride_h,
                                             other.stride_w,
                                             other.padding_h,
                                             other.padding_w,
                                             other.groups,
                                             other.activation,
                                             other.use_bias);
}
bool Conv2DAttrs::operator>(Conv2DAttrs const &other) const {
  return std::tie(this->out_channels,
                  this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->groups,
                  this->activation,
                  this->use_bias) > std::tie(other.out_channels,
                                             other.kernel_h,
                                             other.kernel_w,
                                             other.stride_h,
                                             other.stride_w,
                                             other.padding_h,
                                             other.padding_w,
                                             other.groups,
                                             other.activation,
                                             other.use_bias);
}
bool Conv2DAttrs::operator<=(Conv2DAttrs const &other) const {
  return std::tie(this->out_channels,
                  this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->groups,
                  this->activation,
                  this->use_bias) <= std::tie(other.out_channels,
                                              other.kernel_h,
                                              other.kernel_w,
                                              other.stride_h,
                                              other.stride_w,
                                              other.padding_h,
                                              other.padding_w,
                                              other.groups,
                                              other.activation,
                                              other.use_bias);
}
bool Conv2DAttrs::operator>=(Conv2DAttrs const &other) const {
  return std::tie(this->out_channels,
                  this->kernel_h,
                  this->kernel_w,
                  this->stride_h,
                  this->stride_w,
                  this->padding_h,
                  this->padding_w,
                  this->groups,
                  this->activation,
                  this->use_bias) >= std::tie(other.out_channels,
                                              other.kernel_h,
                                              other.kernel_w,
                                              other.stride_h,
                                              other.stride_w,
                                              other.padding_h,
                                              other.padding_w,
                                              other.groups,
                                              other.activation,
                                              other.use_bias);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::Conv2DAttrs>::operator()(
    ::FlexFlow::Conv2DAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<int>{}(x.out_channels) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^=
      std::hash<int>{}(x.kernel_h) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.kernel_w) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.stride_h) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.stride_w) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<int>{}(x.padding_h) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<int>{}(x.padding_w) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^=
      std::hash<int>{}(x.groups) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<std::optional<::FlexFlow::Activation>>{}(x.activation) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<bool>{}(x.use_bias) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::Conv2DAttrs
    adl_serializer<::FlexFlow::Conv2DAttrs>::from_json(json const &j) {
  return ::FlexFlow::Conv2DAttrs{
      j.at("out_channels").template get<int>(),
      j.at("kernel_h").template get<int>(),
      j.at("kernel_w").template get<int>(),
      j.at("stride_h").template get<int>(),
      j.at("stride_w").template get<int>(),
      j.at("padding_h").template get<int>(),
      j.at("padding_w").template get<int>(),
      j.at("groups").template get<int>(),
      j.at("activation").template get<std::optional<::FlexFlow::Activation>>(),
      j.at("use_bias").template get<bool>()};
}
void adl_serializer<::FlexFlow::Conv2DAttrs>::to_json(
    json &j, ::FlexFlow::Conv2DAttrs const &v) {
  j["__type"] = "Conv2DAttrs";
  j["out_channels"] = v.out_channels;
  j["kernel_h"] = v.kernel_h;
  j["kernel_w"] = v.kernel_w;
  j["stride_h"] = v.stride_h;
  j["stride_w"] = v.stride_w;
  j["padding_h"] = v.padding_h;
  j["padding_w"] = v.padding_w;
  j["groups"] = v.groups;
  j["activation"] = v.activation;
  j["use_bias"] = v.use_bias;
}
} // namespace nlohmann

namespace rc {
Gen<::FlexFlow::Conv2DAttrs> Arbitrary<::FlexFlow::Conv2DAttrs>::arbitrary() {
  return gen::construct<::FlexFlow::Conv2DAttrs>(
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<int>(),
      gen::arbitrary<std::optional<::FlexFlow::Activation>>(),
      gen::arbitrary<bool>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(Conv2DAttrs const &x) {
  std::ostringstream oss;
  oss << "<Conv2DAttrs";
  oss << " out_channels=" << x.out_channels;
  oss << " kernel_h=" << x.kernel_h;
  oss << " kernel_w=" << x.kernel_w;
  oss << " stride_h=" << x.stride_h;
  oss << " stride_w=" << x.stride_w;
  oss << " padding_h=" << x.padding_h;
  oss << " padding_w=" << x.padding_w;
  oss << " groups=" << x.groups;
  oss << " activation=" << x.activation;
  oss << " use_bias=" << x.use_bias;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, Conv2DAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
