// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/repartition_attrs.struct.toml

#include "op-attrs/ops/repartition_attrs.h"

namespace FlexFlow {
RepartitionAttrs::RepartitionAttrs(::FlexFlow::ff_dim_t const &repartition_dim,
                                   int const &repartition_degree)
    : repartition_dim(repartition_dim), repartition_degree(repartition_degree) {
}
bool RepartitionAttrs::operator==(RepartitionAttrs const &other) const {
  return std::tie(this->repartition_dim, this->repartition_degree) ==
         std::tie(other.repartition_dim, other.repartition_degree);
}
bool RepartitionAttrs::operator!=(RepartitionAttrs const &other) const {
  return std::tie(this->repartition_dim, this->repartition_degree) !=
         std::tie(other.repartition_dim, other.repartition_degree);
}
bool RepartitionAttrs::operator<(RepartitionAttrs const &other) const {
  return std::tie(this->repartition_dim, this->repartition_degree) <
         std::tie(other.repartition_dim, other.repartition_degree);
}
bool RepartitionAttrs::operator>(RepartitionAttrs const &other) const {
  return std::tie(this->repartition_dim, this->repartition_degree) >
         std::tie(other.repartition_dim, other.repartition_degree);
}
bool RepartitionAttrs::operator<=(RepartitionAttrs const &other) const {
  return std::tie(this->repartition_dim, this->repartition_degree) <=
         std::tie(other.repartition_dim, other.repartition_degree);
}
bool RepartitionAttrs::operator>=(RepartitionAttrs const &other) const {
  return std::tie(this->repartition_dim, this->repartition_degree) >=
         std::tie(other.repartition_dim, other.repartition_degree);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::RepartitionAttrs>::operator()(
    FlexFlow::RepartitionAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::ff_dim_t>{}(x.repartition_dim) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^= std::hash<int>{}(x.repartition_degree) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::RepartitionAttrs
    adl_serializer<FlexFlow::RepartitionAttrs>::from_json(json const &j) {
  return {j.at("repartition_dim").template get<::FlexFlow::ff_dim_t>(),
          j.at("repartition_degree").template get<int>()};
}
void adl_serializer<FlexFlow::RepartitionAttrs>::to_json(
    json &j, FlexFlow::RepartitionAttrs const &v) {
  j["__type"] = "RepartitionAttrs";
  j["repartition_dim"] = v.repartition_dim;
  j["repartition_degree"] = v.repartition_degree;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::RepartitionAttrs>
    Arbitrary<FlexFlow::RepartitionAttrs>::arbitrary() {
  return gen::construct<FlexFlow::RepartitionAttrs>(
      gen::arbitrary<::FlexFlow::ff_dim_t>(), gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(RepartitionAttrs const &x) {
  std::ostringstream oss;
  oss << "<RepartitionAttrs";
  oss << " repartition_dim=" << x.repartition_dim;
  oss << " repartition_degree=" << x.repartition_degree;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, RepartitionAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
