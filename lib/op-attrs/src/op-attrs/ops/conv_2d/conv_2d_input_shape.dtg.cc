// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/conv_2d/conv_2d_input_shape.struct.toml
/* proj-data
{
  "generated_from": "51911f58c134d55b2d0245444acbae53"
}
*/

#include "op-attrs/ops/conv_2d/conv_2d_input_shape.dtg.h"

#include "op-attrs/datatype.dtg.h"
#include <cstddef>
#include <sstream>

namespace FlexFlow {
Conv2DInputShape::Conv2DInputShape(size_t const &num_samples,
                                   size_t const &num_channels,
                                   size_t const &height,
                                   size_t const &width,
                                   ::FlexFlow::DataType const &datatype)
    : num_samples(num_samples), num_channels(num_channels), height(height),
      width(width), datatype(datatype) {}
bool Conv2DInputShape::operator==(Conv2DInputShape const &other) const {
  return std::tie(this->num_samples,
                  this->num_channels,
                  this->height,
                  this->width,
                  this->datatype) == std::tie(other.num_samples,
                                              other.num_channels,
                                              other.height,
                                              other.width,
                                              other.datatype);
}
bool Conv2DInputShape::operator!=(Conv2DInputShape const &other) const {
  return std::tie(this->num_samples,
                  this->num_channels,
                  this->height,
                  this->width,
                  this->datatype) != std::tie(other.num_samples,
                                              other.num_channels,
                                              other.height,
                                              other.width,
                                              other.datatype);
}
bool Conv2DInputShape::operator<(Conv2DInputShape const &other) const {
  return std::tie(this->num_samples,
                  this->num_channels,
                  this->height,
                  this->width,
                  this->datatype) < std::tie(other.num_samples,
                                             other.num_channels,
                                             other.height,
                                             other.width,
                                             other.datatype);
}
bool Conv2DInputShape::operator>(Conv2DInputShape const &other) const {
  return std::tie(this->num_samples,
                  this->num_channels,
                  this->height,
                  this->width,
                  this->datatype) > std::tie(other.num_samples,
                                             other.num_channels,
                                             other.height,
                                             other.width,
                                             other.datatype);
}
bool Conv2DInputShape::operator<=(Conv2DInputShape const &other) const {
  return std::tie(this->num_samples,
                  this->num_channels,
                  this->height,
                  this->width,
                  this->datatype) <= std::tie(other.num_samples,
                                              other.num_channels,
                                              other.height,
                                              other.width,
                                              other.datatype);
}
bool Conv2DInputShape::operator>=(Conv2DInputShape const &other) const {
  return std::tie(this->num_samples,
                  this->num_channels,
                  this->height,
                  this->width,
                  this->datatype) >= std::tie(other.num_samples,
                                              other.num_channels,
                                              other.height,
                                              other.width,
                                              other.datatype);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::Conv2DInputShape>::operator()(
    FlexFlow::Conv2DInputShape const &x) const {
  size_t result = 0;
  result ^= std::hash<size_t>{}(x.num_samples) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.num_channels) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.height) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^=
      std::hash<size_t>{}(x.width) + 0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::DataType>{}(x.datatype) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::Conv2DInputShape
    adl_serializer<FlexFlow::Conv2DInputShape>::from_json(json const &j) {
  return {j.at("num_samples").template get<size_t>(),
          j.at("num_channels").template get<size_t>(),
          j.at("height").template get<size_t>(),
          j.at("width").template get<size_t>(),
          j.at("datatype").template get<::FlexFlow::DataType>()};
}
void adl_serializer<FlexFlow::Conv2DInputShape>::to_json(
    json &j, FlexFlow::Conv2DInputShape const &v) {
  j["__type"] = "Conv2DInputShape";
  j["num_samples"] = v.num_samples;
  j["num_channels"] = v.num_channels;
  j["height"] = v.height;
  j["width"] = v.width;
  j["datatype"] = v.datatype;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::Conv2DInputShape>
    Arbitrary<FlexFlow::Conv2DInputShape>::arbitrary() {
  return gen::construct<FlexFlow::Conv2DInputShape>(
      gen::arbitrary<size_t>(),
      gen::arbitrary<size_t>(),
      gen::arbitrary<size_t>(),
      gen::arbitrary<size_t>(),
      gen::arbitrary<::FlexFlow::DataType>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(Conv2DInputShape const &x) {
  std::ostringstream oss;
  oss << "<Conv2DInputShape";
  oss << " num_samples=" << x.num_samples;
  oss << " num_channels=" << x.num_channels;
  oss << " height=" << x.height;
  oss << " width=" << x.width;
  oss << " datatype=" << x.datatype;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, Conv2DInputShape const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
