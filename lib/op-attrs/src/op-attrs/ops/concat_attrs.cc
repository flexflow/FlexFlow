// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/concat_attrs.struct.toml

#include "op-attrs/ops/concat_attrs.h"

namespace FlexFlow {
ConcatAttrs::ConcatAttrs(::FlexFlow::ff_dim_t const &axis,
                         int const &num_inputs)
    : axis(axis), num_inputs(num_inputs) {}
bool ConcatAttrs::operator==(ConcatAttrs const &other) const {
  return std::tie(this->axis, this->num_inputs) ==
         std::tie(other.axis, other.num_inputs);
}
bool ConcatAttrs::operator!=(ConcatAttrs const &other) const {
  return std::tie(this->axis, this->num_inputs) !=
         std::tie(other.axis, other.num_inputs);
}
bool ConcatAttrs::operator<(ConcatAttrs const &other) const {
  return std::tie(this->axis, this->num_inputs) <
         std::tie(other.axis, other.num_inputs);
}
bool ConcatAttrs::operator>(ConcatAttrs const &other) const {
  return std::tie(this->axis, this->num_inputs) >
         std::tie(other.axis, other.num_inputs);
}
bool ConcatAttrs::operator<=(ConcatAttrs const &other) const {
  return std::tie(this->axis, this->num_inputs) <=
         std::tie(other.axis, other.num_inputs);
}
bool ConcatAttrs::operator>=(ConcatAttrs const &other) const {
  return std::tie(this->axis, this->num_inputs) >=
         std::tie(other.axis, other.num_inputs);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::ConcatAttrs>::operator()(
    FlexFlow::ConcatAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::ff_dim_t>{}(x.axis) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^= std::hash<int>{}(x.num_inputs) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::ConcatAttrs
    adl_serializer<FlexFlow::ConcatAttrs>::from_json(json const &j) {
  return {j.at("axis").template get<::FlexFlow::ff_dim_t>(),
          j.at("num_inputs").template get<int>()};
}
void adl_serializer<FlexFlow::ConcatAttrs>::to_json(
    json &j, FlexFlow::ConcatAttrs const &v) {
  j["__type"] = "ConcatAttrs";
  j["axis"] = v.axis;
  j["num_inputs"] = v.num_inputs;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::ConcatAttrs> Arbitrary<FlexFlow::ConcatAttrs>::arbitrary() {
  return gen::construct<FlexFlow::ConcatAttrs>(
      gen::arbitrary<::FlexFlow::ff_dim_t>(), gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(ConcatAttrs const &x) {
  std::ostringstream oss;
  oss << "<ConcatAttrs";
  oss << " axis=" << x.axis;
  oss << " num_inputs=" << x.num_inputs;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ConcatAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
