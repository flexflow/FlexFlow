// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/regularizer_attrs.variant.toml
/* proj-data
{
  "generated_from": "ea060a8ab344c9772102f084903883ea"
}
*/

#include "op-attrs/regularizer_attrs.dtg.h"

#include "fmt/format.h"
#include <sstream>
#include <stdexcept>

namespace FlexFlow {
RegularizerAttrs::RegularizerAttrs(::FlexFlow::L1RegularizerAttrs const &v)
    : raw_variant(v) {}
RegularizerAttrs::RegularizerAttrs(::FlexFlow::L2RegularizerAttrs const &v)
    : raw_variant(v) {}
bool RegularizerAttrs::operator==(RegularizerAttrs const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool RegularizerAttrs::operator!=(RegularizerAttrs const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool RegularizerAttrs::operator<(RegularizerAttrs const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool RegularizerAttrs::operator>(RegularizerAttrs const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool RegularizerAttrs::operator<=(RegularizerAttrs const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool RegularizerAttrs::operator>=(RegularizerAttrs const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::RegularizerAttrs>::operator()(
    ::FlexFlow::RegularizerAttrs const &x) const {
  return std::hash<std::variant<::FlexFlow::L1RegularizerAttrs,
                                ::FlexFlow::L2RegularizerAttrs>>{}(
      x.raw_variant);
}
} // namespace std
namespace nlohmann {
::FlexFlow::RegularizerAttrs
    adl_serializer<::FlexFlow::RegularizerAttrs>::from_json(json const &j) {
  std::string key = j.at("type").template get<std::string>();
  if (key == "l1") {
    return ::FlexFlow::RegularizerAttrs{
        j.at("value").template get<::FlexFlow::L1RegularizerAttrs>()};
  } else if (key == "l2") {
    return ::FlexFlow::RegularizerAttrs{
        j.at("value").template get<::FlexFlow::L2RegularizerAttrs>()};
  } else {
    throw std::runtime_error(fmt::format("Unknown type key {}", key));
  }
}
void adl_serializer<::FlexFlow::RegularizerAttrs>::to_json(
    json &j, ::FlexFlow::RegularizerAttrs const &x) {
  j["__type"] = "RegularizerAttrs";
  switch (x.index()) {
    case 0: {
      j["type"] = "l1";
      j["value"] = x.get<::FlexFlow::L1RegularizerAttrs>();
      break;
    }
    case 1: {
      j["type"] = "l2";
      j["value"] = x.get<::FlexFlow::L2RegularizerAttrs>();
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type RegularizerAttrs", x.index()));
    }
  }
}
} // namespace nlohmann
namespace rc {
Gen<::FlexFlow::RegularizerAttrs>
    Arbitrary<::FlexFlow::RegularizerAttrs>::arbitrary() {
  return gen::oneOf(gen::construct<::FlexFlow::RegularizerAttrs>(
                        gen::arbitrary<::FlexFlow::L1RegularizerAttrs>()),
                    gen::construct<::FlexFlow::RegularizerAttrs>(
                        gen::arbitrary<::FlexFlow::L2RegularizerAttrs>()));
}
} // namespace rc
namespace FlexFlow {
std::string format_as(::FlexFlow::RegularizerAttrs const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<RegularizerAttrs l1=" << x.get<::FlexFlow::L1RegularizerAttrs>()
          << ">";
      break;
    }
    case 1: {
      oss << "<RegularizerAttrs l2=" << x.get<::FlexFlow::L2RegularizerAttrs>()
          << ">";
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type RegularizerAttrs", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::RegularizerAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
