// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/activation.enum.toml
/* proj-data
{
  "generated_from": "2b0d2e3e825732838aa5be99f2f0e6df"
}
*/

#include "op-attrs/activation.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::Activation>::operator()(FlexFlow::Activation x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(Activation x) {
  switch (x) {
    case Activation::RELU:
      return "RELU";
    case Activation::SIGMOID:
      return "SIGMOID";
    case Activation::TANH:
      return "TANH";
    case Activation::GELU:
      return "GELU";
    default:
      std::ostringstream oss;
      oss << "Unknown Activation value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, Activation x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, Activation x) {
  switch (x) {
    case Activation::RELU:
      j = "RELU";
      break;
    case Activation::SIGMOID:
      j = "SIGMOID";
      break;
    case Activation::TANH:
      j = "TANH";
      break;
    case Activation::GELU:
      j = "GELU";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown Activation value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, Activation &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "RELU") {
    x = Activation::RELU;
  } else if (as_str == "SIGMOID") {
    x = Activation::SIGMOID;
  } else if (as_str == "TANH") {
    x = Activation::TANH;
  } else if (as_str == "GELU") {
    x = Activation::GELU;
  } else {
    std::ostringstream oss;
    oss << "Unknown Activation value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::Activation> Arbitrary<FlexFlow::Activation>::arbitrary() {
  return gen::element<FlexFlow::Activation>(FlexFlow::Activation::RELU,
                                            FlexFlow::Activation::SIGMOID,
                                            FlexFlow::Activation::TANH,
                                            FlexFlow::Activation::GELU);
}
} // namespace rc
