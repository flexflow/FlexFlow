// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_dim.variant.toml
/* proj-data
{
  "generated_from": "f382ff547aae62777e5091f00d034d84"
}
*/

#include "op-attrs/parallel_dim.dtg.h"

#include "fmt/format.h"
#include <sstream>
#include <stdexcept>

namespace FlexFlow {
ParallelDim::ParallelDim(::FlexFlow::ShardParallelDim const &v)
    : raw_variant(v) {}
ParallelDim::ParallelDim(::FlexFlow::ReplicaParallelDim const &v)
    : raw_variant(v) {}
bool ParallelDim::operator==(ParallelDim const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool ParallelDim::operator!=(ParallelDim const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool ParallelDim::operator<(ParallelDim const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool ParallelDim::operator>(ParallelDim const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool ParallelDim::operator<=(ParallelDim const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool ParallelDim::operator>=(ParallelDim const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::ParallelDim>::operator()(
    ::FlexFlow::ParallelDim const &x) const {
  return std::hash<std::variant<::FlexFlow::ShardParallelDim,
                                ::FlexFlow::ReplicaParallelDim>>{}(
      x.raw_variant);
}
} // namespace std
namespace nlohmann {
::FlexFlow::ParallelDim
    adl_serializer<::FlexFlow::ParallelDim>::from_json(json const &j) {
  std::string key = j.at("type").template get<std::string>();
  if (key == "shard_dim") {
    return ::FlexFlow::ParallelDim{
        j.at("value").template get<::FlexFlow::ShardParallelDim>()};
  } else if (key == "replica_dim") {
    return ::FlexFlow::ParallelDim{
        j.at("value").template get<::FlexFlow::ReplicaParallelDim>()};
  } else {
    throw std::runtime_error(fmt::format("Unknown type key {}", key));
  }
}
void adl_serializer<::FlexFlow::ParallelDim>::to_json(
    json &j, ::FlexFlow::ParallelDim const &x) {
  j["__type"] = "ParallelDim";
  switch (x.index()) {
    case 0: {
      j["type"] = "shard_dim";
      j["value"] = x.get<::FlexFlow::ShardParallelDim>();
      break;
    }
    case 1: {
      j["type"] = "replica_dim";
      j["value"] = x.get<::FlexFlow::ReplicaParallelDim>();
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type ParallelDim", x.index()));
    }
  }
}
} // namespace nlohmann
namespace rc {
Gen<::FlexFlow::ParallelDim> Arbitrary<::FlexFlow::ParallelDim>::arbitrary() {
  return gen::oneOf(gen::construct<::FlexFlow::ParallelDim>(
                        gen::arbitrary<::FlexFlow::ShardParallelDim>()),
                    gen::construct<::FlexFlow::ParallelDim>(
                        gen::arbitrary<::FlexFlow::ReplicaParallelDim>()));
}
} // namespace rc
namespace FlexFlow {
std::string format_as(::FlexFlow::ParallelDim const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<ParallelDim shard_dim=" << x.get<::FlexFlow::ShardParallelDim>()
          << ">";
      break;
    }
    case 1: {
      oss << "<ParallelDim replica_dim="
          << x.get<::FlexFlow::ReplicaParallelDim>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type ParallelDim", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ::FlexFlow::ParallelDim const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
