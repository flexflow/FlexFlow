// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_tensor_shape/discard_copy_degree.struct.toml
/* proj-data
{
  "generated_from": "e4677d1fb25d3833570ee567f5659914"
}
*/

#include "op-attrs/parallel_tensor_shape/discard_copy_degree.dtg.h"

#include <sstream>

namespace FlexFlow {
DiscardCopyDegree::DiscardCopyDegree(int const &value) : value(value) {}
bool DiscardCopyDegree::operator==(DiscardCopyDegree const &other) const {
  return std::tie(this->value) == std::tie(other.value);
}
bool DiscardCopyDegree::operator!=(DiscardCopyDegree const &other) const {
  return std::tie(this->value) != std::tie(other.value);
}
bool DiscardCopyDegree::operator<(DiscardCopyDegree const &other) const {
  return std::tie(this->value) < std::tie(other.value);
}
bool DiscardCopyDegree::operator>(DiscardCopyDegree const &other) const {
  return std::tie(this->value) > std::tie(other.value);
}
bool DiscardCopyDegree::operator<=(DiscardCopyDegree const &other) const {
  return std::tie(this->value) <= std::tie(other.value);
}
bool DiscardCopyDegree::operator>=(DiscardCopyDegree const &other) const {
  return std::tie(this->value) >= std::tie(other.value);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::DiscardCopyDegree>::operator()(
    ::FlexFlow::DiscardCopyDegree const &x) const {
  size_t result = 0;
  result ^=
      std::hash<int>{}(x.value) + 0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::DiscardCopyDegree
    adl_serializer<::FlexFlow::DiscardCopyDegree>::from_json(json const &j) {
  return ::FlexFlow::DiscardCopyDegree{j.at("value").template get<int>()};
}
void adl_serializer<::FlexFlow::DiscardCopyDegree>::to_json(
    json &j, ::FlexFlow::DiscardCopyDegree const &v) {
  j["__type"] = "DiscardCopyDegree";
  j["value"] = v.value;
}
} // namespace nlohmann

namespace rc {
Gen<::FlexFlow::DiscardCopyDegree>
    Arbitrary<::FlexFlow::DiscardCopyDegree>::arbitrary() {
  return gen::construct<::FlexFlow::DiscardCopyDegree>(gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(DiscardCopyDegree const &x) {
  std::ostringstream oss;
  oss << "<DiscardCopyDegree";
  oss << " value=" << x.value;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, DiscardCopyDegree const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
