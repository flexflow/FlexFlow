// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_tensor_dims.struct.toml
/* proj-data
{
  "generated_from": "aec3b6b66e34be0d5ce3055822479430"
}
*/

#include "op-attrs/parallel_tensor_dims.dtg.h"

#include "op-attrs/dim_ordered.h"
#include "op-attrs/replica_parallel_dim_set.dtg.h"
#include "op-attrs/shard_parallel_dim.dtg.h"
#include "utils/fmt/pair.h"
#include "utils/fmt/unordered_map.h"
#include <sstream>
#include <unordered_map>

namespace FlexFlow {
ParallelTensorDims::ParallelTensorDims(
    ::FlexFlow::FFOrdered<::FlexFlow::ShardParallelDim> const &shard_dims,
    ::FlexFlow::ReplicaParallelDimSet const &replica_dims)
    : shard_dims(shard_dims), replica_dims(replica_dims) {}
bool ParallelTensorDims::operator==(ParallelTensorDims const &other) const {
  return std::tie(this->shard_dims, this->replica_dims) ==
         std::tie(other.shard_dims, other.replica_dims);
}
bool ParallelTensorDims::operator!=(ParallelTensorDims const &other) const {
  return std::tie(this->shard_dims, this->replica_dims) !=
         std::tie(other.shard_dims, other.replica_dims);
}
bool ParallelTensorDims::operator<(ParallelTensorDims const &other) const {
  return std::tie(this->shard_dims, this->replica_dims) <
         std::tie(other.shard_dims, other.replica_dims);
}
bool ParallelTensorDims::operator>(ParallelTensorDims const &other) const {
  return std::tie(this->shard_dims, this->replica_dims) >
         std::tie(other.shard_dims, other.replica_dims);
}
bool ParallelTensorDims::operator<=(ParallelTensorDims const &other) const {
  return std::tie(this->shard_dims, this->replica_dims) <=
         std::tie(other.shard_dims, other.replica_dims);
}
bool ParallelTensorDims::operator>=(ParallelTensorDims const &other) const {
  return std::tie(this->shard_dims, this->replica_dims) >=
         std::tie(other.shard_dims, other.replica_dims);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::ParallelTensorDims>::operator()(
    ::FlexFlow::ParallelTensorDims const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::FFOrdered<::FlexFlow::ShardParallelDim>>{}(
                x.shard_dims) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::ReplicaParallelDimSet>{}(x.replica_dims) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::ParallelTensorDims
    adl_serializer<::FlexFlow::ParallelTensorDims>::from_json(json const &j) {
  return ::FlexFlow::ParallelTensorDims{
      j.at("shard_dims")
          .template get<::FlexFlow::FFOrdered<::FlexFlow::ShardParallelDim>>(),
      j.at("replica_dims").template get<::FlexFlow::ReplicaParallelDimSet>()};
}
void adl_serializer<::FlexFlow::ParallelTensorDims>::to_json(
    json &j, ::FlexFlow::ParallelTensorDims const &v) {
  j["__type"] = "ParallelTensorDims";
  j["shard_dims"] = v.shard_dims;
  j["replica_dims"] = v.replica_dims;
}
} // namespace nlohmann

namespace rc {
Gen<::FlexFlow::ParallelTensorDims>
    Arbitrary<::FlexFlow::ParallelTensorDims>::arbitrary() {
  return gen::construct<::FlexFlow::ParallelTensorDims>(
      gen::arbitrary<::FlexFlow::FFOrdered<::FlexFlow::ShardParallelDim>>(),
      gen::arbitrary<::FlexFlow::ReplicaParallelDimSet>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(ParallelTensorDims const &x) {
  std::ostringstream oss;
  oss << "<ParallelTensorDims";
  oss << " shard_dims=" << x.shard_dims;
  oss << " replica_dims=" << x.replica_dims;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ParallelTensorDims const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
