// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/split_attrs.struct.toml

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_SPLIT_ATTRS_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_SPLIT_ATTRS_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/ff_dim.h"
#include "rapidcheck.h"
#include "utils/stack_vector.h"
#include <functional>
#include <ostream>
#include <sstream>
#include <tuple>

namespace FlexFlow {
struct SplitAttrs {
  SplitAttrs() = delete;
  SplitAttrs(::FlexFlow::stack_vector<int, MAX_NUM_OUTPUTS> const &splits,
             ::FlexFlow::ff_dim_t const &axis);

  bool operator==(SplitAttrs const &) const;
  bool operator!=(SplitAttrs const &) const;
  bool operator<(SplitAttrs const &) const;
  bool operator>(SplitAttrs const &) const;
  bool operator<=(SplitAttrs const &) const;
  bool operator>=(SplitAttrs const &) const;
  ::FlexFlow::stack_vector<int, MAX_NUM_OUTPUTS> splits;
  ::FlexFlow::ff_dim_t axis;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::SplitAttrs> {
  size_t operator()(FlexFlow::SplitAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::SplitAttrs> {
  static FlexFlow::SplitAttrs from_json(json const &);
  static void to_json(json &, FlexFlow::SplitAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::SplitAttrs> {
  static Gen<FlexFlow::SplitAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(SplitAttrs const &);
std::ostream &operator<<(std::ostream &, SplitAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_SPLIT_ATTRS_H
