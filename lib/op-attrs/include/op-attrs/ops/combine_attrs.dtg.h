// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/combine_attrs.struct.toml
/* proj-data
{
  "generated_from": "58fc5a388fd1a325ef4142094607e39a"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_COMBINE_ATTRS_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_COMBINE_ATTRS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/ff_dim.dtg.h"
#include "op-attrs/ff_dim.h"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct CombineAttrs {
  CombineAttrs() = delete;
  explicit CombineAttrs(::FlexFlow::ff_dim_t const &combine_dim,
                        int const &combine_degree);

  bool operator==(CombineAttrs const &) const;
  bool operator!=(CombineAttrs const &) const;
  bool operator<(CombineAttrs const &) const;
  bool operator>(CombineAttrs const &) const;
  bool operator<=(CombineAttrs const &) const;
  bool operator>=(CombineAttrs const &) const;
  ::FlexFlow::ff_dim_t combine_dim;
  int combine_degree;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::CombineAttrs> {
  size_t operator()(::FlexFlow::CombineAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::CombineAttrs> {
  static ::FlexFlow::CombineAttrs from_json(json const &);
  static void to_json(json &, ::FlexFlow::CombineAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<::FlexFlow::CombineAttrs> {
  static Gen<::FlexFlow::CombineAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(CombineAttrs const &);
std::ostream &operator<<(std::ostream &, CombineAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_COMBINE_ATTRS_DTG_H
