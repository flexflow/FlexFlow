// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/element_scalar_unary_attrs.struct.toml

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_ELEMENT_SCALAR_UNARY_ATTRS_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_ELEMENT_SCALAR_UNARY_ATTRS_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/operator_type.h"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <sstream>
#include <tuple>

namespace FlexFlow {
struct ElementScalarUnaryAttrs {
  ElementScalarUnaryAttrs() = delete;
  ElementScalarUnaryAttrs(::FlexFlow::OperatorType const &op_type,
                          float const &scalar);

  bool operator==(ElementScalarUnaryAttrs const &) const;
  bool operator!=(ElementScalarUnaryAttrs const &) const;
  bool operator<(ElementScalarUnaryAttrs const &) const;
  bool operator>(ElementScalarUnaryAttrs const &) const;
  bool operator<=(ElementScalarUnaryAttrs const &) const;
  bool operator>=(ElementScalarUnaryAttrs const &) const;
  ::FlexFlow::OperatorType op_type;
  float scalar;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::ElementScalarUnaryAttrs> {
  size_t operator()(FlexFlow::ElementScalarUnaryAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::ElementScalarUnaryAttrs> {
  static FlexFlow::ElementScalarUnaryAttrs from_json(json const &);
  static void to_json(json &, FlexFlow::ElementScalarUnaryAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::ElementScalarUnaryAttrs> {
  static Gen<FlexFlow::ElementScalarUnaryAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(ElementScalarUnaryAttrs const &);
std::ostream &operator<<(std::ostream &, ElementScalarUnaryAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_ELEMENT_SCALAR_UNARY_ATTRS_H
