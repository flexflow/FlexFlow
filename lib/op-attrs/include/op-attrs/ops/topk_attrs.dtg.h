// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/topk_attrs.struct.toml
/* proj-data
{
  "generated_from": "c1be9dc2acafc58690713e650663cc93"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_TOPK_ATTRS_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_TOPK_ATTRS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct TopKAttrs {
  TopKAttrs() = delete;
  TopKAttrs(int const &k, bool const &sorted);

  bool operator==(TopKAttrs const &) const;
  bool operator!=(TopKAttrs const &) const;
  bool operator<(TopKAttrs const &) const;
  bool operator>(TopKAttrs const &) const;
  bool operator<=(TopKAttrs const &) const;
  bool operator>=(TopKAttrs const &) const;
  int k;
  bool sorted;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::TopKAttrs> {
  size_t operator()(FlexFlow::TopKAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::TopKAttrs> {
  static FlexFlow::TopKAttrs from_json(json const &);
  static void to_json(json &, FlexFlow::TopKAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::TopKAttrs> {
  static Gen<FlexFlow::TopKAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(TopKAttrs const &);
std::ostream &operator<<(std::ostream &, TopKAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_TOPK_ATTRS_DTG_H
