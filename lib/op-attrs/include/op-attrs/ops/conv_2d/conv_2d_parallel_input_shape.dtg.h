// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/conv_2d/conv_2d_parallel_input_shape.struct.toml
/* proj-data
{
  "generated_from": "d80394bdc90f843372760310b6d17a22"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_CONV_2D_CONV_2D_PARALLEL_INPUT_SHAPE_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_CONV_2D_CONV_2D_PARALLEL_INPUT_SHAPE_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/datatype.dtg.h"
#include "op-attrs/shard_parallel_dim.dtg.h"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct Conv2DParallelInputShape {
  Conv2DParallelInputShape() = delete;
  explicit Conv2DParallelInputShape(
      ::FlexFlow::ShardParallelDim const &sample_dim,
      ::FlexFlow::ShardParallelDim const &channel_dim,
      ::FlexFlow::ShardParallelDim const &height_dim,
      ::FlexFlow::ShardParallelDim const &width_dim,
      int const &sum_reduction_degree,
      int const &discard_copy_reduction_degree,
      ::FlexFlow::DataType const &datatype);

  bool operator==(Conv2DParallelInputShape const &) const;
  bool operator!=(Conv2DParallelInputShape const &) const;
  bool operator<(Conv2DParallelInputShape const &) const;
  bool operator>(Conv2DParallelInputShape const &) const;
  bool operator<=(Conv2DParallelInputShape const &) const;
  bool operator>=(Conv2DParallelInputShape const &) const;
  ::FlexFlow::ShardParallelDim sample_dim;
  ::FlexFlow::ShardParallelDim channel_dim;
  ::FlexFlow::ShardParallelDim height_dim;
  ::FlexFlow::ShardParallelDim width_dim;
  int sum_reduction_degree;
  int discard_copy_reduction_degree;
  ::FlexFlow::DataType datatype;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::Conv2DParallelInputShape> {
  size_t operator()(::FlexFlow::Conv2DParallelInputShape const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::Conv2DParallelInputShape> {
  static ::FlexFlow::Conv2DParallelInputShape from_json(json const &);
  static void to_json(json &, ::FlexFlow::Conv2DParallelInputShape const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<::FlexFlow::Conv2DParallelInputShape> {
  static Gen<::FlexFlow::Conv2DParallelInputShape> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(Conv2DParallelInputShape const &);
std::ostream &operator<<(std::ostream &, Conv2DParallelInputShape const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_CONV_2D_CONV_2D_PARALLEL_INPUT_SHAPE_DTG_H
