// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/ops/pool_2d_attrs.struct.toml
/* proj-data
{
  "generated_from": "03aeafe335f68ff831e3e73a77f45caf"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_POOL_2D_ATTRS_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_POOL_2D_ATTRS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/activation.dtg.h"
#include "op-attrs/pool_op.dtg.h"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct Pool2DAttrs {
  Pool2DAttrs() = delete;
  explicit Pool2DAttrs(int const &kernel_h,
                       int const &kernel_w,
                       int const &stride_h,
                       int const &stride_w,
                       int const &padding_h,
                       int const &padding_w,
                       ::FlexFlow::PoolOp const &pool_type,
                       ::FlexFlow::Activation const &activation);

  bool operator==(Pool2DAttrs const &) const;
  bool operator!=(Pool2DAttrs const &) const;
  bool operator<(Pool2DAttrs const &) const;
  bool operator>(Pool2DAttrs const &) const;
  bool operator<=(Pool2DAttrs const &) const;
  bool operator>=(Pool2DAttrs const &) const;
  int kernel_h;
  int kernel_w;
  int stride_h;
  int stride_w;
  int padding_h;
  int padding_w;
  ::FlexFlow::PoolOp pool_type;
  ::FlexFlow::Activation activation;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::Pool2DAttrs> {
  size_t operator()(::FlexFlow::Pool2DAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::Pool2DAttrs> {
  static ::FlexFlow::Pool2DAttrs from_json(json const &);
  static void to_json(json &, ::FlexFlow::Pool2DAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<::FlexFlow::Pool2DAttrs> {
  static Gen<::FlexFlow::Pool2DAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(Pool2DAttrs const &);
std::ostream &operator<<(std::ostream &, Pool2DAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_OPS_POOL_2D_ATTRS_DTG_H
