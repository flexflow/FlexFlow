// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/regularizer_attrs.variant.toml
/* proj-data
{
  "generated_from": "ea060a8ab344c9772102f084903883ea"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_REGULARIZER_ATTRS_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_REGULARIZER_ATTRS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/l1_regularizer_attrs.dtg.h"
#include "op-attrs/l2_regularizer_attrs.dtg.h"
#include "rapidcheck.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct RegularizerAttrs {
  RegularizerAttrs() = delete;
  explicit RegularizerAttrs(::FlexFlow::L1RegularizerAttrs const &);
  explicit RegularizerAttrs(::FlexFlow::L2RegularizerAttrs const &);
  template <typename T>
  static constexpr bool IsPartOfRegularizerAttrs_v =
      std::is_same_v<T, ::FlexFlow::L1RegularizerAttrs> ||
      std::is_same_v<T, ::FlexFlow::L2RegularizerAttrs>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::L1RegularizerAttrs>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::L2RegularizerAttrs>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type RegularizerAttrs", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::L1RegularizerAttrs>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::L2RegularizerAttrs>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type RegularizerAttrs", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(IsPartOfRegularizerAttrs_v<T>,
                  "RegularizerAttrs::has() expected one of "
                  "[::FlexFlow::L1RegularizerAttrs, "
                  "::FlexFlow::L2RegularizerAttrs], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(IsPartOfRegularizerAttrs_v<T>,
                  "RegularizerAttrs::get() expected one of "
                  "[::FlexFlow::L1RegularizerAttrs, "
                  "::FlexFlow::L2RegularizerAttrs], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(IsPartOfRegularizerAttrs_v<T>,
                  "RegularizerAttrs::get() expected one of "
                  "[::FlexFlow::L1RegularizerAttrs, "
                  "::FlexFlow::L2RegularizerAttrs], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(RegularizerAttrs const &) const;
  bool operator!=(RegularizerAttrs const &) const;
  bool operator<(RegularizerAttrs const &) const;
  bool operator>(RegularizerAttrs const &) const;
  bool operator<=(RegularizerAttrs const &) const;
  bool operator>=(RegularizerAttrs const &) const;
  std::variant<::FlexFlow::L1RegularizerAttrs, ::FlexFlow::L2RegularizerAttrs>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::RegularizerAttrs> {
  size_t operator()(::FlexFlow::RegularizerAttrs const &) const;
};
} // namespace std
namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::RegularizerAttrs> {
  static ::FlexFlow::RegularizerAttrs from_json(json const &);
  static void to_json(json &, ::FlexFlow::RegularizerAttrs const &);
};
} // namespace nlohmann
namespace rc {
template <>
struct Arbitrary<::FlexFlow::RegularizerAttrs> {
  static Gen<::FlexFlow::RegularizerAttrs> arbitrary();
};
} // namespace rc
namespace FlexFlow {
std::string format_as(::FlexFlow::RegularizerAttrs const &);
std::ostream &operator<<(std::ostream &, ::FlexFlow::RegularizerAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_REGULARIZER_ATTRS_DTG_H
