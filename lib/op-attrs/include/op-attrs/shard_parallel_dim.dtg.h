// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/shard_parallel_dim.struct.toml
/* proj-data
{
  "generated_from": "18e074f80556d90b9b27d6515bbf9071"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_SHARD_PARALLEL_DIM_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_SHARD_PARALLEL_DIM_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct ShardParallelDim {
  ShardParallelDim() = delete;
  ShardParallelDim(size_t const &size, int const &degree);

  bool operator==(ShardParallelDim const &) const;
  bool operator!=(ShardParallelDim const &) const;
  bool operator<(ShardParallelDim const &) const;
  bool operator>(ShardParallelDim const &) const;
  bool operator<=(ShardParallelDim const &) const;
  bool operator>=(ShardParallelDim const &) const;
  size_t size;
  int degree;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::ShardParallelDim> {
  size_t operator()(FlexFlow::ShardParallelDim const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::ShardParallelDim> {
  static FlexFlow::ShardParallelDim from_json(json const &);
  static void to_json(json &, FlexFlow::ShardParallelDim const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::ShardParallelDim> {
  static Gen<FlexFlow::ShardParallelDim> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(ShardParallelDim const &);
std::ostream &operator<<(std::ostream &, ShardParallelDim const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_SHARD_PARALLEL_DIM_DTG_H
