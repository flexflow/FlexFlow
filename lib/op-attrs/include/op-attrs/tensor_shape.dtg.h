// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/tensor_shape.struct.toml
/* proj-data
{
  "generated_from": "ef6fa5088b89d6da4dc8bddf0a6d3294"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_TENSOR_SHAPE_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_TENSOR_SHAPE_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/datatype.dtg.h"
#include "op-attrs/tensor_dims.dtg.h"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct TensorShape {
  TensorShape() = delete;
  explicit TensorShape(::FlexFlow::TensorDims const &dims,
                       ::FlexFlow::DataType const &data_type);

  bool operator==(TensorShape const &) const;
  bool operator!=(TensorShape const &) const;
  bool operator<(TensorShape const &) const;
  bool operator>(TensorShape const &) const;
  bool operator<=(TensorShape const &) const;
  bool operator>=(TensorShape const &) const;
  ::FlexFlow::TensorDims dims;
  ::FlexFlow::DataType data_type;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<::FlexFlow::TensorShape> {
  size_t operator()(::FlexFlow::TensorShape const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::TensorShape> {
  static ::FlexFlow::TensorShape from_json(json const &);
  static void to_json(json &, ::FlexFlow::TensorShape const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<::FlexFlow::TensorShape> {
  static Gen<::FlexFlow::TensorShape> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(TensorShape const &);
std::ostream &operator<<(std::ostream &, TensorShape const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_TENSOR_SHAPE_DTG_H
