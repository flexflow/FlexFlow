// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/l2_regularizer_attrs.struct.toml
/* proj-data
{
  "generated_from": "c4f182e547ab6f0d5613e7eeb95d438e"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_L2_REGULARIZER_ATTRS_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_L2_REGULARIZER_ATTRS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct L2RegularizerAttrs {
  L2RegularizerAttrs() = delete;
  L2RegularizerAttrs(float const &lambda);

  bool operator==(L2RegularizerAttrs const &) const;
  bool operator!=(L2RegularizerAttrs const &) const;
  bool operator<(L2RegularizerAttrs const &) const;
  bool operator>(L2RegularizerAttrs const &) const;
  bool operator<=(L2RegularizerAttrs const &) const;
  bool operator>=(L2RegularizerAttrs const &) const;
  float lambda;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::L2RegularizerAttrs> {
  size_t operator()(FlexFlow::L2RegularizerAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::L2RegularizerAttrs> {
  static FlexFlow::L2RegularizerAttrs from_json(json const &);
  static void to_json(json &, FlexFlow::L2RegularizerAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::L2RegularizerAttrs> {
  static Gen<FlexFlow::L2RegularizerAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(L2RegularizerAttrs const &);
std::ostream &operator<<(std::ostream &, L2RegularizerAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_L2_REGULARIZER_ATTRS_DTG_H
