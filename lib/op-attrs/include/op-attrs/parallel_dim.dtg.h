// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_dim.variant.toml
/* proj-data
{
  "generated_from": "f382ff547aae62777e5091f00d034d84"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_DIM_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_DIM_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/replica_parallel_dim.dtg.h"
#include "op-attrs/shard_parallel_dim.dtg.h"
#include "rapidcheck.h"
#include <cstddef>
#include <functional>
#include <ostream>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct ParallelDim {
  ParallelDim() = delete;
  explicit ParallelDim(::FlexFlow::ShardParallelDim const &);
  explicit ParallelDim(::FlexFlow::ReplicaParallelDim const &);
  template <typename T>
  static constexpr bool IsPartOfParallelDim_v =
      std::is_same_v<T, ::FlexFlow::ShardParallelDim> ||
      std::is_same_v<T, ::FlexFlow::ReplicaParallelDim>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::ShardParallelDim>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::ReplicaParallelDim>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type ParallelDim", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::ShardParallelDim>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<::FlexFlow::ReplicaParallelDim>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type ParallelDim", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(
        IsPartOfParallelDim_v<T>,
        "ParallelDim::has() expected one of [::FlexFlow::ShardParallelDim, "
        "::FlexFlow::ReplicaParallelDim], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(
        IsPartOfParallelDim_v<T>,
        "ParallelDim::get() expected one of [::FlexFlow::ShardParallelDim, "
        "::FlexFlow::ReplicaParallelDim], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(
        IsPartOfParallelDim_v<T>,
        "ParallelDim::get() expected one of [::FlexFlow::ShardParallelDim, "
        "::FlexFlow::ReplicaParallelDim], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(ParallelDim const &) const;
  bool operator!=(ParallelDim const &) const;
  bool operator<(ParallelDim const &) const;
  bool operator>(ParallelDim const &) const;
  bool operator<=(ParallelDim const &) const;
  bool operator>=(ParallelDim const &) const;
  std::variant<::FlexFlow::ShardParallelDim, ::FlexFlow::ReplicaParallelDim>
      raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::ParallelDim> {
  size_t operator()(::FlexFlow::ParallelDim const &) const;
};
} // namespace std
namespace nlohmann {
template <>
struct adl_serializer<::FlexFlow::ParallelDim> {
  static ::FlexFlow::ParallelDim from_json(json const &);
  static void to_json(json &, ::FlexFlow::ParallelDim const &);
};
} // namespace nlohmann
namespace rc {
template <>
struct Arbitrary<::FlexFlow::ParallelDim> {
  static Gen<::FlexFlow::ParallelDim> arbitrary();
};
} // namespace rc
namespace FlexFlow {
std::string format_as(::FlexFlow::ParallelDim const &);
std::ostream &operator<<(std::ostream &, ::FlexFlow::ParallelDim const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_DIM_DTG_H
