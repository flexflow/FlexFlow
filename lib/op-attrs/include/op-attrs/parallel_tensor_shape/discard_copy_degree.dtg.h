// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/op-attrs/include/op-attrs/parallel_tensor_shape/discard_copy_degree.struct.toml
/* proj-data
{
  "generated_from": "e4677d1fb25d3833570ee567f5659914"
}
*/

#ifndef _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_TENSOR_SHAPE_DISCARD_COPY_DEGREE_DTG_H
#define _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_TENSOR_SHAPE_DISCARD_COPY_DEGREE_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct DiscardCopyDegree {
  DiscardCopyDegree() = delete;
  DiscardCopyDegree(int const &value);

  bool operator==(DiscardCopyDegree const &) const;
  bool operator!=(DiscardCopyDegree const &) const;
  bool operator<(DiscardCopyDegree const &) const;
  bool operator>(DiscardCopyDegree const &) const;
  bool operator<=(DiscardCopyDegree const &) const;
  bool operator>=(DiscardCopyDegree const &) const;
  int value;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::DiscardCopyDegree> {
  size_t operator()(FlexFlow::DiscardCopyDegree const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::DiscardCopyDegree> {
  static FlexFlow::DiscardCopyDegree from_json(json const &);
  static void to_json(json &, FlexFlow::DiscardCopyDegree const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::DiscardCopyDegree> {
  static Gen<FlexFlow::DiscardCopyDegree> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(DiscardCopyDegree const &);
std::ostream &operator<<(std::ostream &, DiscardCopyDegree const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_OP_ATTRS_INCLUDE_OP_ATTRS_PARALLEL_TENSOR_SHAPE_DISCARD_COPY_DEGREE_DTG_H
