// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/gpu_id_t.struct.toml
/* proj-data
{
  "generated_from": "022355e43f43141d332be50ea3080ee2"
}
*/

#ifndef _FLEXFLOW_LIB_PCG_INCLUDE_PCG_GPU_ID_T_DTG_H
#define _FLEXFLOW_LIB_PCG_INCLUDE_PCG_GPU_ID_T_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct gpu_id_t {
  gpu_id_t() = delete;
  gpu_id_t(int const &gpu_index);

  bool operator==(gpu_id_t const &) const;
  bool operator!=(gpu_id_t const &) const;
  bool operator<(gpu_id_t const &) const;
  bool operator>(gpu_id_t const &) const;
  bool operator<=(gpu_id_t const &) const;
  bool operator>=(gpu_id_t const &) const;
  int gpu_index;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::gpu_id_t> {
  size_t operator()(FlexFlow::gpu_id_t const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::gpu_id_t> {
  static FlexFlow::gpu_id_t from_json(json const &);
  static void to_json(json &, FlexFlow::gpu_id_t const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::gpu_id_t> {
  static Gen<FlexFlow::gpu_id_t> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(gpu_id_t const &);
std::ostream &operator<<(std::ostream &, gpu_id_t const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_PCG_INCLUDE_PCG_GPU_ID_T_DTG_H
