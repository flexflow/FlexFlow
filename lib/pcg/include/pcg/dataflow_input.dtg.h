// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/dataflow_input.variant.toml
/* proj-data
{
  "generated_from": "d6a7f4570e36e257383529e9bf9390ec"
}
*/

#ifndef _FLEXFLOW_LIB_PCG_INCLUDE_PCG_DATAFLOW_INPUT_DTG_H
#define _FLEXFLOW_LIB_PCG_INCLUDE_PCG_DATAFLOW_INPUT_DTG_H

#include "utils/graph/multidiedge.h"
#include <cstddef>
#include <functional>
#include <type_traits>
#include <variant>

namespace FlexFlow {
struct DataflowInput {
  DataflowInput() = delete;
  explicit DataflowInput(::FlexFlow::MultiDiOutput const &);
  explicit DataflowInput(int const &);
  template <typename T>
  static constexpr bool IsPartOfDataflowInput_v =
      std::is_same_v<T, ::FlexFlow::MultiDiOutput> || std::is_same_v<T, int>;
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) const {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::MultiDiOutput>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<int>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type DataflowInput", this->index()));
      }
    }
  }
  template <typename ReturnType, typename Visitor>
  ReturnType visit(Visitor &&v) {
    switch (this->index()) {
      case 0: {
        ReturnType result = v(this->get<::FlexFlow::MultiDiOutput>());
        return result;
      }
      case 1: {
        ReturnType result = v(this->get<int>());
        return result;
      }
      default: {
        throw std::runtime_error(fmt::format(
            "Unknown index {} for type DataflowInput", this->index()));
      }
    }
  }
  template <typename T>
  bool has() const {
    static_assert(IsPartOfDataflowInput_v<T>,
                  "DataflowInput::has() expected one of "
                  "[::FlexFlow::MultiDiOutput, int], received T");
    return std::holds_alternative<T>(this->raw_variant);
  }
  template <typename T>
  T const &get() const {
    static_assert(IsPartOfDataflowInput_v<T>,
                  "DataflowInput::get() expected one of "
                  "[::FlexFlow::MultiDiOutput, int], received T");
    return std::get<T>(this->raw_variant);
  }
  template <typename T>
  T &get() {
    static_assert(IsPartOfDataflowInput_v<T>,
                  "DataflowInput::get() expected one of "
                  "[::FlexFlow::MultiDiOutput, int], received T");
    return std::get<T>(this->raw_variant);
  }
  size_t index() const {
    return this->raw_variant.index();
  }
  bool operator==(DataflowInput const &) const;
  bool operator!=(DataflowInput const &) const;
  bool operator<(DataflowInput const &) const;
  bool operator>(DataflowInput const &) const;
  bool operator<=(DataflowInput const &) const;
  bool operator>=(DataflowInput const &) const;
  std::variant<::FlexFlow::MultiDiOutput, int> raw_variant;
};
} // namespace FlexFlow
namespace std {
template <>
struct hash<::FlexFlow::DataflowInput> {
  size_t operator()(::FlexFlow::DataflowInput const &) const;
};
} // namespace std

#endif // _FLEXFLOW_LIB_PCG_INCLUDE_PCG_DATAFLOW_INPUT_DTG_H
