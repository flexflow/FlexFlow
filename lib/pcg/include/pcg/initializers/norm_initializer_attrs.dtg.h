// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/initializers/norm_initializer_attrs.struct.toml
/* proj-data
{
  "generated_from": "6843fc9ca02aea2b40e57dbc497f99ac"
}
*/

#ifndef _FLEXFLOW_LIB_PCG_INCLUDE_PCG_INITIALIZERS_NORM_INITIALIZER_ATTRS_DTG_H
#define _FLEXFLOW_LIB_PCG_INCLUDE_PCG_INITIALIZERS_NORM_INITIALIZER_ATTRS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "rapidcheck.h"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct NormInitializerAttrs {
  NormInitializerAttrs() = delete;
  NormInitializerAttrs(int const &seed, float const &mean, float const &stddev);

  bool operator==(NormInitializerAttrs const &) const;
  bool operator!=(NormInitializerAttrs const &) const;
  bool operator<(NormInitializerAttrs const &) const;
  bool operator>(NormInitializerAttrs const &) const;
  bool operator<=(NormInitializerAttrs const &) const;
  bool operator>=(NormInitializerAttrs const &) const;
  int seed;
  float mean;
  float stddev;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::NormInitializerAttrs> {
  size_t operator()(FlexFlow::NormInitializerAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::NormInitializerAttrs> {
  static FlexFlow::NormInitializerAttrs from_json(json const &);
  static void to_json(json &, FlexFlow::NormInitializerAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::NormInitializerAttrs> {
  static Gen<FlexFlow::NormInitializerAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(NormInitializerAttrs const &);
std::ostream &operator<<(std::ostream &, NormInitializerAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_PCG_INCLUDE_PCG_INITIALIZERS_NORM_INITIALIZER_ATTRS_DTG_H
