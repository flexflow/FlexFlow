// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/parallel_computation_graph/parallel_tensor_attrs.struct.toml
/* proj-data
{
  "generated_from": "3d641c90950f49a7bef664d0153c97f6"
}
*/

#ifndef _FLEXFLOW_LIB_PCG_INCLUDE_PCG_PARALLEL_COMPUTATION_GRAPH_PARALLEL_TENSOR_ATTRS_DTG_H
#define _FLEXFLOW_LIB_PCG_INCLUDE_PCG_PARALLEL_COMPUTATION_GRAPH_PARALLEL_TENSOR_ATTRS_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include "op-attrs/parallel_tensor_shape.dtg.h"
#include "op-attrs/param_sync.dtg.h"
#include "pcg/create_grad.dtg.h"
#include "pcg/initializer_attrs.dtg.h"
#include "rapidcheck.h"
#include <functional>
#include <optional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct ParallelTensorAttrs {
  ParallelTensorAttrs() = delete;
  ParallelTensorAttrs(
      ::FlexFlow::ParallelTensorShape const &shape,
      std::optional<::FlexFlow::ParamSync> const &sync_type,
      std::optional<::FlexFlow::InitializerAttrs> const &initializer,
      ::FlexFlow::CreateGrad const &create_gradients);

  bool operator==(ParallelTensorAttrs const &) const;
  bool operator!=(ParallelTensorAttrs const &) const;
  bool operator<(ParallelTensorAttrs const &) const;
  bool operator>(ParallelTensorAttrs const &) const;
  bool operator<=(ParallelTensorAttrs const &) const;
  bool operator>=(ParallelTensorAttrs const &) const;
  ::FlexFlow::ParallelTensorShape shape;
  std::optional<::FlexFlow::ParamSync> sync_type;
  std::optional<::FlexFlow::InitializerAttrs> initializer;
  ::FlexFlow::CreateGrad create_gradients;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::ParallelTensorAttrs> {
  size_t operator()(FlexFlow::ParallelTensorAttrs const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::ParallelTensorAttrs> {
  static FlexFlow::ParallelTensorAttrs from_json(json const &);
  static void to_json(json &, FlexFlow::ParallelTensorAttrs const &);
};
} // namespace nlohmann

namespace rc {
template <>
struct Arbitrary<FlexFlow::ParallelTensorAttrs> {
  static Gen<FlexFlow::ParallelTensorAttrs> arbitrary();
};
} // namespace rc

namespace FlexFlow {
std::string format_as(ParallelTensorAttrs const &);
std::ostream &operator<<(std::ostream &, ParallelTensorAttrs const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_PCG_INCLUDE_PCG_PARALLEL_COMPUTATION_GRAPH_PARALLEL_TENSOR_ATTRS_DTG_H
