// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/device_id_t.variant.toml
/* proj-data
{
  "generated_from": "85870050c742b0159775399ec2be67e3"
}
*/

#include "pcg/device_id_t.dtg.h"

#include "fmt/format.h"
#include <sstream>
#include <stdexcept>

namespace FlexFlow {
device_id_t::device_id_t(::FlexFlow::gpu_id_t const &v) : raw_variant(v) {}
device_id_t::device_id_t(::FlexFlow::cpu_id_t const &v) : raw_variant(v) {}
bool device_id_t::operator==(device_id_t const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool device_id_t::operator!=(device_id_t const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool device_id_t::operator<(device_id_t const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool device_id_t::operator>(device_id_t const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool device_id_t::operator<=(device_id_t const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool device_id_t::operator>=(device_id_t const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::device_id_t>::operator()(
    ::FlexFlow::device_id_t const &x) const {
  return std::hash<std::variant<::FlexFlow::gpu_id_t, ::FlexFlow::cpu_id_t>>{}(
      x.raw_variant);
}
} // namespace std
namespace nlohmann {
::FlexFlow::device_id_t
    adl_serializer<::FlexFlow::device_id_t>::from_json(json const &j) {
  std::string key = j.at("type").template get<std::string>();
  if (key == "gpu") {
    return ::FlexFlow::device_id_t{
        j.at("value").template get<::FlexFlow::gpu_id_t>()};
  } else if (key == "cpu") {
    return ::FlexFlow::device_id_t{
        j.at("value").template get<::FlexFlow::cpu_id_t>()};
  } else {
    throw std::runtime_error(fmt::format("Unknown type key {}", key));
  }
}
void adl_serializer<::FlexFlow::device_id_t>::to_json(
    json &j, ::FlexFlow::device_id_t const &x) {
  j["__type"] = "device_id_t";
  switch (x.index()) {
    case 0: {
      j["type"] = "gpu";
      j["value"] = x.get<::FlexFlow::gpu_id_t>();
      break;
    }
    case 1: {
      j["type"] = "cpu";
      j["value"] = x.get<::FlexFlow::cpu_id_t>();
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type device_id_t", x.index()));
    }
  }
}
} // namespace nlohmann
namespace FlexFlow {
std::string format_as(::FlexFlow::device_id_t const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<device_id_t gpu=" << x.get<::FlexFlow::gpu_id_t>() << ">";
      break;
    }
    case 1: {
      oss << "<device_id_t cpu=" << x.get<::FlexFlow::cpu_id_t>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type device_id_t", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ::FlexFlow::device_id_t const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
