// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/operator_guid_t.struct.toml
/* proj-data
{
  "generated_from": "348b5a610f4ff6f545884564ee9a1e6a"
}
*/

#include "pcg/operator_guid_t.dtg.h"

#include "utils/graph.h"
#include <sstream>

namespace FlexFlow {
operator_guid_t::operator_guid_t(::FlexFlow::Node const &raw_graph_node)
    : raw_graph_node(raw_graph_node) {}
bool operator_guid_t::operator==(operator_guid_t const &other) const {
  return std::tie(this->raw_graph_node) == std::tie(other.raw_graph_node);
}
bool operator_guid_t::operator!=(operator_guid_t const &other) const {
  return std::tie(this->raw_graph_node) != std::tie(other.raw_graph_node);
}
bool operator_guid_t::operator<(operator_guid_t const &other) const {
  return std::tie(this->raw_graph_node) < std::tie(other.raw_graph_node);
}
bool operator_guid_t::operator>(operator_guid_t const &other) const {
  return std::tie(this->raw_graph_node) > std::tie(other.raw_graph_node);
}
bool operator_guid_t::operator<=(operator_guid_t const &other) const {
  return std::tie(this->raw_graph_node) <= std::tie(other.raw_graph_node);
}
bool operator_guid_t::operator>=(operator_guid_t const &other) const {
  return std::tie(this->raw_graph_node) >= std::tie(other.raw_graph_node);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::operator_guid_t>::operator()(
    FlexFlow::operator_guid_t const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::Node>{}(x.raw_graph_node) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(operator_guid_t const &x) {
  std::ostringstream oss;
  oss << "<operator_guid_t";
  oss << " raw_graph_node=" << x.raw_graph_node;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, operator_guid_t const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
