// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/strided_rectangle_side.struct.toml
/* proj-data
{
  "generated_from": "b14fcf1e28c262d22b92fac691ede3d4"
}
*/

#include "pcg/strided_rectangle_side.dtg.h"

#include "pcg/num_points_t.dtg.h"
#include <sstream>

namespace FlexFlow {
StridedRectangleSide::StridedRectangleSide(
    ::FlexFlow::num_points_t const &num_points, int const &stride)
    : num_points(num_points), stride(stride) {}
bool StridedRectangleSide::operator==(StridedRectangleSide const &other) const {
  return std::tie(this->num_points, this->stride) ==
         std::tie(other.num_points, other.stride);
}
bool StridedRectangleSide::operator!=(StridedRectangleSide const &other) const {
  return std::tie(this->num_points, this->stride) !=
         std::tie(other.num_points, other.stride);
}
bool StridedRectangleSide::operator<(StridedRectangleSide const &other) const {
  return std::tie(this->num_points, this->stride) <
         std::tie(other.num_points, other.stride);
}
bool StridedRectangleSide::operator>(StridedRectangleSide const &other) const {
  return std::tie(this->num_points, this->stride) >
         std::tie(other.num_points, other.stride);
}
bool StridedRectangleSide::operator<=(StridedRectangleSide const &other) const {
  return std::tie(this->num_points, this->stride) <=
         std::tie(other.num_points, other.stride);
}
bool StridedRectangleSide::operator>=(StridedRectangleSide const &other) const {
  return std::tie(this->num_points, this->stride) >=
         std::tie(other.num_points, other.stride);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::StridedRectangleSide>::operator()(
    FlexFlow::StridedRectangleSide const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::num_points_t>{}(x.num_points) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^=
      std::hash<int>{}(x.stride) + 0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::StridedRectangleSide
    adl_serializer<FlexFlow::StridedRectangleSide>::from_json(json const &j) {
  return {j.at("num_points").template get<::FlexFlow::num_points_t>(),
          j.at("stride").template get<int>()};
}
void adl_serializer<FlexFlow::StridedRectangleSide>::to_json(
    json &j, FlexFlow::StridedRectangleSide const &v) {
  j["__type"] = "StridedRectangleSide";
  j["num_points"] = v.num_points;
  j["stride"] = v.stride;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::StridedRectangleSide>
    Arbitrary<FlexFlow::StridedRectangleSide>::arbitrary() {
  return gen::construct<FlexFlow::StridedRectangleSide>(
      gen::arbitrary<::FlexFlow::num_points_t>(), gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(StridedRectangleSide const &x) {
  std::ostringstream oss;
  oss << "<StridedRectangleSide";
  oss << " num_points=" << x.num_points;
  oss << " stride=" << x.stride;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, StridedRectangleSide const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
