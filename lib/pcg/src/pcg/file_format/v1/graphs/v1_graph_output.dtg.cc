// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/file_format/v1/graphs/v1_graph_output.struct.toml
/* proj-data
{
  "generated_from": "05ff8401c3d976ea2220899edb8dfe3a"
}
*/

#include "pcg/file_format/v1/graphs/v1_graph_output.dtg.h"

#include <sstream>

namespace FlexFlow {
V1GraphOutput::V1GraphOutput(size_t const &srcNode, size_t const &srcIdx)
    : srcNode(srcNode), srcIdx(srcIdx) {}
bool V1GraphOutput::operator==(V1GraphOutput const &other) const {
  return std::tie(this->srcNode, this->srcIdx) ==
         std::tie(other.srcNode, other.srcIdx);
}
bool V1GraphOutput::operator!=(V1GraphOutput const &other) const {
  return std::tie(this->srcNode, this->srcIdx) !=
         std::tie(other.srcNode, other.srcIdx);
}
bool V1GraphOutput::operator<(V1GraphOutput const &other) const {
  return std::tie(this->srcNode, this->srcIdx) <
         std::tie(other.srcNode, other.srcIdx);
}
bool V1GraphOutput::operator>(V1GraphOutput const &other) const {
  return std::tie(this->srcNode, this->srcIdx) >
         std::tie(other.srcNode, other.srcIdx);
}
bool V1GraphOutput::operator<=(V1GraphOutput const &other) const {
  return std::tie(this->srcNode, this->srcIdx) <=
         std::tie(other.srcNode, other.srcIdx);
}
bool V1GraphOutput::operator>=(V1GraphOutput const &other) const {
  return std::tie(this->srcNode, this->srcIdx) >=
         std::tie(other.srcNode, other.srcIdx);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::V1GraphOutput>::operator()(
    ::FlexFlow::V1GraphOutput const &x) const {
  size_t result = 0;
  result ^= std::hash<size_t>{}(x.srcNode) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.srcIdx) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::V1GraphOutput
    adl_serializer<::FlexFlow::V1GraphOutput>::from_json(json const &j) {
  return ::FlexFlow::V1GraphOutput{j.at("srcNode").template get<size_t>(),
                                   j.at("srcIdx").template get<size_t>()};
}
void adl_serializer<::FlexFlow::V1GraphOutput>::to_json(
    json &j, ::FlexFlow::V1GraphOutput const &v) {
  j["__type"] = "V1GraphOutput";
  j["srcNode"] = v.srcNode;
  j["srcIdx"] = v.srcIdx;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(V1GraphOutput const &x) {
  std::ostringstream oss;
  oss << "<V1GraphOutput";
  oss << " srcNode=" << x.srcNode;
  oss << " srcIdx=" << x.srcIdx;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, V1GraphOutput const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
