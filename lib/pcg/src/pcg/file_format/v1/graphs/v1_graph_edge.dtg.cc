// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/file_format/v1/graphs/v1_graph_edge.struct.toml
/* proj-data
{
  "generated_from": "865097b569b831af049343e933834329"
}
*/

#include "pcg/file_format/v1/graphs/v1_graph_edge.dtg.h"

#include <sstream>

namespace FlexFlow {
V1GraphEdge::V1GraphEdge(size_t const &srcNode,
                         size_t const &srcIdx,
                         size_t const &dstNode,
                         size_t const &dstIdx)
    : srcNode(srcNode), srcIdx(srcIdx), dstNode(dstNode), dstIdx(dstIdx) {}
bool V1GraphEdge::operator==(V1GraphEdge const &other) const {
  return std::tie(this->srcNode, this->srcIdx, this->dstNode, this->dstIdx) ==
         std::tie(other.srcNode, other.srcIdx, other.dstNode, other.dstIdx);
}
bool V1GraphEdge::operator!=(V1GraphEdge const &other) const {
  return std::tie(this->srcNode, this->srcIdx, this->dstNode, this->dstIdx) !=
         std::tie(other.srcNode, other.srcIdx, other.dstNode, other.dstIdx);
}
bool V1GraphEdge::operator<(V1GraphEdge const &other) const {
  return std::tie(this->srcNode, this->srcIdx, this->dstNode, this->dstIdx) <
         std::tie(other.srcNode, other.srcIdx, other.dstNode, other.dstIdx);
}
bool V1GraphEdge::operator>(V1GraphEdge const &other) const {
  return std::tie(this->srcNode, this->srcIdx, this->dstNode, this->dstIdx) >
         std::tie(other.srcNode, other.srcIdx, other.dstNode, other.dstIdx);
}
bool V1GraphEdge::operator<=(V1GraphEdge const &other) const {
  return std::tie(this->srcNode, this->srcIdx, this->dstNode, this->dstIdx) <=
         std::tie(other.srcNode, other.srcIdx, other.dstNode, other.dstIdx);
}
bool V1GraphEdge::operator>=(V1GraphEdge const &other) const {
  return std::tie(this->srcNode, this->srcIdx, this->dstNode, this->dstIdx) >=
         std::tie(other.srcNode, other.srcIdx, other.dstNode, other.dstIdx);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::V1GraphEdge>::operator()(
    ::FlexFlow::V1GraphEdge const &x) const {
  size_t result = 0;
  result ^= std::hash<size_t>{}(x.srcNode) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.srcIdx) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.dstNode) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<size_t>{}(x.dstIdx) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::V1GraphEdge
    adl_serializer<::FlexFlow::V1GraphEdge>::from_json(json const &j) {
  return ::FlexFlow::V1GraphEdge{j.at("srcNode").template get<size_t>(),
                                 j.at("srcIdx").template get<size_t>(),
                                 j.at("dstNode").template get<size_t>(),
                                 j.at("dstIdx").template get<size_t>()};
}
void adl_serializer<::FlexFlow::V1GraphEdge>::to_json(
    json &j, ::FlexFlow::V1GraphEdge const &v) {
  j["__type"] = "V1GraphEdge";
  j["srcNode"] = v.srcNode;
  j["srcIdx"] = v.srcIdx;
  j["dstNode"] = v.dstNode;
  j["dstIdx"] = v.dstIdx;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(V1GraphEdge const &x) {
  std::ostringstream oss;
  oss << "<V1GraphEdge";
  oss << " srcNode=" << x.srcNode;
  oss << " srcIdx=" << x.srcIdx;
  oss << " dstNode=" << x.dstNode;
  oss << " dstIdx=" << x.dstIdx;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, V1GraphEdge const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
