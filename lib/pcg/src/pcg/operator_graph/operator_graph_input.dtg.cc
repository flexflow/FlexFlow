// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/operator_graph/operator_graph_input.struct.toml
/* proj-data
{
  "generated_from": "57d9c9afc86f43049c6f035c74477afd"
}
*/

#include "pcg/operator_graph/operator_graph_input.dtg.h"

#include "utils/graph.h"
#include <sstream>

namespace FlexFlow {
OperatorGraphInput::OperatorGraphInput(::FlexFlow::Node const &node,
                                       int const &idx)
    : node(node), idx(idx) {}
bool OperatorGraphInput::operator==(OperatorGraphInput const &other) const {
  return std::tie(this->node, this->idx) == std::tie(other.node, other.idx);
}
bool OperatorGraphInput::operator!=(OperatorGraphInput const &other) const {
  return std::tie(this->node, this->idx) != std::tie(other.node, other.idx);
}
bool OperatorGraphInput::operator<(OperatorGraphInput const &other) const {
  return std::tie(this->node, this->idx) < std::tie(other.node, other.idx);
}
bool OperatorGraphInput::operator>(OperatorGraphInput const &other) const {
  return std::tie(this->node, this->idx) > std::tie(other.node, other.idx);
}
bool OperatorGraphInput::operator<=(OperatorGraphInput const &other) const {
  return std::tie(this->node, this->idx) <= std::tie(other.node, other.idx);
}
bool OperatorGraphInput::operator>=(OperatorGraphInput const &other) const {
  return std::tie(this->node, this->idx) >= std::tie(other.node, other.idx);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::OperatorGraphInput>::operator()(
    ::FlexFlow::OperatorGraphInput const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::Node>{}(x.node) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^=
      std::hash<int>{}(x.idx) + 0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace FlexFlow {
std::string format_as(OperatorGraphInput const &x) {
  std::ostringstream oss;
  oss << "<OperatorGraphInput";
  oss << " node=" << x.node;
  oss << " idx=" << x.idx;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, OperatorGraphInput const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
