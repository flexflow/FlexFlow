// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/parallel_computation_graph/parallel_layer_added_result.struct.toml
/* proj-data
{
  "generated_from": "cb4fa8a3a6319d9b7de628a58d08bfed"
}
*/

#include "pcg/parallel_computation_graph/parallel_layer_added_result.dtg.h"

#include "pcg/parallel_computation_graph/parallel_layer_guid_t.dtg.h"
#include "pcg/parallel_computation_graph/parallel_tensor_guid_t.dtg.h"
#include "utils/fmt/vector.h"
#include <sstream>
#include <vector>

namespace FlexFlow {
ParallelLayerAddedResult::ParallelLayerAddedResult(
    ::FlexFlow::parallel_layer_guid_t const &parallel_layer,
    std::vector<::FlexFlow::parallel_tensor_guid_t> const &outputs)
    : parallel_layer(parallel_layer), outputs(outputs) {}
bool ParallelLayerAddedResult::operator==(
    ParallelLayerAddedResult const &other) const {
  return std::tie(this->parallel_layer, this->outputs) ==
         std::tie(other.parallel_layer, other.outputs);
}
bool ParallelLayerAddedResult::operator!=(
    ParallelLayerAddedResult const &other) const {
  return std::tie(this->parallel_layer, this->outputs) !=
         std::tie(other.parallel_layer, other.outputs);
}
bool ParallelLayerAddedResult::operator<(
    ParallelLayerAddedResult const &other) const {
  return std::tie(this->parallel_layer, this->outputs) <
         std::tie(other.parallel_layer, other.outputs);
}
bool ParallelLayerAddedResult::operator>(
    ParallelLayerAddedResult const &other) const {
  return std::tie(this->parallel_layer, this->outputs) >
         std::tie(other.parallel_layer, other.outputs);
}
bool ParallelLayerAddedResult::operator<=(
    ParallelLayerAddedResult const &other) const {
  return std::tie(this->parallel_layer, this->outputs) <=
         std::tie(other.parallel_layer, other.outputs);
}
bool ParallelLayerAddedResult::operator>=(
    ParallelLayerAddedResult const &other) const {
  return std::tie(this->parallel_layer, this->outputs) >=
         std::tie(other.parallel_layer, other.outputs);
}
} // namespace FlexFlow

namespace FlexFlow {
std::string format_as(ParallelLayerAddedResult const &x) {
  std::ostringstream oss;
  oss << "<ParallelLayerAddedResult";
  oss << " parallel_layer=" << x.parallel_layer;
  oss << " outputs=" << x.outputs;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, ParallelLayerAddedResult const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
