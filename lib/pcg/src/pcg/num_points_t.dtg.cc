// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/num_points_t.struct.toml
/* proj-data
{
  "generated_from": "2a862b92055eda0508447d2f4df52f71"
}
*/

#include "pcg/num_points_t.dtg.h"

#include <sstream>

namespace FlexFlow {
num_points_t::num_points_t(int const &unwrapped) : unwrapped(unwrapped) {}
bool num_points_t::operator==(num_points_t const &other) const {
  return std::tie(this->unwrapped) == std::tie(other.unwrapped);
}
bool num_points_t::operator!=(num_points_t const &other) const {
  return std::tie(this->unwrapped) != std::tie(other.unwrapped);
}
bool num_points_t::operator<(num_points_t const &other) const {
  return std::tie(this->unwrapped) < std::tie(other.unwrapped);
}
bool num_points_t::operator>(num_points_t const &other) const {
  return std::tie(this->unwrapped) > std::tie(other.unwrapped);
}
bool num_points_t::operator<=(num_points_t const &other) const {
  return std::tie(this->unwrapped) <= std::tie(other.unwrapped);
}
bool num_points_t::operator>=(num_points_t const &other) const {
  return std::tie(this->unwrapped) >= std::tie(other.unwrapped);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::num_points_t>::operator()(
    FlexFlow::num_points_t const &x) const {
  size_t result = 0;
  result ^= std::hash<int>{}(x.unwrapped) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::num_points_t
    adl_serializer<FlexFlow::num_points_t>::from_json(json const &j) {
  return {j.at("unwrapped").template get<int>()};
}
void adl_serializer<FlexFlow::num_points_t>::to_json(
    json &j, FlexFlow::num_points_t const &v) {
  j["__type"] = "num_points_t";
  j["unwrapped"] = v.unwrapped;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::num_points_t> Arbitrary<FlexFlow::num_points_t>::arbitrary() {
  return gen::construct<FlexFlow::num_points_t>(gen::arbitrary<int>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(num_points_t const &x) {
  std::ostringstream oss;
  oss << "<num_points_t";
  oss << " unwrapped=" << x.unwrapped;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, num_points_t const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
