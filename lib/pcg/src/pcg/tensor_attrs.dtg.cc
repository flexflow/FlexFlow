// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/tensor_attrs.struct.toml
/* proj-data
{
  "generated_from": "545e84c03a34f24b89684feff5b81ad1"
}
*/

#include "pcg/tensor_attrs.dtg.h"

#include "op-attrs/param_sync.dtg.h"
#include "op-attrs/tensor_shape.dtg.h"
#include "pcg/create_grad.dtg.h"
#include "pcg/initializer_attrs.dtg.h"
#include <optional>
#include <sstream>

namespace FlexFlow {
TensorAttrs::TensorAttrs(
    ::FlexFlow::TensorShape const &shape,
    std::optional<::FlexFlow::InitializerAttrs> const &initializer,
    std::optional<::FlexFlow::ParamSync> const &sync_type,
    ::FlexFlow::CreateGrad const &create_gradients)
    : shape(shape), initializer(initializer), sync_type(sync_type),
      create_gradients(create_gradients) {}
bool TensorAttrs::operator==(TensorAttrs const &other) const {
  return std::tie(this->shape,
                  this->initializer,
                  this->sync_type,
                  this->create_gradients) == std::tie(other.shape,
                                                      other.initializer,
                                                      other.sync_type,
                                                      other.create_gradients);
}
bool TensorAttrs::operator!=(TensorAttrs const &other) const {
  return std::tie(this->shape,
                  this->initializer,
                  this->sync_type,
                  this->create_gradients) != std::tie(other.shape,
                                                      other.initializer,
                                                      other.sync_type,
                                                      other.create_gradients);
}
bool TensorAttrs::operator<(TensorAttrs const &other) const {
  return std::tie(this->shape,
                  this->initializer,
                  this->sync_type,
                  this->create_gradients) < std::tie(other.shape,
                                                     other.initializer,
                                                     other.sync_type,
                                                     other.create_gradients);
}
bool TensorAttrs::operator>(TensorAttrs const &other) const {
  return std::tie(this->shape,
                  this->initializer,
                  this->sync_type,
                  this->create_gradients) > std::tie(other.shape,
                                                     other.initializer,
                                                     other.sync_type,
                                                     other.create_gradients);
}
bool TensorAttrs::operator<=(TensorAttrs const &other) const {
  return std::tie(this->shape,
                  this->initializer,
                  this->sync_type,
                  this->create_gradients) <= std::tie(other.shape,
                                                      other.initializer,
                                                      other.sync_type,
                                                      other.create_gradients);
}
bool TensorAttrs::operator>=(TensorAttrs const &other) const {
  return std::tie(this->shape,
                  this->initializer,
                  this->sync_type,
                  this->create_gradients) >= std::tie(other.shape,
                                                      other.initializer,
                                                      other.sync_type,
                                                      other.create_gradients);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::TensorAttrs>::operator()(
    ::FlexFlow::TensorAttrs const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::TensorShape>{}(x.shape) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^=
      std::hash<std::optional<::FlexFlow::InitializerAttrs>>{}(x.initializer) +
      0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<std::optional<::FlexFlow::ParamSync>>{}(x.sync_type) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::CreateGrad>{}(x.create_gradients) +
            0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::TensorAttrs
    adl_serializer<::FlexFlow::TensorAttrs>::from_json(json const &j) {
  return ::FlexFlow::TensorAttrs{
      j.at("shape").template get<::FlexFlow::TensorShape>(),
      j.at("initializer")
          .template get<std::optional<::FlexFlow::InitializerAttrs>>(),
      j.at("sync_type").template get<std::optional<::FlexFlow::ParamSync>>(),
      j.at("create_gradients").template get<::FlexFlow::CreateGrad>()};
}
void adl_serializer<::FlexFlow::TensorAttrs>::to_json(
    json &j, ::FlexFlow::TensorAttrs const &v) {
  j["__type"] = "TensorAttrs";
  j["shape"] = v.shape;
  j["initializer"] = v.initializer;
  j["sync_type"] = v.sync_type;
  j["create_gradients"] = v.create_gradients;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(TensorAttrs const &x) {
  std::ostringstream oss;
  oss << "<TensorAttrs";
  oss << " shape=" << x.shape;
  oss << " initializer=" << x.initializer;
  oss << " sync_type=" << x.sync_type;
  oss << " create_gradients=" << x.create_gradients;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, TensorAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
