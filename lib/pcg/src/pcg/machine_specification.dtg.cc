// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/machine_specification.struct.toml
/* proj-data
{
  "generated_from": "72c3ae372af189d0c8bae74c2dbbc531"
}
*/

#include "pcg/machine_specification.dtg.h"

#include <sstream>

namespace FlexFlow {
MachineSpecification::MachineSpecification(int const &num_nodes,
                                           int const &num_cpus_per_node,
                                           int const &num_gpus_per_node,
                                           float const &inter_node_bandwidth,
                                           float const &intra_node_bandwidth)
    : num_nodes(num_nodes), num_cpus_per_node(num_cpus_per_node),
      num_gpus_per_node(num_gpus_per_node),
      inter_node_bandwidth(inter_node_bandwidth),
      intra_node_bandwidth(intra_node_bandwidth) {}
bool MachineSpecification::operator==(MachineSpecification const &other) const {
  return std::tie(this->num_nodes,
                  this->num_cpus_per_node,
                  this->num_gpus_per_node,
                  this->inter_node_bandwidth,
                  this->intra_node_bandwidth) ==
         std::tie(other.num_nodes,
                  other.num_cpus_per_node,
                  other.num_gpus_per_node,
                  other.inter_node_bandwidth,
                  other.intra_node_bandwidth);
}
bool MachineSpecification::operator!=(MachineSpecification const &other) const {
  return std::tie(this->num_nodes,
                  this->num_cpus_per_node,
                  this->num_gpus_per_node,
                  this->inter_node_bandwidth,
                  this->intra_node_bandwidth) !=
         std::tie(other.num_nodes,
                  other.num_cpus_per_node,
                  other.num_gpus_per_node,
                  other.inter_node_bandwidth,
                  other.intra_node_bandwidth);
}
bool MachineSpecification::operator<(MachineSpecification const &other) const {
  return std::tie(this->num_nodes,
                  this->num_cpus_per_node,
                  this->num_gpus_per_node,
                  this->inter_node_bandwidth,
                  this->intra_node_bandwidth) <
         std::tie(other.num_nodes,
                  other.num_cpus_per_node,
                  other.num_gpus_per_node,
                  other.inter_node_bandwidth,
                  other.intra_node_bandwidth);
}
bool MachineSpecification::operator>(MachineSpecification const &other) const {
  return std::tie(this->num_nodes,
                  this->num_cpus_per_node,
                  this->num_gpus_per_node,
                  this->inter_node_bandwidth,
                  this->intra_node_bandwidth) >
         std::tie(other.num_nodes,
                  other.num_cpus_per_node,
                  other.num_gpus_per_node,
                  other.inter_node_bandwidth,
                  other.intra_node_bandwidth);
}
bool MachineSpecification::operator<=(MachineSpecification const &other) const {
  return std::tie(this->num_nodes,
                  this->num_cpus_per_node,
                  this->num_gpus_per_node,
                  this->inter_node_bandwidth,
                  this->intra_node_bandwidth) <=
         std::tie(other.num_nodes,
                  other.num_cpus_per_node,
                  other.num_gpus_per_node,
                  other.inter_node_bandwidth,
                  other.intra_node_bandwidth);
}
bool MachineSpecification::operator>=(MachineSpecification const &other) const {
  return std::tie(this->num_nodes,
                  this->num_cpus_per_node,
                  this->num_gpus_per_node,
                  this->inter_node_bandwidth,
                  this->intra_node_bandwidth) >=
         std::tie(other.num_nodes,
                  other.num_cpus_per_node,
                  other.num_gpus_per_node,
                  other.inter_node_bandwidth,
                  other.intra_node_bandwidth);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::MachineSpecification>::operator()(
    ::FlexFlow::MachineSpecification const &x) const {
  size_t result = 0;
  result ^= std::hash<int>{}(x.num_nodes) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<int>{}(x.num_cpus_per_node) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<int>{}(x.num_gpus_per_node) + 0x9e3779b9 + (result << 6) +
            (result >> 2);
  result ^= std::hash<float>{}(x.inter_node_bandwidth) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^= std::hash<float>{}(x.intra_node_bandwidth) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::MachineSpecification
    adl_serializer<::FlexFlow::MachineSpecification>::from_json(json const &j) {
  return ::FlexFlow::MachineSpecification{
      j.at("num_nodes").template get<int>(),
      j.at("num_cpus_per_node").template get<int>(),
      j.at("num_gpus_per_node").template get<int>(),
      j.at("inter_node_bandwidth").template get<float>(),
      j.at("intra_node_bandwidth").template get<float>()};
}
void adl_serializer<::FlexFlow::MachineSpecification>::to_json(
    json &j, ::FlexFlow::MachineSpecification const &v) {
  j["__type"] = "MachineSpecification";
  j["num_nodes"] = v.num_nodes;
  j["num_cpus_per_node"] = v.num_cpus_per_node;
  j["num_gpus_per_node"] = v.num_gpus_per_node;
  j["inter_node_bandwidth"] = v.inter_node_bandwidth;
  j["intra_node_bandwidth"] = v.intra_node_bandwidth;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(MachineSpecification const &x) {
  std::ostringstream oss;
  oss << "<MachineSpecification";
  oss << " num_nodes=" << x.num_nodes;
  oss << " num_cpus_per_node=" << x.num_cpus_per_node;
  oss << " num_gpus_per_node=" << x.num_gpus_per_node;
  oss << " inter_node_bandwidth=" << x.inter_node_bandwidth;
  oss << " intra_node_bandwidth=" << x.intra_node_bandwidth;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, MachineSpecification const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
