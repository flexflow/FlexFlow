// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/device_type.enum.toml
/* proj-data
{
  "generated_from": "cfe4bc5e9f7c5796b9b90b420c33935f"
}
*/

#include "pcg/device_type.dtg.h"

#include <sstream>
#include <stdexcept>

namespace std {
size_t hash<FlexFlow::DeviceType>::operator()(FlexFlow::DeviceType x) const {
  return std::hash<int>{}(static_cast<int>(x));
}
} // namespace std
namespace FlexFlow {
std::string format_as(DeviceType x) {
  switch (x) {
    case DeviceType::GPU:
      return "GPU";
    case DeviceType::CPU:
      return "CPU";
    default:
      std::ostringstream oss;
      oss << "Unknown DeviceType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
std::ostream &operator<<(std::ostream &s, DeviceType x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
namespace FlexFlow {
void to_json(::nlohmann::json &j, DeviceType x) {
  switch (x) {
    case DeviceType::GPU:
      j = "GPU";
      break;
    case DeviceType::CPU:
      j = "CPU";
      break;
    default:
      std::ostringstream oss;
      oss << "Unknown DeviceType value " << static_cast<int>(x);
      throw std::runtime_error(oss.str());
  }
}
void from_json(::nlohmann::json const &j, DeviceType &x) {
  std::string as_str = j.get<std::string>();
  if (as_str == "GPU") {
    x = DeviceType::GPU;
  } else if (as_str == "CPU") {
    x = DeviceType::CPU;
  } else {
    std::ostringstream oss;
    oss << "Unknown DeviceType value " << as_str;
    throw std::runtime_error(oss.str());
  }
}
} // namespace FlexFlow
namespace rc {
Gen<FlexFlow::DeviceType> Arbitrary<FlexFlow::DeviceType>::arbitrary() {
  return gen::element<FlexFlow::DeviceType>(FlexFlow::DeviceType::GPU,
                                            FlexFlow::DeviceType::CPU);
}
} // namespace rc
