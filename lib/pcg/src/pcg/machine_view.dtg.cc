// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/machine_view.struct.toml
/* proj-data
{
  "generated_from": "16c571e6bb82d7ef88e5d2a9146638f4"
}
*/

#include "pcg/machine_view.dtg.h"

#include "pcg/device_id_t.dtg.h"
#include "pcg/strided_rectangle.dtg.h"
#include <sstream>

namespace FlexFlow {
MachineView::MachineView(::FlexFlow::device_id_t const &start,
                         ::FlexFlow::StridedRectangle const &rect)
    : start(start), rect(rect) {}
bool MachineView::operator==(MachineView const &other) const {
  return std::tie(this->start, this->rect) == std::tie(other.start, other.rect);
}
bool MachineView::operator!=(MachineView const &other) const {
  return std::tie(this->start, this->rect) != std::tie(other.start, other.rect);
}
bool MachineView::operator<(MachineView const &other) const {
  return std::tie(this->start, this->rect) < std::tie(other.start, other.rect);
}
bool MachineView::operator>(MachineView const &other) const {
  return std::tie(this->start, this->rect) > std::tie(other.start, other.rect);
}
bool MachineView::operator<=(MachineView const &other) const {
  return std::tie(this->start, this->rect) <= std::tie(other.start, other.rect);
}
bool MachineView::operator>=(MachineView const &other) const {
  return std::tie(this->start, this->rect) >= std::tie(other.start, other.rect);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::MachineView>::operator()(
    ::FlexFlow::MachineView const &x) const {
  size_t result = 0;
  result ^= std::hash<::FlexFlow::device_id_t>{}(x.start) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^= std::hash<::FlexFlow::StridedRectangle>{}(x.rect) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::MachineView
    adl_serializer<::FlexFlow::MachineView>::from_json(json const &j) {
  return ::FlexFlow::MachineView{
      j.at("start").template get<::FlexFlow::device_id_t>(),
      j.at("rect").template get<::FlexFlow::StridedRectangle>()};
}
void adl_serializer<::FlexFlow::MachineView>::to_json(
    json &j, ::FlexFlow::MachineView const &v) {
  j["__type"] = "MachineView";
  j["start"] = v.start;
  j["rect"] = v.rect;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(MachineView const &x) {
  std::ostringstream oss;
  oss << "<MachineView";
  oss << " start=" << x.start;
  oss << " rect=" << x.rect;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, MachineView const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
