// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/pcg/include/pcg/initializer_attrs.variant.toml
/* proj-data
{
  "generated_from": "f66f3a89ea937e96a058d83ab52e2826"
}
*/

#include "pcg/initializer_attrs.dtg.h"

#include "fmt/format.h"
#include <sstream>
#include <stdexcept>

namespace FlexFlow {
InitializerAttrs::InitializerAttrs(::FlexFlow::GlorotUniformAttrs const &v)
    : raw_variant(v) {}
InitializerAttrs::InitializerAttrs(::FlexFlow::ZeroInitializerAttrs const &v)
    : raw_variant(v) {}
InitializerAttrs::InitializerAttrs(::FlexFlow::UniformInitializerAttrs const &v)
    : raw_variant(v) {}
InitializerAttrs::InitializerAttrs(::FlexFlow::NormInitializerAttrs const &v)
    : raw_variant(v) {}
InitializerAttrs::InitializerAttrs(
    ::FlexFlow::ConstantInitializerAttrs const &v)
    : raw_variant(v) {}
bool InitializerAttrs::operator==(InitializerAttrs const &other) const {
  return this->raw_variant == other.raw_variant;
}
bool InitializerAttrs::operator!=(InitializerAttrs const &other) const {
  return this->raw_variant != other.raw_variant;
}
bool InitializerAttrs::operator<(InitializerAttrs const &other) const {
  return this->raw_variant < other.raw_variant;
}
bool InitializerAttrs::operator>(InitializerAttrs const &other) const {
  return this->raw_variant > other.raw_variant;
}
bool InitializerAttrs::operator<=(InitializerAttrs const &other) const {
  return this->raw_variant <= other.raw_variant;
}
bool InitializerAttrs::operator>=(InitializerAttrs const &other) const {
  return this->raw_variant >= other.raw_variant;
}
} // namespace FlexFlow
namespace std {
size_t hash<::FlexFlow::InitializerAttrs>::operator()(
    ::FlexFlow::InitializerAttrs const &x) const {
  return std::hash<std::variant<::FlexFlow::GlorotUniformAttrs,
                                ::FlexFlow::ZeroInitializerAttrs,
                                ::FlexFlow::UniformInitializerAttrs,
                                ::FlexFlow::NormInitializerAttrs,
                                ::FlexFlow::ConstantInitializerAttrs>>{}(
      x.raw_variant);
}
} // namespace std
namespace nlohmann {
::FlexFlow::InitializerAttrs
    adl_serializer<::FlexFlow::InitializerAttrs>::from_json(json const &j) {
  std::string key = j.at("type").template get<std::string>();
  if (key == "glorot_uniform") {
    return ::FlexFlow::InitializerAttrs{
        j.at("value").template get<::FlexFlow::GlorotUniformAttrs>()};
  } else if (key == "zero") {
    return ::FlexFlow::InitializerAttrs{
        j.at("value").template get<::FlexFlow::ZeroInitializerAttrs>()};
  } else if (key == "uniform") {
    return ::FlexFlow::InitializerAttrs{
        j.at("value").template get<::FlexFlow::UniformInitializerAttrs>()};
  } else if (key == "normal") {
    return ::FlexFlow::InitializerAttrs{
        j.at("value").template get<::FlexFlow::NormInitializerAttrs>()};
  } else if (key == "constant") {
    return ::FlexFlow::InitializerAttrs{
        j.at("value").template get<::FlexFlow::ConstantInitializerAttrs>()};
  } else {
    throw std::runtime_error(fmt::format("Unknown type key {}", key));
  }
}
void adl_serializer<::FlexFlow::InitializerAttrs>::to_json(
    json &j, ::FlexFlow::InitializerAttrs const &x) {
  j["__type"] = "InitializerAttrs";
  switch (x.index()) {
    case 0: {
      j["type"] = "glorot_uniform";
      j["value"] = x.get<::FlexFlow::GlorotUniformAttrs>();
      break;
    }
    case 1: {
      j["type"] = "zero";
      j["value"] = x.get<::FlexFlow::ZeroInitializerAttrs>();
      break;
    }
    case 2: {
      j["type"] = "uniform";
      j["value"] = x.get<::FlexFlow::UniformInitializerAttrs>();
      break;
    }
    case 3: {
      j["type"] = "normal";
      j["value"] = x.get<::FlexFlow::NormInitializerAttrs>();
      break;
    }
    case 4: {
      j["type"] = "constant";
      j["value"] = x.get<::FlexFlow::ConstantInitializerAttrs>();
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type InitializerAttrs", x.index()));
    }
  }
}
} // namespace nlohmann
namespace FlexFlow {
std::string format_as(::FlexFlow::InitializerAttrs const &x) {
  std::ostringstream oss;
  switch (x.index()) {
    case 0: {
      oss << "<InitializerAttrs glorot_uniform="
          << x.get<::FlexFlow::GlorotUniformAttrs>() << ">";
      break;
    }
    case 1: {
      oss << "<InitializerAttrs zero="
          << x.get<::FlexFlow::ZeroInitializerAttrs>() << ">";
      break;
    }
    case 2: {
      oss << "<InitializerAttrs uniform="
          << x.get<::FlexFlow::UniformInitializerAttrs>() << ">";
      break;
    }
    case 3: {
      oss << "<InitializerAttrs normal="
          << x.get<::FlexFlow::NormInitializerAttrs>() << ">";
      break;
    }
    case 4: {
      oss << "<InitializerAttrs constant="
          << x.get<::FlexFlow::ConstantInitializerAttrs>() << ">";
      break;
    }
    default: {
      throw std::runtime_error(
          fmt::format("Unknown index {} for type InitializerAttrs", x.index()));
      break;
    }
  }
  return oss.str();
}
std::ostream &operator<<(std::ostream &s,
                         ::FlexFlow::InitializerAttrs const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
