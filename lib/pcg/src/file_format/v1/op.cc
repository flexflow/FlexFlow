#include "pcg/file_format/v1/op.h"

namespace FlexFlow {

V1Op to_v1(Op const &op) {
  // There should be a better way of doing this.
  switch (op) {
    case Op::NOOP:
      return V1Op::NOOP;
    case Op::INPUT:
      return V1Op::INPUT;
    case Op::WEIGHT:
      return V1Op::WEIGHT;
    case Op::CONV2D:
      return V1Op::CONV2D;
    case Op::DROPOUT:
      return V1Op::DROPOUT;
    case Op::LINEAR:
      return V1Op::LINEAR;
    case Op::BATCHMATMUL:
      return V1Op::BATCHMATMUL;
    case Op::POOL2D:
      return V1Op::POOL2D;
    case Op::SCALAR_MULTIPLY:
      return V1Op::SCALAR_MULTIPLY;
    case Op::SCALAR_ADD:
      return V1Op::SCALAR_ADD;
    case Op::SCALAR_FLOOR_DIV:
      return V1Op::SCALAR_FLOOR_DIV;
    case Op::SCALAR_TRUE_DIV:
      return V1Op::SCALAR_TRUE_DIV;
    case Op::SCALAR_SUB:
      return V1Op::SCALAR_SUB;
    case Op::RELU:
      return V1Op::RELU;
    case Op::IDENTITY:
      return V1Op::IDENTITY;
    case Op::SIGMOID:
      return V1Op::SIGMOID;
    case Op::TANH:
      return V1Op::TANH;
    case Op::ELU:
      return V1Op::ELU;
    case Op::FLAT:
      return V1Op::FLAT;
    case Op::SOFTMAX:
      return V1Op::SOFTMAX;
    case Op::BATCHNORM:
      return V1Op::BATCHNORM;
    case Op::CONCAT:
      return V1Op::CONCAT;
    case Op::SPLIT:
      return V1Op::SPLIT;
    case Op::EMBEDDING:
      return V1Op::EMBEDDING;
    case Op::GROUP_BY:
      return V1Op::GROUP_BY;
    case Op::CACHE:
      return V1Op::CACHE;
    case Op::AGGREGATE:
      return V1Op::AGGREGATE;
    case Op::AGG_SPEC:
      return V1Op::AGG_SPEC;
    case Op::RESHAPE:
      return V1Op::RESHAPE;
    case Op::REVERSE:
      return V1Op::REVERSE;
    case Op::TRANSPOSE:
      return V1Op::TRANSPOSE;
    case Op::EW_ADD:
      return V1Op::EW_ADD;
    case Op::EW_MUL:
      return V1Op::EW_MUL;
    case Op::MATMUL:
      return V1Op::MATMUL;
    case Op::MUL:
      return V1Op::MUL;
    case Op::ENLARGE:
      return V1Op::ENLARGE;
    case Op::SQUEEZE:
      return V1Op::SQUEEZE;
    case Op::UNSQUEEZE:
      return V1Op::UNSQUEEZE;
    case Op::EW_SUB:
      return V1Op::EW_SUB;
    case Op::EW_DIV:
      return V1Op::EW_DIV;
    case Op::EW_EQUAL:
      return V1Op::EW_EQUAL;
    case Op::EW_GREATER:
      return V1Op::EW_GREATER;
    case Op::EW_LESS:
      return V1Op::EW_LESS;
    case Op::EW_MAX:
      return V1Op::EW_MAX;
    case Op::EW_MIN:
      return V1Op::EW_MIN;
    case Op::REDUCE_ARGMAX:
      return V1Op::REDUCE_ARGMAX;
    case Op::REDUCE_ARGMIN:
      return V1Op::REDUCE_ARGMIN;
    case Op::REDUCE_MAX:
      return V1Op::REDUCE_MAX;
    case Op::REDUCE_MEAN:
      return V1Op::REDUCE_MEAN;
    case Op::REDUCE_MIN:
      return V1Op::REDUCE_MIN;
    case Op::REDUCE_PROD:
      return V1Op::REDUCE_PROD;
    case Op::REDUCE_SUM:
      return V1Op::REDUCE_SUM;
    case Op::PAD:
      return V1Op::PAD;
    case Op::SHAPE:
      return V1Op::SHAPE;
    case Op::SIZE:
      return V1Op::SIZE;
    case Op::TOPK:
      return V1Op::TOPK;
    case Op::WHERE:
      return V1Op::WHERE;
    case Op::CEIL:
      return V1Op::CEIL;
    case Op::CAST:
      return V1Op::CAST;
    case Op::EXP:
      return V1Op::EXP;
    case Op::ROUND:
      return V1Op::ROUND;
    case Op::LOG:
      return V1Op::LOG;
    case Op::LOGICAL_NOT:
      return V1Op::LOGICAL_NOT;
    case Op::SQRT:
      return V1Op::SQRT;
    case Op::SIN:
      return V1Op::SIN;
    case Op::COS:
      return V1Op::COS;
    case Op::LEAKYRELU:
      return V1Op::LEAKYRELU;
    case Op::SLICE:
      return V1Op::SLICE;
    case Op::RESIZE:
      return V1Op::RESIZE;
    case Op::PRELU:
      return V1Op::PRELU;
    case Op::GELU:
      return V1Op::GELU;
    case Op::MULTIHEAD_ATTENTION:
      return V1Op::MULTIHEAD_ATTENTION;
    case Op::FUSED:
      return V1Op::FUSED;
    case Op::RSQRT:
      return V1Op::RSQRT;
    case Op::POW:
      return V1Op::POW;
    case Op::MEAN:
      return V1Op::MEAN;
    case Op::LAYERNORM:
      return V1Op::LAYERNORM;
    case Op::GATHER:
      return V1Op::GATHER;
    case Op::BROADCAST:
      return V1Op::BROADCAST;
    case Op::REPARTITION:
      return V1Op::REPARTITION;
    case Op::COMBINE:
      return V1Op::COMBINE;
    case Op::REPLICATE:
      return V1Op::REPLICATE;
    case Op::REDUCTION:
      return V1Op::REDUCTION;
    case Op::BATCH:
      return V1Op::BATCH;
    case Op::PIPELINE:
      return V1Op::PIPELINE;
    case Op::FUSED_PARALLEL:
      return V1Op::FUSED_PARALLEL;
    default:
      NOT_REACHABLE();
  }
}

} // namespace FlexFlow
