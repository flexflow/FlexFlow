// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/local-execution/include/local-execution/cost_details.struct.toml
/* proj-data
{
  "generated_from": "693db06746072111153062c0f087f4b6"
}
*/

#include "local-execution/cost_details.dtg.h"

#include <sstream>

namespace FlexFlow {
CostDetails::CostDetails(float const &total_elapsed_time,
                         size_t const &total_mem_usage)
    : total_elapsed_time(total_elapsed_time), total_mem_usage(total_mem_usage) {
}
bool CostDetails::operator==(CostDetails const &other) const {
  return std::tie(this->total_elapsed_time, this->total_mem_usage) ==
         std::tie(other.total_elapsed_time, other.total_mem_usage);
}
bool CostDetails::operator!=(CostDetails const &other) const {
  return std::tie(this->total_elapsed_time, this->total_mem_usage) !=
         std::tie(other.total_elapsed_time, other.total_mem_usage);
}
bool CostDetails::operator<(CostDetails const &other) const {
  return std::tie(this->total_elapsed_time, this->total_mem_usage) <
         std::tie(other.total_elapsed_time, other.total_mem_usage);
}
bool CostDetails::operator>(CostDetails const &other) const {
  return std::tie(this->total_elapsed_time, this->total_mem_usage) >
         std::tie(other.total_elapsed_time, other.total_mem_usage);
}
bool CostDetails::operator<=(CostDetails const &other) const {
  return std::tie(this->total_elapsed_time, this->total_mem_usage) <=
         std::tie(other.total_elapsed_time, other.total_mem_usage);
}
bool CostDetails::operator>=(CostDetails const &other) const {
  return std::tie(this->total_elapsed_time, this->total_mem_usage) >=
         std::tie(other.total_elapsed_time, other.total_mem_usage);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::CostDetails>::operator()(
    FlexFlow::CostDetails const &x) const {
  size_t result = 0;
  result ^= std::hash<float>{}(x.total_elapsed_time) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  result ^= std::hash<size_t>{}(x.total_mem_usage) + 0x9e3779b9 +
            (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
FlexFlow::CostDetails
    adl_serializer<FlexFlow::CostDetails>::from_json(json const &j) {
  return {j.at("total_elapsed_time").template get<float>(),
          j.at("total_mem_usage").template get<size_t>()};
}
void adl_serializer<FlexFlow::CostDetails>::to_json(
    json &j, FlexFlow::CostDetails const &v) {
  j["__type"] = "CostDetails";
  j["total_elapsed_time"] = v.total_elapsed_time;
  j["total_mem_usage"] = v.total_mem_usage;
}
} // namespace nlohmann

namespace rc {
Gen<FlexFlow::CostDetails> Arbitrary<FlexFlow::CostDetails>::arbitrary() {
  return gen::construct<FlexFlow::CostDetails>(gen::arbitrary<float>(),
                                               gen::arbitrary<size_t>());
}
} // namespace rc

namespace FlexFlow {
std::string format_as(CostDetails const &x) {
  std::ostringstream oss;
  oss << "<CostDetails";
  oss << " total_elapsed_time=" << x.total_elapsed_time;
  oss << " total_mem_usage=" << x.total_mem_usage;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, CostDetails const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
