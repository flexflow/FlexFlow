// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/kernels/include/kernels/legion_dim_t.struct.toml
/* proj-data
{
  "generated_from": "f67d6e50c53539a21d69e7162cf965f4"
}
*/

#include "kernels/legion_dim_t.dtg.h"

#include <sstream>

namespace FlexFlow {
legion_dim_t::legion_dim_t(int const &value) : value(value) {}
bool legion_dim_t::operator==(legion_dim_t const &other) const {
  return std::tie(this->value) == std::tie(other.value);
}
bool legion_dim_t::operator!=(legion_dim_t const &other) const {
  return std::tie(this->value) != std::tie(other.value);
}
bool legion_dim_t::operator<(legion_dim_t const &other) const {
  return std::tie(this->value) < std::tie(other.value);
}
bool legion_dim_t::operator>(legion_dim_t const &other) const {
  return std::tie(this->value) > std::tie(other.value);
}
bool legion_dim_t::operator<=(legion_dim_t const &other) const {
  return std::tie(this->value) <= std::tie(other.value);
}
bool legion_dim_t::operator>=(legion_dim_t const &other) const {
  return std::tie(this->value) >= std::tie(other.value);
}
} // namespace FlexFlow

namespace std {
size_t hash<FlexFlow::legion_dim_t>::operator()(
    ::FlexFlow::legion_dim_t const &x) const {
  size_t result = 0;
  result ^=
      std::hash<int>{}(x.value) + 0x9e3779b9 + (result << 6) + (result >> 2);
  return result;
}
} // namespace std

namespace nlohmann {
::FlexFlow::legion_dim_t
    adl_serializer<::FlexFlow::legion_dim_t>::from_json(json const &j) {
  return ::FlexFlow::legion_dim_t{j.at("value").template get<int>()};
}
void adl_serializer<::FlexFlow::legion_dim_t>::to_json(
    json &j, ::FlexFlow::legion_dim_t const &v) {
  j["__type"] = "legion_dim_t";
  j["value"] = v.value;
}
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(legion_dim_t const &x) {
  std::ostringstream oss;
  oss << "<legion_dim_t";
  oss << " value=" << x.value;
  oss << ">";
  return oss.str();
}
std::ostream &operator<<(std::ostream &s, legion_dim_t const &x) {
  return s << fmt::to_string(x);
}
} // namespace FlexFlow
