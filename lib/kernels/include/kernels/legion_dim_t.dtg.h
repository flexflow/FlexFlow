// THIS FILE WAS AUTO-GENERATED BY proj. DO NOT MODIFY IT!
// If you would like to modify this datatype, instead modify
// lib/kernels/include/kernels/legion_dim_t.struct.toml
/* proj-data
{
  "generated_from": "f67d6e50c53539a21d69e7162cf965f4"
}
*/

#ifndef _FLEXFLOW_LIB_KERNELS_INCLUDE_KERNELS_LEGION_DIM_T_DTG_H
#define _FLEXFLOW_LIB_KERNELS_INCLUDE_KERNELS_LEGION_DIM_T_DTG_H

#include "fmt/format.h"
#include "nlohmann/json.hpp"
#include <functional>
#include <ostream>
#include <tuple>

namespace FlexFlow {
struct legion_dim_t {
  legion_dim_t() = delete;
  legion_dim_t(int const &value);

  bool operator==(legion_dim_t const &) const;
  bool operator!=(legion_dim_t const &) const;
  bool operator<(legion_dim_t const &) const;
  bool operator>(legion_dim_t const &) const;
  bool operator<=(legion_dim_t const &) const;
  bool operator>=(legion_dim_t const &) const;
  int value;
};
} // namespace FlexFlow

namespace std {
template <>
struct hash<FlexFlow::legion_dim_t> {
  size_t operator()(FlexFlow::legion_dim_t const &) const;
};
} // namespace std

namespace nlohmann {
template <>
struct adl_serializer<FlexFlow::legion_dim_t> {
  static FlexFlow::legion_dim_t from_json(json const &);
  static void to_json(json &, FlexFlow::legion_dim_t const &);
};
} // namespace nlohmann

namespace FlexFlow {
std::string format_as(legion_dim_t const &);
std::ostream &operator<<(std::ostream &, legion_dim_t const &);
} // namespace FlexFlow

#endif // _FLEXFLOW_LIB_KERNELS_INCLUDE_KERNELS_LEGION_DIM_T_DTG_H
