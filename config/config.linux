#! /usr/bin/env python3

from typing import Any
from pathlib import Path
import subprocess
from configlib.ff_cmake import BuildType, CUDAArch, GasnetConduit, GPUBackend, FFBuildConfig
from configlib.cmake_bool import CMakeBool
from configlib.argparse_env import env_store_false, env_store_true, env_store
from configlib.argparse_logging import set_log_level
import os
import logging

_l = logging.getLogger(__name__)

def main():
    import argparse

    p = argparse.ArgumentParser()
    p.add_argument('--meta::log-level', 
                   choices=['DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL'], 
                   default='INFO', 
                   action=set_log_level)

    p.add_argument('--cc', type=Path, default=None)
    p.add_argument('--cxx', type=Path, default=None)

    p.add_argument('--build-type', 
                   default=BuildType.release, 
                   choices=BuildType.get_valid_values())

    p.add_argument('--no-python', 
                   dest='use_python', 
                   action=env_store_false, 
                   env_sources=['FF_USE_PYTHON'], 
                   type=CMakeBool)

    p.add_argument('--use-gasnet', 
                   action=env_store_true, 
                   env_sources=['FF_USE_GASNET'], 
                   type=CMakeBool)

    p.add_argument('--build-all-examples',
                   action=env_store_true,
                   env_sources=['FF_BUILD_ALL_EXAMPLES'],
                   type=CMakeBool)

    p.add_argument('--build-unit-tests',
                   action=env_store_true,
                   env_sources=['FF_BUILD_UNIT_TESTS'],
                   type=CMakeBool)

    p.add_argument('--no-prebuilt-nccl',
                   dest='use_prebuilt_nccl',
                   action=env_store_false,
                   env_sources=['FF_USE_PREBUILT_NCCL'],
                   type=CMakeBool)

    p.add_argument('--no-prebuilt-legion',
                   dest='use_prebuilt_legion',
                   action=env_store_false,
                   env_sources=['FF_USE_PREBUILT_LEGION'],
                   type=CMakeBool)

    p.add_argument('--cuda-dir',
                   default=None,
                   type=Path,
                   env_sources=['CUDA_DIR', 'CONDA_PREFIX'],
                   action=env_store)

    p.add_argument('--cudnn-dir',
                   default=None,
                   type=Path,
                   env_sources=['CUDNN_DIR'],
                   action=env_store)

    p.add_argument('--cuda-arch',
                   default=CUDAArch.autodetect,
                   choices=CUDAArch.get_valid_values(),
                   env_sources=['FF_CUDA_ARCH'],
                   action=env_store)

    p.add_argument('--gasnet-conduit',
                   default=GasnetConduit.ibv,
                   choices=GasnetConduit.get_valid_values(),
                   env_sources=['FF_GASNET_CONDUT'],
                   action=env_store)

    p.add_argument('--rocm-path',
                   default='/opt/rocm',
                   type=Path,
                   action=env_store,
                   env_sources=['ROCM_PATH'])

    p.add_argument('--max-dim',
                   default=str(5),
                   type=int,
                   action=env_store,
                   env_sources=['FF_MAX_DIM'])

    p.add_argument('--use-avx2',
                   action=env_store_true,
                   env_sources=['FF_USE_AVX2'],
                   type=CMakeBool)

    p.add_argument('--gpu-backend',
                   default=GPUBackend.cuda,
                   choices=GPUBackend.get_valid_values(),
                   action=env_store,
                   env_sources=['FF_GPU_BACKEND'])

    p.add_argument('--use-ccache',
                   action=env_store_true,
                   env_sources=['FF_USE_CCACHE'],
                   type=CMakeBool)

    args = p.parse_args()

    _l.debug(args)
    config = FFBuildConfig(
        c_compiler=args.cc,
        cxx_compiler=args.cxx,
        c_flags=[],
        nvcc_flags=[],
        ld_flags=[],
        install_dir=None,
        build_type=args.build_type,
        use_python=args.use_python,
        build_all_examples=args.build_all_examples,
        build_unit_tests=args.build_unit_tests,
        use_prebuilt_nccl=args.use_prebuilt_nccl,
        use_prebuilt_legion=args.use_prebuilt_legion,
        cuda_dir=args.cuda_dir,
        cudnn_dir=args.cudnn_dir,
        cuda_arch=args.cuda_arch,
        gasnet_conduit=args.gasnet_conduit,
        rocm_path=args.rocm_path,
        max_dim=args.max_dim,
        use_avx2=args.use_avx2,
        gpu_backend=args.gpu_backend,
        use_ccache=args.use_ccache,
    )
    config.run()

if __name__ == '__main__':
    main()

