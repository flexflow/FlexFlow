#! /usr/bin/env python3

from typing import Any
from pathlib import Path
import subprocess
from configlib.ff_cmake import BuildType, CUDAArch, GasnetConduit, GPUBackend, FFBuildConfig, BuildInvocation
from configlib.cmake_bool import CMakeBool
from configlib.argparse_env import env_store_false, env_store_true, env_store
from configlib.argparse_logging import set_log_level
from configlib.inspect_utils import get_definition_location
import os
import logging

_l = logging.getLogger(__name__)

def main_run(args: Any, config: FFBuildConfig):
    config.run()

def main_show(args: Any, config: FFBuildConfig):
    print(config.show())

def main():
    import argparse

    p = argparse.ArgumentParser()
    p.set_defaults(func=main_run)

    p.add_argument('--meta::log-level', 
                   choices=['DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL'], 
                   default='INFO', 
                   action=set_log_level,
                   help='Set the log level for the config scripts',
                   )

    p.add_argument('--cc', 
                   type=Path, 
                   default=None,
                   help='Override the default C compiler with the path of a custom C compiler',
                   )

    p.add_argument('--cxx', 
                   type=Path, 
                   default=None,
                   help='Override the default C++ compiler with the path of a custom C++ compiler',
                   )

    p.add_argument('--build-type', 
                   default=BuildType.release, 
                   choices=BuildType.get_valid_values(),
                   help='Override the default CMake build type (see https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html)',
                   )

    p.add_argument('--no-python', 
                   dest='use_python', 
                   action=env_store_false, 
                   env_sources=['FF_USE_PYTHON'], 
                   type=CMakeBool, 
                   help='Do not build the FlexFlow python interface (only build the C++ interface)',
                   )

    p.add_argument('--use-gasnet', 
                   action=env_store_true, 
                   env_sources=['FF_USE_GASNET'], 
                   type=CMakeBool,
                   help='Build Legion with gasnet support. Needed to run FlexFlow on multiple nodes (see https://legion.stanford.edu/gasnet/index.html for more information)',
                   )

    p.add_argument('--build-all-examples',
                   action=env_store_true,
                   env_sources=['FF_BUILD_ALL_EXAMPLES'],
                   type=CMakeBool,
                   help='Build all of the FlexFlow C++ examples (located in $FF_HOME/examples/cpp/)',
                   )

    p.add_argument('--build-unit-tests',
                   action=env_store_true,
                   env_sources=['FF_BUILD_UNIT_TESTS'],
                   type=CMakeBool,
                   help='Built the C++ non-gpu unit tests (located in $FF_HOME/tests/unit/)',
                   )

    p.add_argument('--no-prebuilt-nccl',
                   dest='use_prebuilt_nccl',
                   action=env_store_false,
                   env_sources=['FF_USE_PREBUILT_NCCL'],
                   type=CMakeBool,
                   help=('Do not use the prebuilt nccl library generated by https://github.com/flexflow/flexflow-third-party. '
                         'This forces FlexFlow to build nccl from source, which will increase build times'),
                   )

    p.add_argument('--no-prebuilt-legion',
                   dest='use_prebuilt_legion',
                   action=env_store_false,
                   env_sources=['FF_USE_PREBUILT_LEGION'],
                   type=CMakeBool,
                   help=('Do not use the prebuilt legion library generated by https://github.com/flexflow/flexflow-third-party. '
                       'This forces FlexFlow to build legion from source, which will increase build times'),
                   )

    p.add_argument('--cuda-dir',
                   default=None,
                   type=Path,
                   env_sources=['CUDA_DIR', 'CONDA_PREFIX'],
                   action=env_store,
                   help=('Manually specify the path to the cuda installation to use. '
                         'This directory should contain the path (lib/stubs/libcuda.so or lib64/stubs/libcuda.so)'),
                   )

    p.add_argument('--cudnn-dir',
                   default=None,
                   type=Path,
                   env_sources=['CUDNN_DIR'],
                   action=env_store,
                   help=('Manually specify the path to the cudnn installation to use. '
                         'This directory should contain the path (lib/libcudnn.so or lib64/libcudnn.so), and (include/cudnn.h)'),
                   )

    p.add_argument('--cuda-arch',
                   default=CUDAArch.autodetect,
                   choices=CUDAArch.get_valid_values(),
                   env_sources=['FF_CUDA_ARCH'],
                   action=env_store,
                   help=('Manually specify the cuda architecture (i.e., the sm number) to use. '
                         'For more information, see https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/'),
                   )

    p.add_argument('--gasnet-conduit',
                   default=GasnetConduit.ibv,
                   choices=GasnetConduit.get_valid_values(),
                   env_sources=['FF_GASNET_CONDUT'],
                   action=env_store,
                   help=('Manually specify the gasnet conduit to use. '
                         'For more information, see https://legion.stanford.edu/gasnet/index.html#building-gasnet'),
                    )

    p.add_argument('--rocm-path',
                   default='/opt/rocm',
                   type=Path,
                   action=env_store,
                   env_sources=['ROCM_PATH'],
                   help=('Manually specify the path the to the ROCM installation to use. '
                         'Only used if --gpu-backend is set to hip_rocm.'),
                   )

    p.add_argument('--max-dim',
                   default=str(5),
                   type=int,
                   action=env_store,
                   env_sources=['FF_MAX_DIM'],
                   help='ADVANCED: manually override the maximum tensor dimension in FlexFlow.',
                   )

    p.add_argument('--use-avx2',
                   action=env_store_true,
                   env_sources=['FF_USE_AVX2'],
                   type=CMakeBool,
                   help='Enable avx2 support',
                   )

    p.add_argument('--gpu-backend',
                   default=GPUBackend.cuda,
                   choices=GPUBackend.get_valid_values(),
                   action=env_store,
                   env_sources=['FF_GPU_BACKEND'],
                   help=('Configure the GPU backend to use. '
                         f'Default value is set to build for NVIDIA gpus. '
                         f'For AMD GPUs, should be set to either \'{GPUBackend.hip_rocm}\' or \'{GPUBackend.hip_cuda}\'. '
                         f'For Intel GPUs, should be set to \'{GPUBackend.intel}\'.'
                         )
                   )

    p.add_argument('--use-ccache',
                   action=env_store_true,
                   env_sources=['FF_USE_CCACHE'],
                   type=CMakeBool,
                   help=('Build with ccache (ccache must already be installed). '
                         'For more information on ccache, see https://ccache.dev/'
                        ),
                   )
 

    subparsers = p.add_subparsers()
    show_parser = subparsers.add_parser('show', 
                                        help=('Print the cmake invocation instead of running it. '
                                              'Note that other commands may be run during configuration and will not be displayed through this interface. '
                                              f'For more details, see {get_definition_location(BuildInvocation.add_hook)}.'),
                                       )
    show_parser.set_defaults(func=main_show)

    args = p.parse_args()

    _l.debug(args)
    config = FFBuildConfig(
        c_compiler=args.cc,
        cxx_compiler=args.cxx,
        c_flags=[],
        nvcc_flags=[],
        ld_flags=[],
        install_dir=None,
        build_type=args.build_type,
        use_python=args.use_python,
        build_all_examples=args.build_all_examples,
        build_unit_tests=args.build_unit_tests,
        use_prebuilt_nccl=args.use_prebuilt_nccl,
        use_prebuilt_legion=args.use_prebuilt_legion,
        cuda_dir=args.cuda_dir,
        cudnn_dir=args.cudnn_dir,
        cuda_arch=args.cuda_arch,
        gasnet_conduit=args.gasnet_conduit,
        rocm_path=args.rocm_path,
        max_dim=args.max_dim,
        use_avx2=args.use_avx2,
        gpu_backend=args.gpu_backend,
        use_ccache=args.use_ccache,
    )
    args.func(args, config)

if __name__ == '__main__':
    main()

