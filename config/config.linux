#!/bin/bash

######################################### Edit Configs here #########################################
echo " Defaults for Linux machine"

# set the CC and CXX, usually it is not needed as cmake can detect it
# set CC and CXX to mpicc and mpic++ when enable gasnet
# CC=mpicc
# CXX=mpic++

# add flags if needed
#CC_FLAGS=${CC_FLAGS+=""}
#NVCC_FLAGS=${NVCC_FLAGS+=""}
#LD_FLAGS=${LD_FLAGS+=""}

#set install dir
#INSTALL_DIR=

# set build type
BUILD_TYPE=Release

# set CUDA Arch, replace xx with your GPU architecture
#FF_CUDA_ARCH=xx

# set CUDNN dir in case cmake cannot autodetect a path
CUDNN_DIR=/usr/local/cuda

# set CUDA dir in case cmake cannot autodetect a path
CUDA_DIR=/usr/local/cuda

CUDA_LIB_PATH="${CUDA_DIR}/lib64/stubs"

# enable Python
FF_USE_PYTHON=ON

# enable NCCL
FF_USE_NCCL=ON

# enable GASNet
FF_USE_GASNET=OFF

# select GASNET conduit
FF_GASNET_CONDUIT=ibv

# build C++ examples
FF_BUILD_ALL_EXAMPLES=OFF

# enable avx2
FF_USE_AVX2=OFF

# set MAX_DIM
FF_MAX_DIM=5

########################################################################################################

function parse_configs() {
  # set CC and CXX
  if [ -n "$CC" ]; then
    SET_CC="-DCMAKE_C_COMPILER=${CC}"
  fi

  if [ -n "$CXX" ]; then
    SET_CXX="-DCMAKE_CXX_COMPILER=${CXX}"
  fi

  # set FLAGS
  if [ -n "$CC_FLAGS" ]; then
    SET_CC_FLAGS="CC_FLAGS=${CC_FLAGS}"
  fi

  if [ -n "$CC_FLAGS" ]; then
    SET_NVCC_FLAGS="NVCC_FLAGS=${NVCC_FLAGS}"
  fi

  if [ -n "$LD_FLAGS" ]; then
    SET_LD_FLAGS="LD_FLAGS=${LD_FLAGS}"
  fi

  #set installation dir
  if [ -n "$INSTALL_DIR" ]; then
    SET_INSTALL_DIR="-DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}"
  fi

  # set build type
  if [ -n "$BUILD_TYPE" ]; then
    SET_BUILD="-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
  fi

  # set CUDA Arch
  if [ -n "$FF_CUDA_ARCH" ]; then
    SET_CUDA_ARCH="-DFF_CUDA_ARCH=${FF_CUDA_ARCH}"
  fi

  # set CUDA dir
  if [ -n "$CUDA_DIR" ]; then
    SET_CUDA="-DCUDA_PATH=${CUDA_DIR}"
  fi

  if [ -n "$CUDA_LIB_PATH" ]; then
    SET_CUDA_LIB_PATH="CUDA_PATH=${CUDA_LIB_PATH}"
  fi

  # set cudnn dir
  if [ -n "$CUDNN_DIR" ]; then
    SET_CUDNN="-DCUDNN_PATH=${CUDNN_DIR}"
  fi

  # enable Python
  if [ "$FF_USE_PYTHON" = "ON" ]; then
    SET_PYTHON="-DFF_USE_PYTHON=ON"
  elif [ "$FF_USE_PYTHON" = "OFF" ]; then
    SET_PYTHON="-DFF_USE_PYTHON=OFF"
  else
    SET_PYTHON="-DFF_USE_PYTHON=ON"
  fi

  # enable NCCL
  if [ "$FF_USE_NCCL" = "ON" ]; then
    SET_NCCL="-DFF_USE_NCCL=ON"
  elif [ "$FF_USE_NCCL" = "OFF" ]; then
    SET_NCCL="-DFF_USE_NCCL=OFF"
  else
    SET_NCCL="-DFF_USE_NCCL=ON"
  fi

  # enable GASNET
  if [ "$FF_USE_GASNET" = "ON" ]; then
    SET_GASNET="-DFF_USE_GASNET=ON"
    if [ "$FF_GASNET_CONDUIT" = "ibv" ]; then
      SET_GASNET+=" -DFF_GASNET_CONDUIT=ibv"
    elif [ "$FF_GASNET_CONDUIT" = "mpi" ]; then
      SET_GASNET+=" -DFF_GASNET_CONDUIT=mpi"
    elif [ "$FF_GASNET_CONDUIT" = "udp" ]; then
      SET_GASNET+=" -DFF_GASNET_CONDUIT=udp"
    fi
  elif [ "$FF_USE_GASNET" = "OFF" ]; then
    SET_GASNET="-DFF_USE_GASNET=OFF"
  else
    SET_GASNET="-DFF_USE_GASNET=ON"
  fi

  # build C++ examples
  if [ "$FF_BUILD_ALL_EXAMPLES" = "ON" ]; then
    SET_EXAMPLES="-DFF_BUILD_ALL_EXAMPLES=ON"
  elif [ "$FF_BUILD_ALL_EXAMPLES" = "OFF" ]; then
    SET_EXAMPLES="-DFF_BUILD_ALL_EXAMPLES=OFF"
  else
    SET_EXAMPLES="-DFF_BUILD_ALL_EXAMPLES=ON"
  fi

  # enable avx2
  if [ "$FF_USE_AVX2" = "ON" ]; then
    SET_AVX2="-DFF_USE_AVX2=ON"
  elif [ "$FF_USE_AVX2" = "OFF" ]; then
    SET_AVX2="-DFF_USE_AVX2=OFF"
  else
    SET_AVX2="-DFF_USE_AVX2=OFF"
  fi

  #set max dims
  if [ -n "$FF_MAX_DIM" ]; then
    SET_MAX_DIM="-DFF_MAX_DIM=${FF_MAX_DIM}"
  fi

}

parse_configs $*


