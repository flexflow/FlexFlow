#!/bin/bash

function run_cmake() {
# set CC and CXX
if [ -n "$CC" ]; then
  SET_CC="-DCMAKE_C_COMPILER=${CC}"
fi

if [ -n "$CXX" ]; then
  SET_CXX="-DCMAKE_CXX_COMPILER=${CXX}"
fi

# set FLAGS
if [ -n "$CC_FLAGS" ]; then
  SET_CC_FLAGS="CC_FLAGS=${CC_FLAGS}"
fi

if [ -n "$CC_FLAGS" ]; then
  SET_NVCC_FLAGS="NVCC_FLAGS=${NVCC_FLAGS}"
fi

if [ -n "$LD_FLAGS" ]; then
  SET_LD_FLAGS="LD_FLAGS=${LD_FLAGS}"
fi

# set build type
if [ -n "$BUILD_TYPE" ]; then
  SET_BUILD="-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"
fi

# set cudnn dir
if [ -n "$CUDNN_DIR" ]; then
  SET_CUDNN="CUDNN_ROOT=${CUDNN_DIR}"
fi

# enable Python
if [ -n "$USE_PYTHON" ]; then
  SET_PYTHON="-DFlexFlow_USE_Python=ON"
fi

# set Legion fir
if [ -n "$LEGION_DIR" ]; then
  SET_LEGION="-DFlexFlow_USE_External_Legion=ON -DEXTERNAL_LEGION_DIR=${LEGION_DIR}"
fi

# set Protobuf fir
if [ -n "$PROTOBUF_DIR" ]; then
  SET_PROTOBUF="-DFlexFlow_USE_External_Protobuf=ON -DEXTERNAL_PROTOBUF_DIR=${PROTOBUF_DIR}"
fi

SRC_LOCATION=${SRC_LOCATION:=`dirname $0`/../}
CMAKE_COMMAND="${SET_CUDNN} ${SET_CC_FLAGS} ${SET_NVCC_FLAGS} ${SET_LD_FLAGS} cmake -DCUDA_USE_STATIC_CUDA_RUNTIME=OFF ${SET_CC} ${SET_CXX} ${SET_BUILD} ${SET_PYTHON} ${SET_LEGION} ${SET_PROTOBUF} $* ${SRC_LOCATION}"
echo $CMAKE_COMMAND
eval $CMAKE_COMMAND
}