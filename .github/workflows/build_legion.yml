name: "prebuild-legion"
on:
  push:
    branches:
      - "inference"
    paths:
      - "cmake/**"
      - "config/**"
      - "deps/legion/**"
      - ".github/workflows/helpers/install_dependencies.sh"
  workflow_dispatch:
concurrency:
  group: prebuild-legion-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  start-oraicle-instance:
    runs-on: ubuntu-latest
    name: Turning on Oracle VM - flexflow-ci
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }} 
      OCI_INSTANCE_ID: ${{ secrets.INSTANCE_ID_FFCI }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Install Oci
        run: pip install oci
        
      - name: Running script (START)
        run: python3 docker/oracle_con.py --start --instance_id $OCI_INSTANCE_ID

  prebuild-legion:
    name: Prebuild Legion with CMake
    runs-on: [self-hosted, cpu_only]
    defaults:
      run:
        shell: bash -l {0} # required to use an activated conda environment
    strategy:
      matrix:
        gpu_backend: ["cuda", "hip_rocm"]
        gpu_backend_version: ["11.1", "11.2", "11.3", "11.4", "11.5", "11.6", "11.7", "11.8", "12.0", "5.3", "5.4", "5.5", "5.6"]
        python_version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          - gpu_backend: "cuda"
            gpu_backend_version: "5.3"
          - gpu_backend: "cuda"
            gpu_backend_version: "5.4"
          - gpu_backend: "cuda"
            gpu_backend_version: "5.5"
          - gpu_backend: "cuda"
            gpu_backend_version: "5.6"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.1"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.2"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.3"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.4"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.5"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.6"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.7"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "11.8"
          - gpu_backend: "hip_rocm"
            gpu_backend_version: "12.0"
      fail-fast: false
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Free additional space on runner
        run: .github/workflows/helpers/free_space_on_runner.sh

      - name: Build Legion
        env:
          FF_GPU_BACKEND: ${{ matrix.gpu_backend }}
        run: ./.github/workflows/helpers/launch_prebuilding.sh

      - name: Archive compiled Legion library (CUDA)
        env:
          FF_GPU_BACKEND: ${{ matrix.gpu_backend }}
        uses: actions/upload-artifact@v3
        with:
          name: legion_ubuntu-20.04_${{ matrix.gpu_backend }}-${{ matrix.gpu_backend_version }}_py${{ matrix.python_version }}
          path: prebuilt_legion_assets/legion_ubuntu-20.04_${{ matrix.gpu_backend }}-${{ matrix.gpu_backend_version }}_py${{ matrix.python_version }}.tar.gz

  create-release:
    name: Create new release
    runs-on: ubuntu-20.04
    needs: prebuild-legion
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
      - name: Free additional space on runner
        run: .github/workflows/helpers/free_space_on_runner.sh
      - name: Create folder for artifacts
        run: mkdir artifacts unwrapped_artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Display structure of downloaded files
        working-directory: ./artifacts
        run: ls -R
      - name: Unwrap all artifacts
        working-directory: ./artifacts
        run: find . -maxdepth 2 -mindepth 2 -type f -name "*.tar.gz" -exec mv {} ../unwrapped_artifacts/  \;
      - name: Get datetime
        run: echo "RELEASE_DATETIME=$(date '+%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
      - name: Release
        env:
          NAME: ${{ env.RELEASE_DATETIME }}
          TAG_NAME: ${{ env.RELEASE_DATETIME }}
          GITHUB_TOKEN: ${{ secrets.FLEXFLOW_TOKEN }}
        run: gh release create $TAG_NAME ./unwrapped_artifacts/*.tar.gz --repo flexflow/flexflow-third-party

close-oraicle-instance:
    runs-on: ubuntu-latest
    name: Turning on Oracle VM - flexflow-ci
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }} 
      OCI_INSTANCE_ID: ${{ secrets.INSTANCE_ID_FFCI }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Install Oci
        run: pip install oci
        
      - name: Running script (Close)
        run: python3 docker/oracle_con.py --close --instance_id $OCI_INSTANCE_ID