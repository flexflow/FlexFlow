name: "build"
on:
  pull_request:
    paths:
      - "include/**"
      - "inference/**"
      - "cmake/**"
      - "config/**"
      - "deps/**"
      - "python/**"
      - "src/**"
      - ".github/workflows/helpers/install_dependencies.sh"
      - ".github/workflows/build.yml"
  push:
    branches:
      - "master"
    paths:
      - "include/**"
      - "inference/**"
      - "cmake/**"
      - "config/**"
      - "deps/**"
      - "python/**"
      - "src/**"
      - ".github/workflows/helpers/install_dependencies.sh"
      - ".github/workflows/build.yml"
  workflow_dispatch:
concurrency:
  group: build-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  prebuild-legion:
    name: Prebuild Legion with CMake
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0} # required to use an activated conda environment
    strategy:
      matrix:
        gpu_backend: ["cuda", "hip_rocm"]
      fail-fast: false
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Free additional space on runner
        run: .github/workflows/helpers/free_space_on_runner.sh

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: "11.8.0"
          # Disable caching of the CUDA binaries, since it does not give us any significant performance improvement
          use-github-cache: "false"

      - name: Install system dependencies
        run: FF_GPU_BACKEND=${{ matrix.gpu_backend }} .github/workflows/helpers/install_dependencies.sh

      - name: Install conda and FlexFlow dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: flexflow
          environment-file: conda/environment.yml
          auto-activate-base: false

      - name: Build Legion
        env:
          FF_GPU_BACKEND: ${{ matrix.gpu_backend }}
        run: |
          export PATH=/opt/conda/bin:$PATH
          export CUDNN_DIR=/usr/local/cuda
          export CUDA_DIR=/usr/local/cuda
          export FF_CUDA_ARCH=all
          export BUILD_LEGION_ONLY=ON

          # create and export the installation path
          export INSTALL_DIR="export/legion"
          mkdir -p export/legion

          cores_available=$(nproc --all)
          n_build_cores=$(( cores_available -1 ))

          mkdir build
          cd build
          ../config/config.linux
          make -j $n_build_cores
          ../config/config.linux
          make install
           
          # prepare library files extract LEGION tarball file 
          export LEGION_TARBALL="legion_ubuntu-20.04_${{ matrix.gpu_backend }}.tar.gz"
          echo "Creating archive $LEGION_TARBALL"
          cd export
          touch "$LEGION_TARBALL"
          tar --exclude="$LEGION_TARBALL" -zcvf $LEGION_TARBALL .
          echo "Checking the size of the Legion tarball..."
          du -h $LEGION_TARBALL

      - name: Archive compiled Legion library (CUDA)
        env:
          FF_GPU_BACKEND: ${{ matrix.gpu_backend }}
        uses: actions/upload-artifact@v3
        with:
          name: legion_ubuntu-20.04_${{ matrix.gpu_backend }}
          path: build/export/legion_ubuntu-20.04_${{ matrix.gpu_backend }}.tar.gz

  create-release:
    name: Create new release
    runs-on: ubuntu-20.04
    needs: prebuild-legion
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
      - name: Free additional space on runner
        run: .github/workflows/helpers/free_space_on_runner.sh
      - name: Create folder for artifacts
        run: mkdir artifacts unwrapped_artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Display structure of downloaded files
        working-directory: ./artifacts
        run: ls -R
      - name: Unwrap all artifacts
        working-directory: ./artifacts
        run: find . -maxdepth 2 -mindepth 2 -type f -name "*.tar.gz" -exec mv {} ../unwrapped_artifacts/  \;
      - name: Get datetime
        run: echo "RELEASE_DATETIME=$(date '+%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
      - name: Release
        env:
          NAME: ${{ env.RELEASE_DATETIME }}
          TAG_NAME: ${{ env.RELEASE_DATETIME }}
          GITHUB_TOKEN: ${{ secrets.FLEXFLOW_TOKEN }}
        run: gh release create $TAG_NAME ./unwrapped_artifacts/*.tar.gz --repo flexflow/flexflow-third-party

  cmake-build:
    name: Build FlexFlow with CMake
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0} # required to use an activated conda environment
    strategy:
      matrix:
        gpu_backend: ["cuda", "hip_rocm"]
      fail-fast: false
    env:
      FF_GPU_BACKEND: ${{ matrix.gpu_backend }}
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Free additional space on runner
        run: .github/workflows/helpers/free_space_on_runner.sh

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.11
        if: ${{ matrix.gpu_backend == 'cuda' }}
        id: cuda-toolkit
        with:
          cuda: "11.8.0"
          # Disable caching of the CUDA binaries, since it does not give us any significant performance improvement
          use-github-cache: "false"

      - name: Install system dependencies
        run: .github/workflows/helpers/install_dependencies.sh

      - name: Install conda and FlexFlow dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: flexflow
          environment-file: conda/environment.yml
          auto-activate-base: false

      - name: Build FlexFlow
        run: |
          export CUDNN_DIR="$CUDA_PATH"
          export CUDA_DIR="$CUDA_PATH"
          export FF_HOME=$(pwd)
          export FF_CUDA_ARCH=70
          export FF_HIP_ARCH=gfx1100,gfx1036
          export hip_version=5.6
          export FF_BUILD_ALL_INFERENCE_EXAMPLES=ON

          if [[ "${FF_GPU_BACKEND}" == "cuda" ]]; then
            export FF_BUILD_ALL_EXAMPLES=ON
            export FF_BUILD_UNIT_TESTS=ON
          else 
            export FF_BUILD_ALL_EXAMPLES=OFF
            export FF_BUILD_UNIT_TESTS=OFF
          fi

          cores_available=$(nproc --all)
          n_build_cores=$(( cores_available -1 ))
          if (( $n_build_cores < 1 )) ; then n_build_cores=1 ; fi
          mkdir build
          cd build
          
          ../config/config.linux
          make -j $n_build_cores

      - name: Install FlexFlow
        run: |
          export CUDNN_DIR="$CUDA_PATH"
          export CUDA_DIR="$CUDA_PATH"
          export FF_HOME=$(pwd)
          export FF_CUDA_ARCH=70
          export FF_HIP_ARCH=gfx1100,gfx1036
          export hip_version=5.6
          export FF_BUILD_ALL_INFERENCE_EXAMPLES=ON
          
          if [[ "${FF_GPU_BACKEND}" == "cuda" ]]; then
            export FF_BUILD_ALL_EXAMPLES=ON
            export FF_BUILD_UNIT_TESTS=ON
          else 
            export FF_BUILD_ALL_EXAMPLES=OFF
            export FF_BUILD_UNIT_TESTS=OFF
          fi

          cd build
          ../config/config.linux
          sudo make install
          sudo ldconfig

      - name: Run C++ unit tests
        if: ${{ matrix.gpu_backend == 'cuda' }}
        run: |
          export CUDNN_DIR="$CUDA_PATH"
          export CUDA_DIR="$CUDA_PATH"
          export LD_LIBRARY_PATH="$CUDA_PATH/lib64/stubs:$LD_LIBRARY_PATH"
          export FF_HOME=$(pwd)
          sudo ln -s "$CUDA_PATH/lib64/stubs/libcuda.so" "$CUDA_PATH/lib64/stubs/libcuda.so.1"
          cd build
          ./tests/unit/unit-test

      - name: Check availability of Python flexflow.core module
        run: |
          if [[ "${FF_GPU_BACKEND}" == "cuda" ]]; then
            export LD_LIBRARY_PATH="$CUDA_PATH/lib64/stubs:$LD_LIBRARY_PATH"
          fi
          # Remove build folder to check that the installed version can run independently of the build files
          rm -rf build
          export CPU_ONLY_TEST=1
          python -c "import flexflow.core; exit()"

  makefile-build:
    name: Build FlexFlow with the Makefile
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash -l {0} # required to use an activated conda environment
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Free additional space on runner
        run: .github/workflows/helpers/free_space_on_runner.sh

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: "11.8.0"
          use-github-cache: "false"

      - name: Install system dependencies
        run: .github/workflows/helpers/install_dependencies.sh

      - name: Install conda and FlexFlow dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: flexflow
          environment-file: conda/environment.yml
          auto-activate-base: false

      - name: Build FlexFlow
        run: |
          export CUDNN_DIR="$CUDA_PATH"
          export CUDA_DIR="$CUDA_PATH"
          export LD_LIBRARY_PATH="$CUDA_PATH/lib64/stubs:$LD_LIBRARY_PATH"
          sudo ln -s "$CUDA_PATH/lib64/stubs/libcuda.so" "$CUDA_PATH/lib64/stubs/libcuda.so.1"
          export FF_HOME=$(pwd)
          cores_available=$(nproc --all)
          n_build_cores=$(( cores_available -1 ))
          if (( $n_build_cores < 1 )) ; then n_build_cores=1 ; fi

          cd python
          make -j $n_build_cores
          export CPU_ONLY_TEST=1
          python -c 'import flexflow.core'
